*------------------------------------------------------------*
* Report Log
Date:                December 19, 2019
Time:                15:48:17
*------------------------------------------------------------*
20050  %let EMEXCEPTIONSTRING=;
20051  *------------------------------------------------------------*;
20052  * REPORT: VarClus;
20053  *------------------------------------------------------------*;
20054  %let EM_ACTION = REPORT;
20055  %let syscc = 0;
20056  
20057  %macro main;
20058  
20059     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20060     %include temp;
20061     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20062     %include temp;
20063     filename temp;
20064  
20065    %SetProperties;
20066  
20067     %if %upcase(&EM_ACTION) = CREATE %then %do;
20068         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20069         %include temp;
20070         filename temp;
20071         %create;
20072     %end;
20073     %else
20074     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20075          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20076             %include temp;
20077             filename temp;
20078             %train;
20079     %end;
20080     %else
20081     %if %upcase(&EM_ACTION) = SCORE %then %do;
20082             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20083             %include temp;
20084             filename temp;
20085             %score;
20086     %end;
20087     %else
20088     %if %upcase(&EM_ACTION) = REPORT %then %do;
20089             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20090             %include temp;
20091             filename temp;
20092             %report;
20093     %end;
20094     /*
20095     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20096         %put 'OPENING TABLE';
20097     %end;
20098     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20099         %put 'CLOSE TABLE';
20100     %end;
20101     */
20102  %mend main;
20103  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20104 +
20105 +/* Initialize property macro variables */
20106 +%macro SetProperties;
20107 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20108 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20109 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20110 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20111 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20112 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20113 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20114 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20115 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20116 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20117 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20118 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20119 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20120 +
20121 +%mend SetProperties;
20122 +
20123 +%Macro MakeDummyVariables(indata=,
20124 +                          outvar=,
20125 +                          outdata=,
20126 +                          fileref=,
20127 +                          recreatecmeta=N, /* optional */
20128 +                          incmeta=,     /* optional */
20129 +                          outcmeta=,    /* optional */
20130 +                          ndummyvars=_ndummyvars
20131 +                          );
20132 +    %global &ndummyvars;
20133 +
20134 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20135 +       class
20136 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20137 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20138 +    ;
20139 +    run;
20140 +    %let &ndummyvars = 0;
20141 +    data _null_;
20142 +    %let dsid = %sysfunc(open(work._classout));
20143 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20144 +    %let dsid = %sysfunc(close(&dsid));
20145 +    run;
20146 +
20147 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20148 +       input
20149 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20150 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20151 +        / level=nominal stdize=no;
20152 +       make outvar = &outvar;
20153 +       score data = &indata out =&outdata;
20154 +       code  file=  "&fileref";
20155 +    run;
20156 +    %if &recreatecmeta eq Y %then %do;
20157 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20158 +    data _tmpds;
20159 +        set _tmpds;
20160 +           ROLE = 'INPUT';
20161 +           LEVEL = 'INTERVAL';
20162 +           CREATOR='DMZIP';
20163 +           if NAME = '_TYPE_' then delete;
20164 +    run;
20165 +    data &outcmeta;
20166 +         set &incmeta _tmpds;
20167 +    run;
20168 +    %end;
20169 +    proc datasets lib=work nolist;
20170 +      delete  _dmdbdat _dmdbcat _classout
20171 +    %if &recreatecmeta eq Y %then %do;
20172 +    _tmpds
20173 +    %end;
20174 +    ;
20175 +    quit;
20176 +%Mend MakeDummyVariables;
20177 +
20178 +/*--- Determine Optimal Number of Cluster ----
20179 +%macro FindClusNum(statds=, groupds=, minvariation=);
20180 +   %global optnclus;
20181 +   data varclus_tmp(drop=_NAME_);
20182 +      set &statDs;
20183 +      where _type_ ='PROPOR';
20184 +   run;
20185 +   proc sort data=varclus_tmp;
20186 +      by _NCL_;
20187 +   run;
20188 +   proc transpose data=varclus_tmp out=varclus_tmp;
20189 +      by _NCL_;
20190 +      var %EM_INTERVAL_INPUT
20191 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20192 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20193 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20194 +          %do i = 2 %to &nvar;
20195 +          %let varname = %sysfunc(varname(&dsid, &i));
20196 +          &varname
20197 +          %end;
20198 +      %end;
20199 +   ;
20200 +   run;
20201 +
20202 +   %if &minVariation eq %then %do;
20203 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20204 +   %end;
20205 +   %if ^(0<&minVariation<100) %then %do;
20206 +       %let minVariation = 90;
20207 +   %end;
20208 +
20209 +   data _null_;
20210 +      set varclus_tmp end=eof;
20211 +      by _NCL_;
20212 +      retain flag 0;
20213 +      if first._ncl_ then flag=0;
20214 +      if .<col1 < &minVariation then flag=1;
20215 +      if last._ncl_ and ^flag then do;
20216 +         call symput('OPTNCL', _ncl_);
20217 +         stop;
20218 +      end;
20219 +     if eof then call symput('OPTNCL', _ncl_);
20220 +   run;
20221 +
20222 +   %let optnclus = &OPTNCL;
20223 +
20224 +   data varclus_tmp(drop=_NCL_ _NAME_);
20225 +      set &statDs;
20226 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20227 +   run;
20228 +   proc sort data=varclus_tmp;
20229 +      by _TYPE_;
20230 +   run;
20231 +   proc transpose data=varclus_tmp out=varclus_tmp;
20232 +      by _TYPE_;
20233 +   run;
20234 +   proc sort data=varclus_tmp;
20235 +      by _name_ _type_;
20236 +   run;
20237 +
20238 +  proc transpose data=varclus_tmp out=&groupds;
20239 +      by _NAME_;
20240 +   run;
20241 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20242 +      by Cluster descending Rsquare;
20243 +      where Cluster ne 0;
20244 +   run;
20245 +   proc datasets lib=work nolist mt=(DATA VIEW);
20246 +      delete varclus_tmp;
20247 +   run;
20248 +   quit;
20249 +%mend findClusNum;
20250 +*/
20251 +
20252 +%macro getNclusfromTrain(inoutstat=, nc=);
20253 +%global &nc;
20254 +data _null_;
20255 +    set &inoutstat end=eof;
20256 +    if eof then do;
20257 +    call symput("&nc", _ncl_);
20258 +    end;
20259 +run;
20260 +%mend  getNclusfromTrain;
20261 +
20262 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20263 +
20264 +     *--- Build Code to Modify Metadata ---*;
20265 +     filename X "&deltacodefile";
20266 +     data _null_;
20267 +        FILE X;
20268 +        set &groupds end=eof;
20269 +        /*by Cluster;*/
20270 +         if _N_=1 then do;
20271 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20272 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20273 +           %end;
20274 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20275 +           put "if upcase(strip(NAME)) in (";
20276 +        end;
20277 +        if Strip(upcase(Selected)) eq 'YES' then do;
20278 +           string = '"'!!trim(left(VARIABLE))!!'"';
20279 +           put string;
20280 +        end;
20281 +        if eof then do;
20282 +           put ') then ROLE="INPUT";';
20283 +           put 'else ROLE="REJECTED";';
20284 +           put 'end;';
20285 +
20286 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20287 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20288 +           %end;
20289 +        end;
20290 +     run;
20291 +     quit;
20292 +
20293 +     filename X;
20294 +
20295 +     quit;
20296 +%mend MakeDeltaCode;
20297 +
20298 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20299 +    %if ^%sysfunc(exist(&statds)) %then %do;
20300 +         %goto doendc;
20301 +    %end;
20302 +
20303 +    data &corrds(drop=_TYPE_ _NCL_) ;
20304 +       set &statds;
20305 +       where _type_ eq 'CORR' ;
20306 +    run ;
20307 +    proc sort data=&corrds;
20308 +       by _NAME_ ;
20309 +    run ;
20310 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20311 +      BY _NAME_ ;
20312 +    run ;
20313 +    data &corrplotds;
20314 +       length _Y_ $100;
20315 +       set &corrplotDs;
20316 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20317 +    run ;
20318 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20319 +       set &corrplotds;
20320 +       where _LABEL_ ne '' ;
20321 +       keep _TMP_ _LABEL_ ;
20322 +    run ;
20323 +    data _null_;
20324 +       nobs=0;
20325 +       dsid = open('varclus_match');
20326 +       if dsid then do;
20327 +          nobs = attrn(dsid, 'NOBS');
20328 +          dsid = close(dsid);
20329 +       end;
20330 +       call symput ('CORR_NOBS', nobs);
20331 +    run;
20332 +    %if &corr_nobs %then %do;
20333 +        proc sort data=varclus_match;
20334 +           by _name_;
20335 +        run ;
20336 +        proc sort data=&corrplotds;
20337 +           by _name_;
20338 +        run ;
20339 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20340 +           merge varclus_match &corrplotds;
20341 +           by _NAME_ ;
20342 +           if _X_ eq '' then _X_=_NAME_ ;
20343 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20344 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20345 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20346 +
20347 +       run ;
20348 +    %end;
20349 +    %else %do;
20350 +        proc sort data=&corrplotds;
20351 +           by _name_;
20352 +        run ;
20353 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20354 +           set &corrplotds;
20355 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20356 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20357 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20358 +
20359 +        run ;
20360 +    %end;
20361 +    proc sort data=&corrplotds;
20362 +       by _X_ _Y_;
20363 +    run ;
20364 +    proc datasets lib=work nolist mt=(DATA VIEW);
20365 +       delete varclus_match;
20366 +    run;
20367 +    quit;
20368 +
20369 +%doendc:
20370 +
20371 +%mend MakeVarClusCorrData;
20372 +
20373 +%macro MakeStatPlotData(statds= , outstatplotds=);
20374 +   %if %sysfunc(exist(&statds)) %then %do;
20375 +
20376 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20377 +          set &statDs;
20378 +          where _type_ in('MEAN', 'STD', 'N');
20379 +       run ;
20380 +       proc transpose data=varclus_tmp out=&outstatplotds;
20381 +          id _TYPE_ ;
20382 +       run ;
20383 +       data &outstatplotds;
20384 +          set &outstatplotds(obs=1000);
20385 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20386 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20387 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20388 +          else SCALEDSTD= STD ;
20389 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20390 +       run ;
20391 +       proc sort data=&outstatplotds;
20392 +          by descending SCALEDSTD ;
20393 +       run ;
20394 +       proc datasets lib=work nolist mt=(DATA VIEW);
20395 +          delete varclus_tmp;
20396 +       run;
20397 +       quit;
20398 +    %end;
20399 +
20400 +%mend MakeStatPlotData;
20401 +
20402 +
20403 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20404 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20405 +    data &EM_USER_OUTSTATSCORE;
20406 +          set &indata;
20407 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20408 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20409 +          if _TYPE_ = 'STD' then _NAME_='STD';
20410 +          DROP _TYPE_ _NCL_;
20411 +     run;
20412 +
20413 +     filename _file_  "&fileRef";
20414 +
20415 +     data _null_;
20416 +        FILE _file_ MOD;
20417 +        put ' ';
20418 +        put '/*-------------------------------------------------*/';
20419 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20420 +        put '/*-------------------------------------------------*/';
20421 +        put ' ';
20422 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20423 +
20424 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20425 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20426 +
20427 +        %let k = 1;
20428 +        %do %while(^%sysfunc(fetch(&dsid)));
20429 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20430 +                %if &k > 2 %then %do;
20431 +                 %let cn = %eval(&k-2);
20432 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
20433 +                %end;
20434 +                %let k = %eval(&k+1);
20435 +        %end;
20436 +
20437 +        %let rc = %sysfunc(rewind(&dsid));
20438 +
20439 +        %do i= 2 %to &nvar;
20440 +            %let _varname =  %sysfunc(varname(&dsid, &i));
20441 +            %do %while(^%sysfunc(fetch(&dsid)));
20442 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20443 +                %if &_name = MEAN %then
20444 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20445 +                %else %if &_name = STD %then
20446 +                %let _std = %sysfunc(getvarn(&dsid, &i));
20447 +                %else %do;
20448 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20449 +                      %let abscoeff = %sysfunc(abs(&coeff));
20450 +                          %if &abscoeff >  0 %then %do;
20451 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20452 +                           %end;
20453 +                 %end;
20454 +             %end;
20455 +             %let rc = %sysfunc(rewind(&dsid));
20456 +         %end;
20457 +
20458 +        %let dsid= %sysfunc(close(&dsid));
20459 +       run;
20460 +%mend CreateScoreCode;
20461 +
20462 +
20463 +
20464 +/*----------------------------------------------------------
20465 +    Instead of using %MakeRSquareData,
20466 +    %MakeVarClusResultTable at macro2.source is used
20467 + +----------------------------------------------------------*/
20468 +
20469 +
20470 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
20471 +
20472 +/* modifying  from ods rsquare = data */
20473 +
20474 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
20475 +    Length Cluster $16;
20476 +    length Variable $32;
20477 +    Length VariableLabel $64;
20478 +    set &indata; retain CurrentCluster;
20479 +    if NumberOfClusters ^= &ncluster then delete;
20480 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
20481 +    CurrentCluster = Cluster;
20482 +   run;
20483 +proc sort data =&outdata ;
20484 +     by Cluster RsquareRatio;
20485 +run;
20486 +data _tmprsq(drop=index);
20487 +     set &outdata; by Cluster;
20488 +     if first.Cluster then do;
20489 +     index = strip(scan(Cluster,2 ));
20490 +     Variable = "Clus"||index;
20491 +     VariableLabel = "Cluster Component "||index;
20492 +     OwnCluster = 1;
20493 +     NextClosest = .;
20494 +     RsquareRatio = 0;
20495 +     output;
20496 +     end;
20497 +run;
20498 +
20499 +proc sort data = _tmprsq ;
20500 +     by Cluster RsquareRatio;
20501 +run;
20502 +data &outdata;
20503 +     set &outdata _tmprsq;
20504 +by Cluster;
20505 +run;
20506 +
20507 +
20508 +/* Just create the Selected variable with all YES */
20509 +
20510 +data &outdata;
20511 +    set &outdata; by cluster;
20512 +    length Selected $8;
20513 +    Selected = 'YES';
20514 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20515 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20516 +    rename OwnCluster = RSqWithClusterComp;
20517 +    rename NextClosest = RSqWithNextClusComp;
20518 +run;
20519 +
20520 +
20521 +/* Selected = Y/N will be done %score section -----
20522 +
20523 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
20524 +data &outdata;
20525 +    set &outdata; by cluster;
20526 +    length Selected $8;
20527 +    if first.Cluster then Selected = 'YES';
20528 +    else Selected = 'NO';
20529 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20530 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20531 +    rename OwnCluster = RSqWithClusterComp;
20532 +    rename NextClosest = RSqWithNextClusComp;
20533 +run;
20534 +%end;
20535 +%else %do;
20536 +data &outdata;
20537 +    set &outdata; by cluster;
20538 +    if last.Cluster then Selected = 'YES';
20539 +    else Selected = 'NO';
20540 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20541 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20542 +    rename OwnCluster = RSqWithClusterComp;
20543 +    rename NextClosest = RSqWithNextClusComp;
20544 +run;
20545 +%end;
20546 +---------------------------------------------------------------*/
20547 +
20548 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
20549 +/* to calculate NextClosestClusRsq */
20550 +proc transpose data = &inClusRSquare  out=_clusRsq;
20551 +      by cluster;
20552 +      run;
20553 +data _clusRsq;
20554 +     set _clusRsq;
20555 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
20556 +run;
20557 +
20558 +proc sort data=_clusRsq;
20559 +    by cluster col1;
20560 +    run;
20561 +data _clusRsq(drop=_NAME_ _LABEL_);
20562 +     set _clusRsq; by cluster;
20563 +     if last.Cluster then output;
20564 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
20565 +     rename COL1 = RSqWithNextClusComp;
20566 +     rename Cluster = Variable;
20567 +     label  Cluster = "Variable";
20568 +run;
20569 +
20570 +proc sort data =&outdata;
20571 +     by Variable;
20572 +run;
20573 +data &outdata;
20574 +    merge &outdata _clusRsq;
20575 +    by Variable;
20576 +run;
20577 +proc sort data =&outdata;
20578 +by Cluster  RsquareRatio;
20579 +run;
20580 +quit;
20581 +%end;
20582 +
20583 +proc datasets lib = work nolist;
20584 +     delete _tmprsq _clusRsq;
20585 +     run;
20586 +quit;
20587 +
20588 +%mend MakeRSquareData;
20589 +
20590 +
20591 +/*-------------------------------------------------------------------------*/
20592 +
20593 +
20594 +
20595 +%macro ModifyCorr(indata=,
20596 +                  outdata=,
20597 +                  rsquare = Y
20598 +                  );
20599 +    data corr_tmp;
20600 +        set &indata;
20601 +    run;
20602 +     proc sql;
20603 +           update &indata
20604 +           set
20605 +     %let dsid = %sysfunc(open(work.corr_tmp));
20606 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
20607 +          %do i = 4 %to &nvar;
20608 +          %let _name = %sysfunc(varname(&dsid, &i));
20609 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
20610 +            %else  %let _name_md = &_name;
20611 +            %if &i < &nvar %then %do;
20612 +               &_name = 1- &_name_md ,
20613 +            %end;
20614 +            %else %do;
20615 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
20616 +            %end;
20617 +          %end;
20618 +      %let dsid= %sysfunc(close(&dsid));
20619 +
20620 +      select * from &indata;
20621 +      run;
20622 +      proc datasets lib = work nolist;
20623 +           delete corr_tmp;
20624 +      run;
20625 +      quit;
20626 +
20627 + %mend ModifyCorr;
20628 +
20629 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
20630 +    data &outdata(drop= _NCL_  _TYPE_);
20631 +       set &indata;
20632 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
20633 +       rename _NAME_ = Cluster;
20634 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20635 +    run;
20636 +    %if &RSquare eq Y %then %do;
20637 +     data corr_tmp;
20638 +        set &outdata;
20639 +     run;
20640 +
20641 +     data &outdata(drop=i);
20642 +          set &outdata;
20643 +          %let dsid = %sysfunc(open(work.corr_tmp));
20644 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20645 +          %do i = 2 %to &nvar;
20646 +            %let _name = %sysfunc(varname(&dsid, &i));
20647 +            %let _name_md = &_name.**2;
20648 +                &_name = &_name_md;
20649 +          %end;
20650 +      %let dsid= %sysfunc(close(&dsid));
20651 +      run;
20652 +      proc datasets lib = work nolist;
20653 +           delete corr_tmp;
20654 +      run;
20655 +
20656 +    %end;
20657 +     quit;
20658 +%mend MakeClusStructCorrData;
20659 +
20660 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
20661 +    data &outdata(drop= _NCL_  _TYPE_);
20662 +       set &indata;
20663 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20664 +       rename _NAME_ = Cluster;
20665 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20666 +    run;
20667 +    data corr_tmp;
20668 +        set &outdata;
20669 +    run;
20670 +
20671 +    %let dsid = %sysfunc(open(work.corr_tmp));
20672 +    %let nclus2= %eval(&ncluster+1);
20673 +    data &outdata;
20674 +         set &outdata;
20675 +          %do i = 2 %to &nclus2;
20676 +          %let i_1 = %eval(&i-1);
20677 +            %let _name = %sysfunc(varname(&dsid, &i));
20678 +            %let _newName = Clus&i_1;
20679 +                rename &_name = &_newName; ;
20680 +                *label &_name ="Cluster &i_1";
20681 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20682 +          %end;
20683 +          keep Cluster
20684 +          %do i = 2 %to &nclus2;
20685 +                %let _name = %sysfunc(varname(&dsid, &i));
20686 +                &_name
20687 +          %end;
20688 +          ;
20689 +    %let dsid= %sysfunc(close(&dsid));
20690 +     run;
20691 +     quit;
20692 +
20693 +    %if &RSquare eq Y %then %do;
20694 +
20695 +       data corr_tmp;
20696 +        set &outdata;
20697 +     run;
20698 +
20699 +     data &outdata(drop=i);
20700 +          set &outdata;
20701 +          %let dsid = %sysfunc(open(work.corr_tmp));
20702 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20703 +          %do i = 2 %to &nvar;
20704 +            %let _name = %sysfunc(varname(&dsid, &i));
20705 +            %let _name_md = &_name.**2;
20706 +                &_name = &_name_md;
20707 +          %end;
20708 +      %let dsid= %sysfunc(close(&dsid));
20709 +      run;
20710 +    %end;
20711 +
20712 +    %if &makeplotds eq Y %then %do;
20713 +     proc transpose data = &outdata
20714 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20715 +          by cluster;
20716 +     run;
20717 +     data &plotds;
20718 +          set  &plotds;
20719 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20720 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20721 +     run;
20722 +     %end;
20723 +     proc datasets lib = work nolist;
20724 +           delete corr_tmp;
20725 +     run;
20726 +     quit;
20727 +%mend MakeInterClusCorrData;
20728 +
20729 +
20730 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20731 +
20732 +data &outlink(drop = Selected);
20733 +     set &indata;
20734 +     LINKID = _N_;
20735 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20736 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20737 +run;
20738 +data &outnode(keep=NODEID TYPE LABEL);
20739 +    set &indata;
20740 +    length TYPE $16;
20741 +    rename Variable = NODEID;
20742 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20743 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20744 +    then  TYPE = "CLUSTER";
20745 +    else  TYPE="VARIABLE";
20746 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20747 +run;
20748 +quit;
20749 +%mend MakeClusConstellData;
20750 +
20751 +
20752 +
20753 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20754 +
20755 +data &outlink(drop = Selected);
20756 +     set &indata;
20757 +     LINKID = _N_;
20758 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20759 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20760 +run;
20761 +data &outnode(keep=NODEID TYPE LABEL);
20762 +    set &indata;
20763 +    length TYPE $16;
20764 +    rename Variable = NODEID;
20765 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20766 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20767 +    then  TYPE = "CLUSTER";
20768 +    else  TYPE="VARIABLE";
20769 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20770 +run;
20771 +quit;
20772 +%mend MakeClusConstellData;
20773 +
20774 +
20775 +/*--- This will work only when inds is not a view data -------
20776 +
20777 +%macro getNVarNObs(inds=, nvar=, nobs=);
20778 +
20779 +    %global &nvar;
20780 +    %global &nobs;
20781 +    data _null_;
20782 +         dsid = open("&inds");
20783 +         nv = attrn(dsid, 'NVAR');
20784 +         no = attrn(dsid, 'NOBS');
20785 +         dsid = close(dsid);
20786 +         call symput("&nvar", nv);
20787 +         call symput("&nobs", no);
20788 +    run;
20789 +    quit;
20790 +%mend  getNVarNObs;
20791 +
20792 ++---------------------------------------------------------------*/
20793 +
20794 +
20795 +%macro getNVar(inds=, nvar=);
20796 +    %global &nvar;
20797 +    data _null_;
20798 +         dsid = open("&inds");
20799 +         nv = attrn(dsid, 'NVAR');
20800 +         dsid = close(dsid);
20801 +         call symput("&nvar", nv);
20802 +    run;
20803 +    quit;
20804 +%mend  getNVar;
20805 +
20806 +
20807 +
20808 +%macro getNObs(inds=, nobs=);
20809 +    %global &nobs;
20810 +    data _null_;
20811 +        set &inds end=eof;
20812 +        if eof then call symput("&nobs", _N_);
20813 +    run;
20814 +    quit;
20815 +%mend  getNObs;
20816 +
20817 +%Macro CreateVarclusMeta(trainnum=);
20818 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
20819 +    data &EM_USER_VARCLUSMETA;
20820 +         length TrainNum 8.;
20821 +         length NewTrain $8;
20822 +         length NGCluster 8.;
20823 +         length ExportedComp $16;
20824 +         length HideVariable $8;
20825 +         TrainNum = &trainnum;
20826 +         NewTrain = "Y";
20827 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
20828 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
20829 +         NGCluster = 0; /* zero means no twostage */
20830 +   run;
20831 +   quit;
20832 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
20833 +
20834 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
20835 +    data &outdata(drop= _NCL_  _TYPE_);
20836 +       set &indata;
20837 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20838 +       %if &globalclusid ne %then %do;
20839 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
20840 +       rename _NAME_ = Cluster;
20841 +       %end;
20842 +       %else %do;
20843 +        _NAME_ = upcase(_NAME_);
20844 +       rename _NAME_ = Cluster;
20845 +       %end;
20846 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20847 +    run;
20848 +    data corr_tmp;
20849 +        set &outdata;
20850 +    run;
20851 +
20852 +    %let dsid = %sysfunc(open(work.corr_tmp));
20853 +    %let nclus2= %eval(&ncluster+1);
20854 +    data &outdata;
20855 +         set &outdata;
20856 +          %do i = 2 %to &nclus2;
20857 +          %let i_1 = %eval(&i-1);
20858 +            %let _name = %sysfunc(varname(&dsid, &i));
20859 +            %if &globalclusid ne %then
20860 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
20861 +                     rename &_name = &_newName;
20862 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
20863 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
20864 +                %end;
20865 +            %else
20866 +                %do; %let _newName = CLUS&i_1;
20867 +                     rename &_name = &_newName;
20868 +                     *label &_name ="Cluster &i_1";
20869 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20870 +                %end;
20871 +          %end;
20872 +          keep Cluster
20873 +          %do i = 2 %to &nclus2;
20874 +                %let _name = %sysfunc(varname(&dsid, &i));
20875 +                &_name
20876 +          %end;
20877 +          ;
20878 +    %let dsid= %sysfunc(close(&dsid));
20879 +     run;
20880 +     quit;
20881 +
20882 +    %if &RSquare eq Y %then %do;
20883 +
20884 +       data corr_tmp;
20885 +        set &outdata;
20886 +     run;
20887 +
20888 +     data &outdata;
20889 +          set &outdata;
20890 +          %let dsid = %sysfunc(open(work.corr_tmp));
20891 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20892 +          %do i = 2 %to &nvar;
20893 +            %let _name = %sysfunc(varname(&dsid, &i));
20894 +            %let _name_md = &_name.**2;
20895 +                &_name = &_name_md;
20896 +          %end;
20897 +      %let dsid= %sysfunc(close(&dsid));
20898 +      run;
20899 +    %end;
20900 +
20901 +    %if &makeplotds eq Y %then %do;
20902 +     proc transpose data = &outdata
20903 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20904 +          by cluster;
20905 +     run;
20906 +     data &plotds;
20907 +          set  &plotds;
20908 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20909 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20910 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20911 +     run;
20912 +     %end;
20913 +     proc datasets lib = work nolist;
20914 +           delete corr_tmp;
20915 +     run;
20916 +     quit;
20917 +%mend MakeInterClusCorrData;
20918 +
20919 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
20920 +    data _tmpds(drop= _NCL_);
20921 +       set &indata;
20922 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
20923 +       %if &globalclusid ne %then %do;
20924 +           _NAME_ = "GC&globalclusid.";
20925 +       rename _NAME_ = Cluster;
20926 +       %end;
20927 +       %else %do;
20928 +        _NAME_ = "CLUS";
20929 +        rename _NAME_ = Cluster;
20930 +       %end;
20931 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20932 +    run;
20933 +    proc transpose data =_tmpds out =&outdata;
20934 +    run;
20935 +
20936 +    data &outdata(drop=COL1);
20937 +        %if &globalclusid ne %then %do;
20938 +        length GCluster $16;
20939 +        %end;
20940 +        length Cluster $32;
20941 +        length _NAME_ $32;
20942 +         set &outdata;
20943 +         _NAME_ = upcase(_NAME_);
20944 +         rename _NAME_=Variable;
20945 +         *label _NAME_="Variable";
20946 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20947 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
20948 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20949 +
20950 +         %if &globalclusid ne %then %do;
20951 +          GCluster = "GC&globalclusid";
20952 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
20953 +         %end;
20954 +         %else %do;
20955 +         Cluster = "CLUS"||strip(COL1);
20956 +        %end;
20957 +         rename COL2 = RSqWithOwnClusComp;
20958 +         *label COL2 = "R-Square With Own Cluster Component";
20959 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
20960 +
20961 +   run;
20962 +   proc sort data =&outdata;
20963 +        by Cluster RSqWithOwnClusComp;
20964 +   run;
20965 +   proc datasets lib = work nolist;
20966 +           delete _tmpds;
20967 +   run;
20968 +   quit;
20969 +%mend MakeOwnRSquare;
20970 +
20971 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
20972 +    data &outdata(drop= _NCL_  _TYPE_);
20973 +       %if &globalclusid ne %then %do;
20974 +        length GCluster $16;
20975 +        %end;
20976 +       set &indata;
20977 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
20978 +       %if &globalclusid ne %then %do;
20979 +         GCluster = "GC&globalclusid";
20980 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
20981 +         rename _NAME_ = Cluster;
20982 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
20983 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20984 +
20985 +       %end;
20986 +       %else %do;
20987 +         _NAME_ = upcase(_NAME_);
20988 +         rename _NAME_ = Cluster;
20989 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
20990 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20991 +
20992 +       %end;
20993 +     run;
20994 +    %if &RSquare eq Y %then %do;
20995 +     data corr_tmp;
20996 +          set &outdata;
20997 +     run;
20998 +     %let istart = 2;
20999 +     %if &globalclusid ne %then %let istart = 3;
21000 +     data &outdata;
21001 +          set &outdata;
21002 +          %let dsid = %sysfunc(open(work.corr_tmp));
21003 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21004 +          %do i =&istart %to &nvar;
21005 +            %let _name = %sysfunc(varname(&dsid, &i));
21006 +            %let _name_md = &_name.**2;
21007 +                &_name = &_name_md;
21008 +          %end;
21009 +      %let dsid= %sysfunc(close(&dsid));
21010 +      run;
21011 +      proc datasets lib = work nolist;
21012 +           delete corr_tmp;
21013 +      run;
21014 +    %end;
21015 +     quit;
21016 +%mend MakeClusStructCorrData;
21017 +
21018 +/*
21019 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21020 +*/
21021 +
21022 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21023 +
21024 +     /* The indata should be the outdata
21025 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21026 +
21027 +     proc sort data =&indata out=_tmpclusRsq;
21028 +     by cluster;
21029 +     run;
21030 +
21031 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21032 +      by cluster;
21033 +     run;
21034 +
21035 +     proc sort data=_tmpclusRsq;
21036 +        by _NAME_ COL1;
21037 +     run;
21038 +
21039 +     data _tmpclusRsq;
21040 +         length _NAME_ $32;
21041 +         set _tmpclusRsq; by _NAME_;
21042 +          _NAME_ = upcase(_NAME_);
21043 +          %if &ncluster ne 1 %then %do;
21044 +             if last._NAME_ then delete;
21045 +          %end;
21046 +          %else %do;
21047 +             COL1 = 0;
21048 +          %end;
21049 +     run;
21050 +     /* need to sort again */
21051 +     proc sort data=_tmpclusRsq;
21052 +        by _NAME_ COL1;
21053 +     run;
21054 +
21055 +     data &outdata;
21056 +         set _tmpclusRsq; by _NAME_;
21057 +         Cluster = upcase(Cluster);
21058 +         if last._NAME_ then output;
21059 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21060 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21061 +         rename COL1 = RSqWithNextClusComp;
21062 +         Cluster = upcase(Cluster);
21063 +         rename Cluster = ClosestCluster;
21064 +         *label  Cluster = "Next Closest Cluster";
21065 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21066 +         rename _NAME_ = Variable;
21067 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21068 +    run;
21069 +
21070 +
21071 +    %if &globalclusid ne %then %do;
21072 +    data &outdata;
21073 +       length GCluster $16;
21074 +       set &outdata;
21075 +       GCluster = "GC&globalclusid";
21076 +       run;
21077 +    %end;
21078 +    proc datasets lib = work nolist;
21079 +           delete _tmpclusRsq;
21080 +    run;
21081 +    quit;
21082 +%mend FindNextClosestClusByVar;
21083 +
21084 +
21085 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21086 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21087 +     proc sort data =&indata out=_tmpclusRsq;
21088 +     by cluster;
21089 +     run;
21090 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21091 +     by cluster;
21092 +     run;
21093 +     proc sort data=_tmpclusRsq;
21094 +        by _NAME_ col1;
21095 +     run;
21096 +     data _tmpclusRsq;
21097 +         length _NAME_ $32;
21098 +         set _tmpclusRsq; by _NAME_;
21099 +          _NAME_ = upcase(_NAME_);
21100 +          %if &ncluster ne 1 %then %do;
21101 +             if last._NAME_ then delete;
21102 +          %end;
21103 +          %else %do;
21104 +             COL1 = 0;
21105 +          %end;
21106 +     run;
21107 +     data &outdata;
21108 +         set _tmpclusRsq; by _NAME_;
21109 +         Cluster = upcase(Cluster);
21110 +         if last._NAME_ then output;
21111 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21112 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21113 +         rename COL1 = RSqWithNextClusComp;
21114 +         Cluster = upcase(Cluster);
21115 +         rename Cluster = ClosestCluster;
21116 +         *label  Cluster = "Next Closest Cluster";
21117 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21118 +         rename _NAME_ = Variable;
21119 +         *label  _NAME_ = "Variable";
21120 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21121 +
21122 +    run;
21123 +    %if &globalclusid ne %then %do;
21124 +    data &outdata;
21125 +       length GCluster $16;
21126 +       set &outdata;
21127 +       GCluster = "GC&globalclusid";
21128 +       run;
21129 +    %end;
21130 +
21131 +    proc datasets lib = work nolist;
21132 +           delete _tmpclusRsq;
21133 +    run;
21134 +
21135 +    quit;
21136 +%mend FindNextClosestClusByCluster;
21137 +
21138 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21139 +/*----
21140 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21141 +-----------*/
21142 +
21143 +proc sort data =&indata1;
21144 +    by Variable;
21145 +run;
21146 +proc sort data =&indata2;
21147 +    by Variable;
21148 +run;
21149 +data &outdata;
21150 +    merge &indata1 &indata2;
21151 +    by Variable;
21152 +    length Type $16;
21153 +    Type = 'Variable';
21154 +    *label Type ='Type';
21155 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21156 +run;
21157 +
21158 +
21159 +data &indata3;
21160 +    set  &indata3 ;
21161 +    length RSqWithOwnClusComp 8.;
21162 +    Cluster = Variable;
21163 +    RSqWithOwnClusComp = 1;
21164 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21165 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21166 +    length Type $16;
21167 +    Type = 'ClusterComp';
21168 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21169 +
21170 +;
21171 +run;
21172 +
21173 +proc sort data=&outdata;
21174 +    by Cluster;
21175 +run;
21176 +proc sort data =&indata3;
21177 +    by Cluster;
21178 +run;
21179 +
21180 +data &outdata;
21181 +     set &outdata &indata3;
21182 +     by Cluster;
21183 +run;
21184 +
21185 +
21186 +/* Create the Selected variable with all YES */
21187 +
21188 +data &outdata;
21189 +     set &outdata;
21190 +     length RsqRatio 8.;
21191 +     length Selected $8;
21192 +     *label RSqRatio = "1-R**2 Ratio";
21193 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21194 +     *label Selected = "Variable Selected";
21195 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21196 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21197 +     Selected ='YES';
21198 +     rename _LABEL_ = Label;
21199 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21200 +run;
21201 +
21202 +
21203 +/*----  Selected = Y/N will be assigened at the %score                   -------+
21204 +        Just create the Selected variable with all YES at the step above
21205 + +------------------------------------------------------------------------------+
21206 +
21207 +proc sort data=&outdata;
21208 +    by Cluster RsqRatio;
21209 +run;
21210 +
21211 +%if &selectedcomp eq CLUSTERCOMP %then %do;
21212 +data &outdata;
21213 +     set &outdata; by Cluster;
21214 +     length Selected $8;
21215 +     label Selected = "Variable Selected";
21216 +     if  first.Cluster then Selected ='Yes';
21217 +     else Selected = 'No';
21218 +    run;
21219 +%end;
21220 +%else %do;
21221 +data &outdata(drop = _var _varchange);
21222 +     set &outdata; retain _var 0; by Cluster;
21223 +     length Selected $8;
21224 +     label Selected = "Variable Selected";
21225 +     if first.Cluster then  _varchange = 0;
21226 +     else _varchange =1;
21227 +     if _var ne _varchange then  Selected  = 'Yes';
21228 +     else Selected = 'No';
21229 +     if last.cluster then  _var = 0;
21230 +     else _var = _varchange;
21231 +run;
21232 +%end;
21233 +
21234 +--------------------------------------------------------------*/
21235 +
21236 +quit;
21237 +%mend MakeVarClusResultTable;
21238 +
21239 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21240 +     proc sort data =&indata;
21241 +        by cluster;
21242 +     run;
21243 +     proc transpose data =&indata
21244 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21245 +          by cluster;
21246 +     run;
21247 +     data &outdata;
21248 +          set  &outdata;
21249 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21250 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21251 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21252 +     run;
21253 +     %if &globalclusid ne %then %do;
21254 +     data &outdata;
21255 +          Length GCluster $16;
21256 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21257 +          set  &outdata;
21258 +          GCluster ="GC&globalclusid.";
21259 +          run;
21260 +     %end;
21261 +
21262 +%Mend MakePlotDataFromCorrTable;
21263 +
21264 +
21265 +%macro MakeCorrelation(indata=,
21266 +                       outstat=_tmpoutstat,
21267 +                       corrmatrix=N,
21268 +                       outcorr=_tmpoutcorr,
21269 +                       includeclassvar=N,
21270 +                       target=,
21271 +                       freq=,
21272 +                       weight=);
21273 +   %if &target eq  %then %do;
21274 +
21275 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21276 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21277 +       %if &includeclassvar eq Y %then %do;
21278 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21279 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21280 +          %do i = 2 %to &nvar;
21281 +          %let varname = %sysfunc(varname(&dsid, &i));
21282 +          &varname
21283 +          %end;
21284 +       %end;
21285 +       ;
21286 +      %if &freq ne  %then %do;
21287 +          freq &freq;
21288 +      %end;
21289 +      %if &weight ne  %then %do;
21290 +          weight &weight;
21291 +      %end;
21292 +
21293 +      run;
21294 +      %if &corrmatrix eq Y %then %do;
21295 +      data  &outcorr (drop = _NCL_ _TYPE_);
21296 +           set  &outstat ;
21297 +           if _TYPE_ ='CORR' then output;
21298 +      run;
21299 +      %end;
21300 +    %end;
21301 +    %else %do;
21302 +       proc corr data=&indata outp=&outstat noprint;
21303 +            var
21304 +       %let dsid = %sysfunc(open(&indata));
21305 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21306 +          %do i = 1 %to &nvar;
21307 +              %let _name = %sysfunc(varname(&dsid, &i));
21308 +              %if &_name ne &target %then;
21309 +              &_name
21310 +           %end;
21311 +        %let dsid= %sysfunc(close(&dsid));
21312 +        ;
21313 +        with &target;
21314 +        run;
21315 +    %end;
21316 +    quit;
21317 +%mend MakeCorrelation;
21318 +
21319 +
21320 +%macro MakeCorrelationDistance(indata=,
21321 +                               outdata=,
21322 +                               rsquare = N
21323 +                               );
21324 +    data corr_tmp;
21325 +        set &indata;
21326 +        if _N_ = 1 then do;
21327 +           output;
21328 +           stop;
21329 +         end;
21330 +    run;
21331 +    %if &outdata ne  %then %let  _outdata = &outdata;
21332 +    %else %let _outdata = &indata;
21333 +
21334 +    data &_outdata;
21335 +         set &indata;
21336 +
21337 +         %let dsid = %sysfunc(open(work.corr_tmp));
21338 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21339 +          %do i = 2 %to &nvar;
21340 +              %let _name = %sysfunc(varname(&dsid, &i));
21341 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21342 +              %else  %let _name_md = &_name;
21343 +              &_name = 1- &_name_md;
21344 +          %end;
21345 +      %let dsid= %sysfunc(close(&dsid));
21346 +      run;
21347 +      proc datasets lib = work nolist;
21348 +           delete corr_tmp;
21349 +      run;
21350 +      quit;
21351 +  %mend MakeCorrelationDistance;
21352 +
21353 +
21354 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21355 +                                   rsquare = N
21356 +                                   );
21357 +    data corr_tmp;
21358 +        set &indata;
21359 +    run;
21360 +    proc sql noprint;
21361 +           update &indata
21362 +           set
21363 +     %let dsid = %sysfunc(open(work.corr_tmp));
21364 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21365 +          %do i = 4 %to &nvar;
21366 +          %let _name = %sysfunc(varname(&dsid, &i));
21367 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21368 +            %else  %let _name_md = &_name;
21369 +            %if &i < &nvar %then %do;
21370 +               &_name = 1- &_name_md ,
21371 +            %end;
21372 +            %else %do;
21373 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21374 +            %end;
21375 +          %end;
21376 +      %let dsid= %sysfunc(close(&dsid));
21377 +
21378 +      select * from &indata;
21379 +      run;
21380 +     data &indata( drop = _NCL_);
21381 +           set &indata;
21382 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21383 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21384 +     run;
21385 +     data &indata(DROP = _NCL_);
21386 +           set &indata;
21387 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21388 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21389 +           rename _NAME_ = _VAR_;
21390 +     run;
21391 +     proc datasets lib = work nolist;
21392 +           delete corr_tmp;
21393 +     run;
21394 +     quit;
21395 + %mend UpdateOutStatCorrToDistance;
21396 +
21397 +
21398 +%macro HierClusWithCorr(indata= ,
21399 +                        ncluster=,
21400 +                        method = Ward,
21401 +                        outtree = _outtree,
21402 +                        idvar =_VAR_,
21403 +                        outdata=,
21404 +                        rescore = N,
21405 +                        newncluster=
21406 +                        );
21407 +      %global &newncluster;
21408 +      %if &rescore ne Y %then %do;
21409 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21410 +                   method=&method outtree=&outtree noprint;
21411 +           id &idvar;
21412 +      run;
21413 +      %end;
21414 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21415 +      run;
21416 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21417 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21418 +      run;
21419 +      data _outcontent;
21420 +          set _outcontent;
21421 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21422 +          index = 1;
21423 +          rename NAME = _NAME_;
21424 +      run;
21425 +      proc sort data=_outcontent;
21426 +          by _NAME_;
21427 +      run;
21428 +      proc sort data =&outdata;
21429 +           by _NAME_;
21430 +      run;
21431 +      data &outdata(drop=index);
21432 +          merge &outdata _outcontent;
21433 +          by _NAME_;
21434 +          if index = . then delete;
21435 +      run;
21436 +      /*-----------------------------------------------------------*/
21437 +      data &outdata;
21438 +           length CLUSNAME $16;
21439 +           set &outdata;
21440 +           if CLUSTER > &ncluster then delete;
21441 +           CLUSNAME='GC'||strip(CLUSTER);
21442 +           *label CLUSNAME = "Cluster Name";
21443 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
21444 +           rename _NAME_ = VARIABLE ;
21445 +           *label _NAME_ = "Variable";
21446 +           *label CLUSTER = "Cluster";
21447 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21448 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21449 +      run;
21450 +      proc sort data=&outdata out=&outdata;
21451 +           by CLUSTER;
21452 +      run;
21453 +      proc means data =&outdata noprint;
21454 +           output out=_meanout;
21455 +      run;
21456 +      data _null_;
21457 +            set _meanout;
21458 +            if strip(_STAT_) eq 'MAX' then do;
21459 +            call symput("&newncluster", CLUSTER);
21460 +            stop;
21461 +            end;
21462 +      run;
21463 +
21464 +      proc datasets lib = work nolist;
21465 +           delete _outcontent _meanout;
21466 +      run;
21467 +      quit;
21468 +%mend  HierClusWithCorr;
21469 +
21470 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
21471 +
21472 +     data _tmpindata;
21473 +          set &indata;
21474 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21475 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21476 +          if _TYPE_ = 'STD' then _NAME_='STD';
21477 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
21478 +          DROP _TYPE_ _NCL_;
21479 +     run;
21480 +
21481 +     filename _file_  "&fileRef";
21482 +
21483 +     data _null_;
21484 +        FILE _file_ MOD;
21485 +        put ' ';
21486 +        put "/*-------------------------------------------------*/";
21487 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
21488 +        put "/*-------------------------------------------------*/";
21489 +        put ' ';
21490 +        %let dsid = %sysfunc(open(work._tmpindata));
21491 +
21492 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21493 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21494 +        %let k = 1;
21495 +        %do %while(^%sysfunc(fetch(&dsid)));
21496 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21497 +               %if &k > 2 %then %do;
21498 +                %let cn = %eval(&k-2);
21499 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
21500 +                %end;
21501 +                %let k = %eval(&k+1);
21502 +
21503 +        %end;
21504 +        %let rc = %sysfunc(rewind(&dsid));
21505 +
21506 +        %do j= 2 %to &nvar;
21507 +            %let _varname = %sysfunc(varname(&dsid, &j));
21508 +            %do %while(^%sysfunc(fetch(&dsid)));
21509 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21510 +                %if &_name = MEAN %then
21511 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
21512 +                %else %if &_name = STD %then
21513 +                %let _std = %sysfunc(getvarn(&dsid, &j));
21514 +                %else %do;
21515 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
21516 +                      %let abscoeff = %sysfunc(abs(&coeff));
21517 +                          %if &abscoeff >  0 %then %do;
21518 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21519 +                           %end;
21520 +                 %end;
21521 +             %end;
21522 +             %let rc = %sysfunc(rewind(&dsid));
21523 +         %end;
21524 +
21525 +        %let dsid= %sysfunc(close(&dsid));
21526 +
21527 +     run;
21528 +
21529 +     filename _file_;
21530 +     proc datasets lib = work nolist;
21531 +           delete _tmpindata;
21532 +     run;
21533 +     quit;
21534 +%mend CreateScoreCode2;
21535 +
21536 +
21537 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
21538 +
21539 +     /*--- Build Code to Modify Metadata ---*/
21540 +     filename X "&deltacodefile";
21541 +     data _null_;
21542 +        FILE X;
21543 +        set &groupds end=eof;
21544 +        if _N_=1 then do;
21545 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21546 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21547 +           %end;
21548 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21549 +           put "if upcase(strip(NAME)) in (";
21550 +        end;
21551 +        if Strip(upcase(Selected)) eq 'YES' then do;
21552 +           string = '"'!!trim(left(VARIABLE))!!'"';
21553 +           put string;
21554 +        end;
21555 +        if eof then do;
21556 +           put ') then ROLE="INPUT";';
21557 +           put 'else ROLE="REJECTED";';
21558 +           put 'end;';
21559 +
21560 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21561 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21562 +           %end;
21563 +        end;
21564 +     run;
21565 +     quit;
21566 +
21567 +     filename X;
21568 +     quit;
21569 +%mend MakeDeltaCode2;
21570 +
21571 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
21572 +  %global &ngc;
21573 +  data _null_;
21574 +  %if &indata ne %then %do;
21575 +      %let dsid = %sysfunc(open(&indata));
21576 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
21577 +      %let dsid = %sysfunc(close(&dsid));
21578 +  %end;
21579 +  %else %do;
21580 +       %let nvar = %eval(&ninput+&ndummy); ;
21581 +  %end;
21582 +  %let numgc = %eval(&nvar/&div+2);
21583 +  %let &ngc = &numgc;
21584 +   run;
21585 +  quit;
21586 +%mend getInitialGClusterNumber;
21587 +
21588 +
21589 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
21590 +data &outlink(drop = Selected);
21591 +     set &indata;
21592 +     LINKID = _N_;
21593 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
21594 +run;
21595 +data &outnode(keep=NODEID TYPE LABEL);
21596 +    set &indata;
21597 +    length TYPE $16;
21598 +    rename VARIABLE = NODEID;
21599 +    *label  CLUSNAME="Node ID";
21600 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21601 +    TYPE = "VARIABLE";
21602 +    *label TYPE = "Node Type";
21603 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21604 +    run;
21605 +data _tmp(keep=NODEID TYPE LABEL);
21606 +    set &indata;
21607 +    length TYPE $16;
21608 +    rename CLUSNAME = NODEID;
21609 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21610 +    TYPE = "GCLUSTER";
21611 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21612 +    run;
21613 +proc sort data=_tmp;
21614 +    by NODEID;
21615 +run;
21616 +data _tmp;
21617 +    set _tmp; by NODEID;
21618 +    if first.NODEID then output;
21619 +run;
21620 +proc sort data=&outnode;
21621 +    by NODEID;
21622 +run;
21623 +data  &outnode;
21624 +    set _tmp &outnode;
21625 +run;
21626 +proc datasets lib = work nolist;
21627 +     delete _tmp;
21628 +run;
21629 +quit;
21630 +%mend MakeGobalConstellData;
21631 +
21632 +/* Make contellation plot data among GCLUSTERS */
21633 +
21634 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
21635 +
21636 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
21637 +     set &indata;
21638 +     LINKID = _N_;
21639 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
21640 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
21641 +     end;
21642 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
21643 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
21644 +     end;
21645 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
21646 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
21647 +    end;
21648 +run;
21649 +
21650 +data _tmp_outrsquare;
21651 +        set &inoutrsq;
21652 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21653 +run;
21654 +
21655 +proc freq data =_tmp_outrsquare noprint;
21656 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
21657 +run;
21658 +
21659 +data &outnode(keep=_NAME_ TYPE LABEL);
21660 +    set &outlink;
21661 +    length TYPE $16;
21662 +    length LABEL $100;
21663 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
21664 +
21665 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21666 +    TYPE = "GCLUSTER";
21667 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21668 +    end;
21669 +    else do;
21670 +    TYPE= "ROOT";
21671 +    LABEL= _NAME_;
21672 +    end;
21673 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21674 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21675 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21676 +    run;
21677 +
21678 +proc sort data=&outnode;
21679 +     by _NAME_;
21680 +proc sort data=_tmp_GCLUSFREQ;
21681 +     by _NAME_;
21682 +run;
21683 +
21684 +data  &outnode;
21685 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
21686 +     if COUNT=. then COUNT=1;
21687 +run;
21688 +
21689 +proc datasets lib = work nolist;
21690 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
21691 +run;
21692 +
21693 +quit;
21694 +%Mend MakeGClusterConstData;
21695 +
21696 +
21697 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
21698 +
21699 +    data _gscoretmpds;
21700 +          set &indata;
21701 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
21702 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21703 +          if _TYPE_ = 'STD' then _NAME_='STD';
21704 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
21705 +          DROP _TYPE_ _NCL_;
21706 +     run;
21707 +
21708 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
21709 +        GCluster Component &globalclusid ------ */
21710 +
21711 +    filename _file_  "&fileref";
21712 +
21713 +    data _null_;
21714 +        %if &globalclusid eq 1 %then %do;
21715 +          FILE _file_;
21716 +        %end;
21717 +        %else %do;
21718 +          FILE _file_ MOD;
21719 +        %end;
21720 +
21721 +        %let dsid = %sysfunc(open(work._gscoretmpds));
21722 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21723 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21724 +
21725 +        %let k = 1;
21726 +        %do %while(^%sysfunc(fetch(&dsid)));
21727 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21728 +                %if &k > 2 %then %do;
21729 +                put "&_name = 0 ; ";
21730 +                %end;
21731 +                %let k = %eval(&k+1);
21732 +        %end;
21733 +
21734 +        %let rc = %sysfunc(rewind(&dsid));
21735 +        %do i= 2 %to &nvar;
21736 +            %let _varname =  %sysfunc(varname(&dsid, &i));
21737 +            %do %while(^%sysfunc(fetch(&dsid)));
21738 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21739 +                %if &_name = MEAN %then
21740 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21741 +                %else %if &_name = STD %then
21742 +                %let _std = %sysfunc(getvarn(&dsid, &i));
21743 +                %else %do;
21744 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21745 +                      %let abscoeff = %sysfunc(abs(&coeff));
21746 +                          %if &abscoeff >  0 %then %do;
21747 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21748 +                           %end;
21749 +                 %end;
21750 +             %end;
21751 +             %let rc = %sysfunc(rewind(&dsid));
21752 +
21753 +         %end;
21754 +
21755 +        %let dsid= %sysfunc(close(&dsid));
21756 +       run;
21757 +
21758 +
21759 +       proc datasets lib=work nolist;
21760 +            delete _gscoretmpds;
21761 +       run;
21762 +      quit;
21763 +
21764 +%mend CreateGClusterScoreCode;
21765 +
21766 +
21767 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
21768 +
21769 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
21770 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
21771 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
21772 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
21773 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
21774 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
21775 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
21776 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
21777 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
21778 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
21779 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
21780 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
21781 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
21782 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
21783 +
21784 +   filename gsfile "&gscorecode";
21785 +
21786 +   data &EM_USER_GSCORE;
21787 +             set &indata;
21788 +             %include  gsfile;
21789 +        keep
21790 +        %do i=1 %to &ngcluster;
21791 +         %let gcvarname = GC&i;
21792 +         &gcvarname
21793 +        %end;
21794 +     ;
21795 +   run;
21796 +
21797 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
21798 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
21799 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
21800 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
21801 +    noprint  ;
21802 +     var
21803 +       %do i=1 %to &ngcluster;
21804 +         %let gcvarname = GC&i;
21805 +         &gcvarname
21806 +        %end;
21807 +   ;
21808 +   run;
21809 +
21810 +
21811 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
21812 +   data &EM_USER_GSCORECORRPLOT ;
21813 +        set &EM_USER_GSCORECORRPLOT;
21814 +        rename _X_ = X;
21815 +        rename _Y_ = Y;
21816 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21817 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21818 +   run;
21819 +
21820 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
21821 +
21822 +   data &EM_USER_GSCORETREE;
21823 +        length _NAME_ $32;
21824 +        length _LABEL_ $100;
21825 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
21826 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21827 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21828 +        end;else do;
21829 +         _LABEL_ = _NAME_;
21830 +        end;
21831 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21832 +
21833 +   run;
21834 +
21835 +   quit;
21836 +
21837 +%mend MakeGClusterCorrelation;
21838 +
21839 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
21840 +%macro report;
21841 +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
21842 +
21843 +    data _null_;
21844 +         set &EM_USER_VARCLUSMETA;
21845 +         if _N_=1 then
21846 +         call symput('_trainnum', TrainNum);
21847 +    run;
21848 +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
21849 +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
21850 +           %include temp;
21851 +           filename temp;
21852 +           %report1;
21853 +       %end;
21854 +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
21855 +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
21856 +           %include temp;
21857 +           filename temp;
21858 +           %report2;
21859 +    %end;
21860 +
21861 +   /* End of all runs, change the flag of newtrain to N */
21862 +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21863 +    data &EM_USER_VARCLUSMETA;
21864 +         set &EM_USER_VARCLUSMETA;
21865 +         NewTrain = "N";
21866 +    run;
21867 +    quit;
21868 +%mend report;
21869 +
21870 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      55071:166   
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
21871 +%macro report1;
21873 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
21874 +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
21875 +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
21877 +   data &EM_USER_OUTVARSEL;
21878 +        set &EM_USER_OUTRSQUARE;
21879 +        if upcase(strip(SELECTED)) = 'YES' then output;
21880 +   run;
21882 +   data _tmp_outrsquare;
21883 +        set &EM_USER_OUTRSQUARE;
21884 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21885 +   run;
21887 +   proc freq data =_tmp_outrsquare noprint;
21888 +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
21889 +   run;
21891 +   proc datasets lib = work nolist;
21892 +     delete _tmp_outrsquare;
21893 +   run;
21895 +   data &EM_USER_CLUSFREQ;
21896 +       set &EM_USER_CLUSFREQ;
21897 +       label
21898 +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
21899 +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
21900 +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
21901 +       ;
21902 +   run;
21904 +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
21905 +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
21906 +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
21908 +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
21909 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
21910 +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
21911 +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
21912 +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
21913 +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
21914 +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
21915 +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
21917 +   /*
21918 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
21919 +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
21920 +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
21923 +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTVARSEL has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS5.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21926  *------------------------------------------------------------*;
21927  * End REPORT: VarClus;
21928  *------------------------------------------------------------*;
21929  

21930  /* Reset EM Options */
21931  options formchar="|----|+|---+=|-/\<>*";
21932  options nocenter ls=256 ps=10000;
21933  goptions reset=all device=GIF NODISPLAY;

21934  proc sort data=WORK.EM_USER_REPORT;
21935  by ID VIEW;
21936  run;

NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

