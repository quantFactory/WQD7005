*------------------------------------------------------------*
User:                ali
Date:                December 19, 2019
Time:                15:48:17
Site:                12601940
Platform:            W32_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 19, 2019
Time:                15:48:14
*------------------------------------------------------------*
14718  proc freq data=EMWS5.VarClus_VariableSet noprint;
14719  table ROLE*LEVEL/out=WORK.VarClusMETA;
14720  run;
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14721  proc print data=WORK.VarClusMETA label noobs;
14722  var ROLE LEVEL COUNT;
14723  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14724  title9 ' ';
14725  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14726  run;
 
NOTE: There were 3 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14727  title10;
 
14728  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15078  *------------------------------------------------------------*;
15079  * VarClus: Generation of macros and macro variables;
15080  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15081  *------------------------------------------------------------*;
 
15082  %let EMEXCEPTIONSTRING=;
15083  *------------------------------------------------------------*;
15084  * TRAIN: VarClus;
15085  *------------------------------------------------------------*;
15086  %let EM_ACTION = TRAIN;
15087  %let syscc = 0;
15088
15089  %macro main;
15090
15091     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15092     %include temp;
15093     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15094     %include temp;
15095     filename temp;
15096
15097    %SetProperties;
15098
15099     %if %upcase(&EM_ACTION) = CREATE %then %do;
15100         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15101         %include temp;
15102         filename temp;
15103         %create;
15104     %end;
15105     %else
15106     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15107          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15108             %include temp;
15109             filename temp;
15110             %train;
15111     %end;
15112     %else
15113     %if %upcase(&EM_ACTION) = SCORE %then %do;
15114             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15115             %include temp;
15116             filename temp;
15117             %score;
15118     %end;
15119     %else
15120     %if %upcase(&EM_ACTION) = REPORT %then %do;
15121             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15122             %include temp;
15123             filename temp;
15124             %report;
15125     %end;
15126     /*
15127     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15128         %put 'OPENING TABLE';
15129     %end;
15130     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15131         %put 'CLOSE TABLE';
15132     %end;
15133     */
15134  %mend main;
15135  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15136 +
15137 +/* Initialize property macro variables */
15138 +%macro SetProperties;
15139 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15140 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15141 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15142 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15143 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15144 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15145 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15146 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15147 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15148 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15149 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15150 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15151 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15152 +
15153 +%mend SetProperties;
15154 +
15155 +%Macro MakeDummyVariables(indata=,
15156 +                          outvar=,
15157 +                          outdata=,
15158 +                          fileref=,
15159 +                          recreatecmeta=N, /* optional */
15160 +                          incmeta=,     /* optional */
15161 +                          outcmeta=,    /* optional */
15162 +                          ndummyvars=_ndummyvars
15163 +                          );
15164 +    %global &ndummyvars;
15165 +
15166 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15167 +       class
15168 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15169 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15170 +    ;
15171 +    run;
15172 +    %let &ndummyvars = 0;
15173 +    data _null_;
15174 +    %let dsid = %sysfunc(open(work._classout));
15175 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15176 +    %let dsid = %sysfunc(close(&dsid));
15177 +    run;
15178 +
15179 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15180 +       input
15181 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15182 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15183 +        / level=nominal stdize=no;
15184 +       make outvar = &outvar;
15185 +       score data = &indata out =&outdata;
15186 +       code  file=  "&fileref";
15187 +    run;
15188 +    %if &recreatecmeta eq Y %then %do;
15189 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15190 +    data _tmpds;
15191 +        set _tmpds;
15192 +           ROLE = 'INPUT';
15193 +           LEVEL = 'INTERVAL';
15194 +           CREATOR='DMZIP';
15195 +           if NAME = '_TYPE_' then delete;
15196 +    run;
15197 +    data &outcmeta;
15198 +         set &incmeta _tmpds;
15199 +    run;
15200 +    %end;
15201 +    proc datasets lib=work nolist;
15202 +      delete  _dmdbdat _dmdbcat _classout
15203 +    %if &recreatecmeta eq Y %then %do;
15204 +    _tmpds
15205 +    %end;
15206 +    ;
15207 +    quit;
15208 +%Mend MakeDummyVariables;
15209 +
15210 +/*--- Determine Optimal Number of Cluster ----
15211 +%macro FindClusNum(statds=, groupds=, minvariation=);
15212 +   %global optnclus;
15213 +   data varclus_tmp(drop=_NAME_);
15214 +      set &statDs;
15215 +      where _type_ ='PROPOR';
15216 +   run;
15217 +   proc sort data=varclus_tmp;
15218 +      by _NCL_;
15219 +   run;
15220 +   proc transpose data=varclus_tmp out=varclus_tmp;
15221 +      by _NCL_;
15222 +      var %EM_INTERVAL_INPUT
15223 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15224 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15225 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15226 +          %do i = 2 %to &nvar;
15227 +          %let varname = %sysfunc(varname(&dsid, &i));
15228 +          &varname
15229 +          %end;
15230 +      %end;
15231 +   ;
15232 +   run;
15233 +
15234 +   %if &minVariation eq %then %do;
15235 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15236 +   %end;
15237 +   %if ^(0<&minVariation<100) %then %do;
15238 +       %let minVariation = 90;
15239 +   %end;
15240 +
15241 +   data _null_;
15242 +      set varclus_tmp end=eof;
15243 +      by _NCL_;
15244 +      retain flag 0;
15245 +      if first._ncl_ then flag=0;
15246 +      if .<col1 < &minVariation then flag=1;
15247 +      if last._ncl_ and ^flag then do;
15248 +         call symput('OPTNCL', _ncl_);
15249 +         stop;
15250 +      end;
15251 +     if eof then call symput('OPTNCL', _ncl_);
15252 +   run;
15253 +
15254 +   %let optnclus = &OPTNCL;
15255 +
15256 +   data varclus_tmp(drop=_NCL_ _NAME_);
15257 +      set &statDs;
15258 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15259 +   run;
15260 +   proc sort data=varclus_tmp;
15261 +      by _TYPE_;
15262 +   run;
15263 +   proc transpose data=varclus_tmp out=varclus_tmp;
15264 +      by _TYPE_;
15265 +   run;
15266 +   proc sort data=varclus_tmp;
15267 +      by _name_ _type_;
15268 +   run;
15269 +
15270 +  proc transpose data=varclus_tmp out=&groupds;
15271 +      by _NAME_;
15272 +   run;
15273 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15274 +      by Cluster descending Rsquare;
15275 +      where Cluster ne 0;
15276 +   run;
15277 +   proc datasets lib=work nolist mt=(DATA VIEW);
15278 +      delete varclus_tmp;
15279 +   run;
15280 +   quit;
15281 +%mend findClusNum;
15282 +*/
15283 +
15284 +%macro getNclusfromTrain(inoutstat=, nc=);
15285 +%global &nc;
15286 +data _null_;
15287 +    set &inoutstat end=eof;
15288 +    if eof then do;
15289 +    call symput("&nc", _ncl_);
15290 +    end;
15291 +run;
15292 +%mend  getNclusfromTrain;
15293 +
15294 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15295 +
15296 +     *--- Build Code to Modify Metadata ---*;
15297 +     filename X "&deltacodefile";
15298 +     data _null_;
15299 +        FILE X;
15300 +        set &groupds end=eof;
15301 +        /*by Cluster;*/
15302 +         if _N_=1 then do;
15303 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15304 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15305 +           %end;
15306 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15307 +           put "if upcase(strip(NAME)) in (";
15308 +        end;
15309 +        if Strip(upcase(Selected)) eq 'YES' then do;
15310 +           string = '"'!!trim(left(VARIABLE))!!'"';
15311 +           put string;
15312 +        end;
15313 +        if eof then do;
15314 +           put ') then ROLE="INPUT";';
15315 +           put 'else ROLE="REJECTED";';
15316 +           put 'end;';
15317 +
15318 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15319 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15320 +           %end;
15321 +        end;
15322 +     run;
15323 +     quit;
15324 +
15325 +     filename X;
15326 +
15327 +     quit;
15328 +%mend MakeDeltaCode;
15329 +
15330 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15331 +    %if ^%sysfunc(exist(&statds)) %then %do;
15332 +         %goto doendc;
15333 +    %end;
15334 +
15335 +    data &corrds(drop=_TYPE_ _NCL_) ;
15336 +       set &statds;
15337 +       where _type_ eq 'CORR' ;
15338 +    run ;
15339 +    proc sort data=&corrds;
15340 +       by _NAME_ ;
15341 +    run ;
15342 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15343 +      BY _NAME_ ;
15344 +    run ;
15345 +    data &corrplotds;
15346 +       length _Y_ $100;
15347 +       set &corrplotDs;
15348 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15349 +    run ;
15350 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15351 +       set &corrplotds;
15352 +       where _LABEL_ ne '' ;
15353 +       keep _TMP_ _LABEL_ ;
15354 +    run ;
15355 +    data _null_;
15356 +       nobs=0;
15357 +       dsid = open('varclus_match');
15358 +       if dsid then do;
15359 +          nobs = attrn(dsid, 'NOBS');
15360 +          dsid = close(dsid);
15361 +       end;
15362 +       call symput ('CORR_NOBS', nobs);
15363 +    run;
15364 +    %if &corr_nobs %then %do;
15365 +        proc sort data=varclus_match;
15366 +           by _name_;
15367 +        run ;
15368 +        proc sort data=&corrplotds;
15369 +           by _name_;
15370 +        run ;
15371 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15372 +           merge varclus_match &corrplotds;
15373 +           by _NAME_ ;
15374 +           if _X_ eq '' then _X_=_NAME_ ;
15375 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15376 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15377 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15378 +
15379 +       run ;
15380 +    %end;
15381 +    %else %do;
15382 +        proc sort data=&corrplotds;
15383 +           by _name_;
15384 +        run ;
15385 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15386 +           set &corrplotds;
15387 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15388 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15389 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15390 +
15391 +        run ;
15392 +    %end;
15393 +    proc sort data=&corrplotds;
15394 +       by _X_ _Y_;
15395 +    run ;
15396 +    proc datasets lib=work nolist mt=(DATA VIEW);
15397 +       delete varclus_match;
15398 +    run;
15399 +    quit;
15400 +
15401 +%doendc:
15402 +
15403 +%mend MakeVarClusCorrData;
15404 +
15405 +%macro MakeStatPlotData(statds= , outstatplotds=);
15406 +   %if %sysfunc(exist(&statds)) %then %do;
15407 +
15408 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15409 +          set &statDs;
15410 +          where _type_ in('MEAN', 'STD', 'N');
15411 +       run ;
15412 +       proc transpose data=varclus_tmp out=&outstatplotds;
15413 +          id _TYPE_ ;
15414 +       run ;
15415 +       data &outstatplotds;
15416 +          set &outstatplotds(obs=1000);
15417 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15418 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15419 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15420 +          else SCALEDSTD= STD ;
15421 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15422 +       run ;
15423 +       proc sort data=&outstatplotds;
15424 +          by descending SCALEDSTD ;
15425 +       run ;
15426 +       proc datasets lib=work nolist mt=(DATA VIEW);
15427 +          delete varclus_tmp;
15428 +       run;
15429 +       quit;
15430 +    %end;
15431 +
15432 +%mend MakeStatPlotData;
15433 +
15434 +
15435 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15436 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15437 +    data &EM_USER_OUTSTATSCORE;
15438 +          set &indata;
15439 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15440 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15441 +          if _TYPE_ = 'STD' then _NAME_='STD';
15442 +          DROP _TYPE_ _NCL_;
15443 +     run;
15444 +
15445 +     filename _file_  "&fileRef";
15446 +
15447 +     data _null_;
15448 +        FILE _file_ MOD;
15449 +        put ' ';
15450 +        put '/*-------------------------------------------------*/';
15451 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15452 +        put '/*-------------------------------------------------*/';
15453 +        put ' ';
15454 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15455 +
15456 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15457 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15458 +
15459 +        %let k = 1;
15460 +        %do %while(^%sysfunc(fetch(&dsid)));
15461 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15462 +                %if &k > 2 %then %do;
15463 +                 %let cn = %eval(&k-2);
15464 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15465 +                %end;
15466 +                %let k = %eval(&k+1);
15467 +        %end;
15468 +
15469 +        %let rc = %sysfunc(rewind(&dsid));
15470 +
15471 +        %do i= 2 %to &nvar;
15472 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15473 +            %do %while(^%sysfunc(fetch(&dsid)));
15474 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15475 +                %if &_name = MEAN %then
15476 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15477 +                %else %if &_name = STD %then
15478 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15479 +                %else %do;
15480 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15481 +                      %let abscoeff = %sysfunc(abs(&coeff));
15482 +                          %if &abscoeff >  0 %then %do;
15483 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15484 +                           %end;
15485 +                 %end;
15486 +             %end;
15487 +             %let rc = %sysfunc(rewind(&dsid));
15488 +         %end;
15489 +
15490 +        %let dsid= %sysfunc(close(&dsid));
15491 +       run;
15492 +%mend CreateScoreCode;
15493 +
15494 +
15495 +
15496 +/*----------------------------------------------------------
15497 +    Instead of using %MakeRSquareData,
15498 +    %MakeVarClusResultTable at macro2.source is used
15499 + +----------------------------------------------------------*/
15500 +
15501 +
15502 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15503 +
15504 +/* modifying  from ods rsquare = data */
15505 +
15506 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15507 +    Length Cluster $16;
15508 +    length Variable $32;
15509 +    Length VariableLabel $64;
15510 +    set &indata; retain CurrentCluster;
15511 +    if NumberOfClusters ^= &ncluster then delete;
15512 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15513 +    CurrentCluster = Cluster;
15514 +   run;
15515 +proc sort data =&outdata ;
15516 +     by Cluster RsquareRatio;
15517 +run;
15518 +data _tmprsq(drop=index);
15519 +     set &outdata; by Cluster;
15520 +     if first.Cluster then do;
15521 +     index = strip(scan(Cluster,2 ));
15522 +     Variable = "Clus"||index;
15523 +     VariableLabel = "Cluster Component "||index;
15524 +     OwnCluster = 1;
15525 +     NextClosest = .;
15526 +     RsquareRatio = 0;
15527 +     output;
15528 +     end;
15529 +run;
15530 +
15531 +proc sort data = _tmprsq ;
15532 +     by Cluster RsquareRatio;
15533 +run;
15534 +data &outdata;
15535 +     set &outdata _tmprsq;
15536 +by Cluster;
15537 +run;
15538 +
15539 +
15540 +/* Just create the Selected variable with all YES */
15541 +
15542 +data &outdata;
15543 +    set &outdata; by cluster;
15544 +    length Selected $8;
15545 +    Selected = 'YES';
15546 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15547 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15548 +    rename OwnCluster = RSqWithClusterComp;
15549 +    rename NextClosest = RSqWithNextClusComp;
15550 +run;
15551 +
15552 +
15553 +/* Selected = Y/N will be done %score section -----
15554 +
15555 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15556 +data &outdata;
15557 +    set &outdata; by cluster;
15558 +    length Selected $8;
15559 +    if first.Cluster then Selected = 'YES';
15560 +    else Selected = 'NO';
15561 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15562 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15563 +    rename OwnCluster = RSqWithClusterComp;
15564 +    rename NextClosest = RSqWithNextClusComp;
15565 +run;
15566 +%end;
15567 +%else %do;
15568 +data &outdata;
15569 +    set &outdata; by cluster;
15570 +    if last.Cluster then Selected = 'YES';
15571 +    else Selected = 'NO';
15572 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15573 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15574 +    rename OwnCluster = RSqWithClusterComp;
15575 +    rename NextClosest = RSqWithNextClusComp;
15576 +run;
15577 +%end;
15578 +---------------------------------------------------------------*/
15579 +
15580 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15581 +/* to calculate NextClosestClusRsq */
15582 +proc transpose data = &inClusRSquare  out=_clusRsq;
15583 +      by cluster;
15584 +      run;
15585 +data _clusRsq;
15586 +     set _clusRsq;
15587 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15588 +run;
15589 +
15590 +proc sort data=_clusRsq;
15591 +    by cluster col1;
15592 +    run;
15593 +data _clusRsq(drop=_NAME_ _LABEL_);
15594 +     set _clusRsq; by cluster;
15595 +     if last.Cluster then output;
15596 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15597 +     rename COL1 = RSqWithNextClusComp;
15598 +     rename Cluster = Variable;
15599 +     label  Cluster = "Variable";
15600 +run;
15601 +
15602 +proc sort data =&outdata;
15603 +     by Variable;
15604 +run;
15605 +data &outdata;
15606 +    merge &outdata _clusRsq;
15607 +    by Variable;
15608 +run;
15609 +proc sort data =&outdata;
15610 +by Cluster  RsquareRatio;
15611 +run;
15612 +quit;
15613 +%end;
15614 +
15615 +proc datasets lib = work nolist;
15616 +     delete _tmprsq _clusRsq;
15617 +     run;
15618 +quit;
15619 +
15620 +%mend MakeRSquareData;
15621 +
15622 +
15623 +/*-------------------------------------------------------------------------*/
15624 +
15625 +
15626 +
15627 +%macro ModifyCorr(indata=,
15628 +                  outdata=,
15629 +                  rsquare = Y
15630 +                  );
15631 +    data corr_tmp;
15632 +        set &indata;
15633 +    run;
15634 +     proc sql;
15635 +           update &indata
15636 +           set
15637 +     %let dsid = %sysfunc(open(work.corr_tmp));
15638 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15639 +          %do i = 4 %to &nvar;
15640 +          %let _name = %sysfunc(varname(&dsid, &i));
15641 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15642 +            %else  %let _name_md = &_name;
15643 +            %if &i < &nvar %then %do;
15644 +               &_name = 1- &_name_md ,
15645 +            %end;
15646 +            %else %do;
15647 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15648 +            %end;
15649 +          %end;
15650 +      %let dsid= %sysfunc(close(&dsid));
15651 +
15652 +      select * from &indata;
15653 +      run;
15654 +      proc datasets lib = work nolist;
15655 +           delete corr_tmp;
15656 +      run;
15657 +      quit;
15658 +
15659 + %mend ModifyCorr;
15660 +
15661 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15662 +    data &outdata(drop= _NCL_  _TYPE_);
15663 +       set &indata;
15664 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15665 +       rename _NAME_ = Cluster;
15666 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15667 +    run;
15668 +    %if &RSquare eq Y %then %do;
15669 +     data corr_tmp;
15670 +        set &outdata;
15671 +     run;
15672 +
15673 +     data &outdata(drop=i);
15674 +          set &outdata;
15675 +          %let dsid = %sysfunc(open(work.corr_tmp));
15676 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15677 +          %do i = 2 %to &nvar;
15678 +            %let _name = %sysfunc(varname(&dsid, &i));
15679 +            %let _name_md = &_name.**2;
15680 +                &_name = &_name_md;
15681 +          %end;
15682 +      %let dsid= %sysfunc(close(&dsid));
15683 +      run;
15684 +      proc datasets lib = work nolist;
15685 +           delete corr_tmp;
15686 +      run;
15687 +
15688 +    %end;
15689 +     quit;
15690 +%mend MakeClusStructCorrData;
15691 +
15692 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15693 +    data &outdata(drop= _NCL_  _TYPE_);
15694 +       set &indata;
15695 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15696 +       rename _NAME_ = Cluster;
15697 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15698 +    run;
15699 +    data corr_tmp;
15700 +        set &outdata;
15701 +    run;
15702 +
15703 +    %let dsid = %sysfunc(open(work.corr_tmp));
15704 +    %let nclus2= %eval(&ncluster+1);
15705 +    data &outdata;
15706 +         set &outdata;
15707 +          %do i = 2 %to &nclus2;
15708 +          %let i_1 = %eval(&i-1);
15709 +            %let _name = %sysfunc(varname(&dsid, &i));
15710 +            %let _newName = Clus&i_1;
15711 +                rename &_name = &_newName; ;
15712 +                *label &_name ="Cluster &i_1";
15713 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15714 +          %end;
15715 +          keep Cluster
15716 +          %do i = 2 %to &nclus2;
15717 +                %let _name = %sysfunc(varname(&dsid, &i));
15718 +                &_name
15719 +          %end;
15720 +          ;
15721 +    %let dsid= %sysfunc(close(&dsid));
15722 +     run;
15723 +     quit;
15724 +
15725 +    %if &RSquare eq Y %then %do;
15726 +
15727 +       data corr_tmp;
15728 +        set &outdata;
15729 +     run;
15730 +
15731 +     data &outdata(drop=i);
15732 +          set &outdata;
15733 +          %let dsid = %sysfunc(open(work.corr_tmp));
15734 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15735 +          %do i = 2 %to &nvar;
15736 +            %let _name = %sysfunc(varname(&dsid, &i));
15737 +            %let _name_md = &_name.**2;
15738 +                &_name = &_name_md;
15739 +          %end;
15740 +      %let dsid= %sysfunc(close(&dsid));
15741 +      run;
15742 +    %end;
15743 +
15744 +    %if &makeplotds eq Y %then %do;
15745 +     proc transpose data = &outdata
15746 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15747 +          by cluster;
15748 +     run;
15749 +     data &plotds;
15750 +          set  &plotds;
15751 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15752 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15753 +     run;
15754 +     %end;
15755 +     proc datasets lib = work nolist;
15756 +           delete corr_tmp;
15757 +     run;
15758 +     quit;
15759 +%mend MakeInterClusCorrData;
15760 +
15761 +
15762 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15763 +
15764 +data &outlink(drop = Selected);
15765 +     set &indata;
15766 +     LINKID = _N_;
15767 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15768 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15769 +run;
15770 +data &outnode(keep=NODEID TYPE LABEL);
15771 +    set &indata;
15772 +    length TYPE $16;
15773 +    rename Variable = NODEID;
15774 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15775 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15776 +    then  TYPE = "CLUSTER";
15777 +    else  TYPE="VARIABLE";
15778 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15779 +run;
15780 +quit;
15781 +%mend MakeClusConstellData;
15782 +
15783 +
15784 +
15785 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15786 +
15787 +data &outlink(drop = Selected);
15788 +     set &indata;
15789 +     LINKID = _N_;
15790 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15791 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15792 +run;
15793 +data &outnode(keep=NODEID TYPE LABEL);
15794 +    set &indata;
15795 +    length TYPE $16;
15796 +    rename Variable = NODEID;
15797 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15798 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15799 +    then  TYPE = "CLUSTER";
15800 +    else  TYPE="VARIABLE";
15801 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15802 +run;
15803 +quit;
15804 +%mend MakeClusConstellData;
15805 +
15806 +
15807 +/*--- This will work only when inds is not a view data -------
15808 +
15809 +%macro getNVarNObs(inds=, nvar=, nobs=);
15810 +
15811 +    %global &nvar;
15812 +    %global &nobs;
15813 +    data _null_;
15814 +         dsid = open("&inds");
15815 +         nv = attrn(dsid, 'NVAR');
15816 +         no = attrn(dsid, 'NOBS');
15817 +         dsid = close(dsid);
15818 +         call symput("&nvar", nv);
15819 +         call symput("&nobs", no);
15820 +    run;
15821 +    quit;
15822 +%mend  getNVarNObs;
15823 +
15824 ++---------------------------------------------------------------*/
15825 +
15826 +
15827 +%macro getNVar(inds=, nvar=);
15828 +    %global &nvar;
15829 +    data _null_;
15830 +         dsid = open("&inds");
15831 +         nv = attrn(dsid, 'NVAR');
15832 +         dsid = close(dsid);
15833 +         call symput("&nvar", nv);
15834 +    run;
15835 +    quit;
15836 +%mend  getNVar;
15837 +
15838 +
15839 +
15840 +%macro getNObs(inds=, nobs=);
15841 +    %global &nobs;
15842 +    data _null_;
15843 +        set &inds end=eof;
15844 +        if eof then call symput("&nobs", _N_);
15845 +    run;
15846 +    quit;
15847 +%mend  getNObs;
15848 +
15849 +%Macro CreateVarclusMeta(trainnum=);
15850 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15851 +    data &EM_USER_VARCLUSMETA;
15852 +         length TrainNum 8.;
15853 +         length NewTrain $8;
15854 +         length NGCluster 8.;
15855 +         length ExportedComp $16;
15856 +         length HideVariable $8;
15857 +         TrainNum = &trainnum;
15858 +         NewTrain = "Y";
15859 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15860 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15861 +         NGCluster = 0; /* zero means no twostage */
15862 +   run;
15863 +   quit;
15864 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15865 +
15866 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15867 +    data &outdata(drop= _NCL_  _TYPE_);
15868 +       set &indata;
15869 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15870 +       %if &globalclusid ne %then %do;
15871 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15872 +       rename _NAME_ = Cluster;
15873 +       %end;
15874 +       %else %do;
15875 +        _NAME_ = upcase(_NAME_);
15876 +       rename _NAME_ = Cluster;
15877 +       %end;
15878 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15879 +    run;
15880 +    data corr_tmp;
15881 +        set &outdata;
15882 +    run;
15883 +
15884 +    %let dsid = %sysfunc(open(work.corr_tmp));
15885 +    %let nclus2= %eval(&ncluster+1);
15886 +    data &outdata;
15887 +         set &outdata;
15888 +          %do i = 2 %to &nclus2;
15889 +          %let i_1 = %eval(&i-1);
15890 +            %let _name = %sysfunc(varname(&dsid, &i));
15891 +            %if &globalclusid ne %then
15892 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15893 +                     rename &_name = &_newName;
15894 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15895 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15896 +                %end;
15897 +            %else
15898 +                %do; %let _newName = CLUS&i_1;
15899 +                     rename &_name = &_newName;
15900 +                     *label &_name ="Cluster &i_1";
15901 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15902 +                %end;
15903 +          %end;
15904 +          keep Cluster
15905 +          %do i = 2 %to &nclus2;
15906 +                %let _name = %sysfunc(varname(&dsid, &i));
15907 +                &_name
15908 +          %end;
15909 +          ;
15910 +    %let dsid= %sysfunc(close(&dsid));
15911 +     run;
15912 +     quit;
15913 +
15914 +    %if &RSquare eq Y %then %do;
15915 +
15916 +       data corr_tmp;
15917 +        set &outdata;
15918 +     run;
15919 +
15920 +     data &outdata;
15921 +          set &outdata;
15922 +          %let dsid = %sysfunc(open(work.corr_tmp));
15923 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15924 +          %do i = 2 %to &nvar;
15925 +            %let _name = %sysfunc(varname(&dsid, &i));
15926 +            %let _name_md = &_name.**2;
15927 +                &_name = &_name_md;
15928 +          %end;
15929 +      %let dsid= %sysfunc(close(&dsid));
15930 +      run;
15931 +    %end;
15932 +
15933 +    %if &makeplotds eq Y %then %do;
15934 +     proc transpose data = &outdata
15935 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15936 +          by cluster;
15937 +     run;
15938 +     data &plotds;
15939 +          set  &plotds;
15940 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15941 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15942 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15943 +     run;
15944 +     %end;
15945 +     proc datasets lib = work nolist;
15946 +           delete corr_tmp;
15947 +     run;
15948 +     quit;
15949 +%mend MakeInterClusCorrData;
15950 +
15951 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15952 +    data _tmpds(drop= _NCL_);
15953 +       set &indata;
15954 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15955 +       %if &globalclusid ne %then %do;
15956 +           _NAME_ = "GC&globalclusid.";
15957 +       rename _NAME_ = Cluster;
15958 +       %end;
15959 +       %else %do;
15960 +        _NAME_ = "CLUS";
15961 +        rename _NAME_ = Cluster;
15962 +       %end;
15963 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15964 +    run;
15965 +    proc transpose data =_tmpds out =&outdata;
15966 +    run;
15967 +
15968 +    data &outdata(drop=COL1);
15969 +        %if &globalclusid ne %then %do;
15970 +        length GCluster $16;
15971 +        %end;
15972 +        length Cluster $32;
15973 +        length _NAME_ $32;
15974 +         set &outdata;
15975 +         _NAME_ = upcase(_NAME_);
15976 +         rename _NAME_=Variable;
15977 +         *label _NAME_="Variable";
15978 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15979 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
15980 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
15981 +
15982 +         %if &globalclusid ne %then %do;
15983 +          GCluster = "GC&globalclusid";
15984 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
15985 +         %end;
15986 +         %else %do;
15987 +         Cluster = "CLUS"||strip(COL1);
15988 +        %end;
15989 +         rename COL2 = RSqWithOwnClusComp;
15990 +         *label COL2 = "R-Square With Own Cluster Component";
15991 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
15992 +
15993 +   run;
15994 +   proc sort data =&outdata;
15995 +        by Cluster RSqWithOwnClusComp;
15996 +   run;
15997 +   proc datasets lib = work nolist;
15998 +           delete _tmpds;
15999 +   run;
16000 +   quit;
16001 +%mend MakeOwnRSquare;
16002 +
16003 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16004 +    data &outdata(drop= _NCL_  _TYPE_);
16005 +       %if &globalclusid ne %then %do;
16006 +        length GCluster $16;
16007 +        %end;
16008 +       set &indata;
16009 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16010 +       %if &globalclusid ne %then %do;
16011 +         GCluster = "GC&globalclusid";
16012 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16013 +         rename _NAME_ = Cluster;
16014 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16015 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16016 +
16017 +       %end;
16018 +       %else %do;
16019 +         _NAME_ = upcase(_NAME_);
16020 +         rename _NAME_ = Cluster;
16021 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16022 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16023 +
16024 +       %end;
16025 +     run;
16026 +    %if &RSquare eq Y %then %do;
16027 +     data corr_tmp;
16028 +          set &outdata;
16029 +     run;
16030 +     %let istart = 2;
16031 +     %if &globalclusid ne %then %let istart = 3;
16032 +     data &outdata;
16033 +          set &outdata;
16034 +          %let dsid = %sysfunc(open(work.corr_tmp));
16035 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16036 +          %do i =&istart %to &nvar;
16037 +            %let _name = %sysfunc(varname(&dsid, &i));
16038 +            %let _name_md = &_name.**2;
16039 +                &_name = &_name_md;
16040 +          %end;
16041 +      %let dsid= %sysfunc(close(&dsid));
16042 +      run;
16043 +      proc datasets lib = work nolist;
16044 +           delete corr_tmp;
16045 +      run;
16046 +    %end;
16047 +     quit;
16048 +%mend MakeClusStructCorrData;
16049 +
16050 +/*
16051 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16052 +*/
16053 +
16054 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16055 +
16056 +     /* The indata should be the outdata
16057 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16058 +
16059 +     proc sort data =&indata out=_tmpclusRsq;
16060 +     by cluster;
16061 +     run;
16062 +
16063 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16064 +      by cluster;
16065 +     run;
16066 +
16067 +     proc sort data=_tmpclusRsq;
16068 +        by _NAME_ COL1;
16069 +     run;
16070 +
16071 +     data _tmpclusRsq;
16072 +         length _NAME_ $32;
16073 +         set _tmpclusRsq; by _NAME_;
16074 +          _NAME_ = upcase(_NAME_);
16075 +          %if &ncluster ne 1 %then %do;
16076 +             if last._NAME_ then delete;
16077 +          %end;
16078 +          %else %do;
16079 +             COL1 = 0;
16080 +          %end;
16081 +     run;
16082 +     /* need to sort again */
16083 +     proc sort data=_tmpclusRsq;
16084 +        by _NAME_ COL1;
16085 +     run;
16086 +
16087 +     data &outdata;
16088 +         set _tmpclusRsq; by _NAME_;
16089 +         Cluster = upcase(Cluster);
16090 +         if last._NAME_ then output;
16091 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16092 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16093 +         rename COL1 = RSqWithNextClusComp;
16094 +         Cluster = upcase(Cluster);
16095 +         rename Cluster = ClosestCluster;
16096 +         *label  Cluster = "Next Closest Cluster";
16097 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16098 +         rename _NAME_ = Variable;
16099 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16100 +    run;
16101 +
16102 +
16103 +    %if &globalclusid ne %then %do;
16104 +    data &outdata;
16105 +       length GCluster $16;
16106 +       set &outdata;
16107 +       GCluster = "GC&globalclusid";
16108 +       run;
16109 +    %end;
16110 +    proc datasets lib = work nolist;
16111 +           delete _tmpclusRsq;
16112 +    run;
16113 +    quit;
16114 +%mend FindNextClosestClusByVar;
16115 +
16116 +
16117 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16118 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16119 +     proc sort data =&indata out=_tmpclusRsq;
16120 +     by cluster;
16121 +     run;
16122 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16123 +     by cluster;
16124 +     run;
16125 +     proc sort data=_tmpclusRsq;
16126 +        by _NAME_ col1;
16127 +     run;
16128 +     data _tmpclusRsq;
16129 +         length _NAME_ $32;
16130 +         set _tmpclusRsq; by _NAME_;
16131 +          _NAME_ = upcase(_NAME_);
16132 +          %if &ncluster ne 1 %then %do;
16133 +             if last._NAME_ then delete;
16134 +          %end;
16135 +          %else %do;
16136 +             COL1 = 0;
16137 +          %end;
16138 +     run;
16139 +     data &outdata;
16140 +         set _tmpclusRsq; by _NAME_;
16141 +         Cluster = upcase(Cluster);
16142 +         if last._NAME_ then output;
16143 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16144 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16145 +         rename COL1 = RSqWithNextClusComp;
16146 +         Cluster = upcase(Cluster);
16147 +         rename Cluster = ClosestCluster;
16148 +         *label  Cluster = "Next Closest Cluster";
16149 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16150 +         rename _NAME_ = Variable;
16151 +         *label  _NAME_ = "Variable";
16152 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16153 +
16154 +    run;
16155 +    %if &globalclusid ne %then %do;
16156 +    data &outdata;
16157 +       length GCluster $16;
16158 +       set &outdata;
16159 +       GCluster = "GC&globalclusid";
16160 +       run;
16161 +    %end;
16162 +
16163 +    proc datasets lib = work nolist;
16164 +           delete _tmpclusRsq;
16165 +    run;
16166 +
16167 +    quit;
16168 +%mend FindNextClosestClusByCluster;
16169 +
16170 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16171 +/*----
16172 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16173 +-----------*/
16174 +
16175 +proc sort data =&indata1;
16176 +    by Variable;
16177 +run;
16178 +proc sort data =&indata2;
16179 +    by Variable;
16180 +run;
16181 +data &outdata;
16182 +    merge &indata1 &indata2;
16183 +    by Variable;
16184 +    length Type $16;
16185 +    Type = 'Variable';
16186 +    *label Type ='Type';
16187 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16188 +run;
16189 +
16190 +
16191 +data &indata3;
16192 +    set  &indata3 ;
16193 +    length RSqWithOwnClusComp 8.;
16194 +    Cluster = Variable;
16195 +    RSqWithOwnClusComp = 1;
16196 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16197 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16198 +    length Type $16;
16199 +    Type = 'ClusterComp';
16200 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16201 +
16202 +;
16203 +run;
16204 +
16205 +proc sort data=&outdata;
16206 +    by Cluster;
16207 +run;
16208 +proc sort data =&indata3;
16209 +    by Cluster;
16210 +run;
16211 +
16212 +data &outdata;
16213 +     set &outdata &indata3;
16214 +     by Cluster;
16215 +run;
16216 +
16217 +
16218 +/* Create the Selected variable with all YES */
16219 +
16220 +data &outdata;
16221 +     set &outdata;
16222 +     length RsqRatio 8.;
16223 +     length Selected $8;
16224 +     *label RSqRatio = "1-R**2 Ratio";
16225 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16226 +     *label Selected = "Variable Selected";
16227 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16228 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16229 +     Selected ='YES';
16230 +     rename _LABEL_ = Label;
16231 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16232 +run;
16233 +
16234 +
16235 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16236 +        Just create the Selected variable with all YES at the step above
16237 + +------------------------------------------------------------------------------+
16238 +
16239 +proc sort data=&outdata;
16240 +    by Cluster RsqRatio;
16241 +run;
16242 +
16243 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16244 +data &outdata;
16245 +     set &outdata; by Cluster;
16246 +     length Selected $8;
16247 +     label Selected = "Variable Selected";
16248 +     if  first.Cluster then Selected ='Yes';
16249 +     else Selected = 'No';
16250 +    run;
16251 +%end;
16252 +%else %do;
16253 +data &outdata(drop = _var _varchange);
16254 +     set &outdata; retain _var 0; by Cluster;
16255 +     length Selected $8;
16256 +     label Selected = "Variable Selected";
16257 +     if first.Cluster then  _varchange = 0;
16258 +     else _varchange =1;
16259 +     if _var ne _varchange then  Selected  = 'Yes';
16260 +     else Selected = 'No';
16261 +     if last.cluster then  _var = 0;
16262 +     else _var = _varchange;
16263 +run;
16264 +%end;
16265 +
16266 +--------------------------------------------------------------*/
16267 +
16268 +quit;
16269 +%mend MakeVarClusResultTable;
16270 +
16271 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16272 +     proc sort data =&indata;
16273 +        by cluster;
16274 +     run;
16275 +     proc transpose data =&indata
16276 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16277 +          by cluster;
16278 +     run;
16279 +     data &outdata;
16280 +          set  &outdata;
16281 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16282 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16283 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16284 +     run;
16285 +     %if &globalclusid ne %then %do;
16286 +     data &outdata;
16287 +          Length GCluster $16;
16288 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16289 +          set  &outdata;
16290 +          GCluster ="GC&globalclusid.";
16291 +          run;
16292 +     %end;
16293 +
16294 +%Mend MakePlotDataFromCorrTable;
16295 +
16296 +
16297 +%macro MakeCorrelation(indata=,
16298 +                       outstat=_tmpoutstat,
16299 +                       corrmatrix=N,
16300 +                       outcorr=_tmpoutcorr,
16301 +                       includeclassvar=N,
16302 +                       target=,
16303 +                       freq=,
16304 +                       weight=);
16305 +   %if &target eq  %then %do;
16306 +
16307 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16308 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16309 +       %if &includeclassvar eq Y %then %do;
16310 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16311 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16312 +          %do i = 2 %to &nvar;
16313 +          %let varname = %sysfunc(varname(&dsid, &i));
16314 +          &varname
16315 +          %end;
16316 +       %end;
16317 +       ;
16318 +      %if &freq ne  %then %do;
16319 +          freq &freq;
16320 +      %end;
16321 +      %if &weight ne  %then %do;
16322 +          weight &weight;
16323 +      %end;
16324 +
16325 +      run;
16326 +      %if &corrmatrix eq Y %then %do;
16327 +      data  &outcorr (drop = _NCL_ _TYPE_);
16328 +           set  &outstat ;
16329 +           if _TYPE_ ='CORR' then output;
16330 +      run;
16331 +      %end;
16332 +    %end;
16333 +    %else %do;
16334 +       proc corr data=&indata outp=&outstat noprint;
16335 +            var
16336 +       %let dsid = %sysfunc(open(&indata));
16337 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16338 +          %do i = 1 %to &nvar;
16339 +              %let _name = %sysfunc(varname(&dsid, &i));
16340 +              %if &_name ne &target %then;
16341 +              &_name
16342 +           %end;
16343 +        %let dsid= %sysfunc(close(&dsid));
16344 +        ;
16345 +        with &target;
16346 +        run;
16347 +    %end;
16348 +    quit;
16349 +%mend MakeCorrelation;
16350 +
16351 +
16352 +%macro MakeCorrelationDistance(indata=,
16353 +                               outdata=,
16354 +                               rsquare = N
16355 +                               );
16356 +    data corr_tmp;
16357 +        set &indata;
16358 +        if _N_ = 1 then do;
16359 +           output;
16360 +           stop;
16361 +         end;
16362 +    run;
16363 +    %if &outdata ne  %then %let  _outdata = &outdata;
16364 +    %else %let _outdata = &indata;
16365 +
16366 +    data &_outdata;
16367 +         set &indata;
16368 +
16369 +         %let dsid = %sysfunc(open(work.corr_tmp));
16370 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16371 +          %do i = 2 %to &nvar;
16372 +              %let _name = %sysfunc(varname(&dsid, &i));
16373 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16374 +              %else  %let _name_md = &_name;
16375 +              &_name = 1- &_name_md;
16376 +          %end;
16377 +      %let dsid= %sysfunc(close(&dsid));
16378 +      run;
16379 +      proc datasets lib = work nolist;
16380 +           delete corr_tmp;
16381 +      run;
16382 +      quit;
16383 +  %mend MakeCorrelationDistance;
16384 +
16385 +
16386 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16387 +                                   rsquare = N
16388 +                                   );
16389 +    data corr_tmp;
16390 +        set &indata;
16391 +    run;
16392 +    proc sql noprint;
16393 +           update &indata
16394 +           set
16395 +     %let dsid = %sysfunc(open(work.corr_tmp));
16396 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16397 +          %do i = 4 %to &nvar;
16398 +          %let _name = %sysfunc(varname(&dsid, &i));
16399 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16400 +            %else  %let _name_md = &_name;
16401 +            %if &i < &nvar %then %do;
16402 +               &_name = 1- &_name_md ,
16403 +            %end;
16404 +            %else %do;
16405 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16406 +            %end;
16407 +          %end;
16408 +      %let dsid= %sysfunc(close(&dsid));
16409 +
16410 +      select * from &indata;
16411 +      run;
16412 +     data &indata( drop = _NCL_);
16413 +           set &indata;
16414 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16415 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16416 +     run;
16417 +     data &indata(DROP = _NCL_);
16418 +           set &indata;
16419 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16420 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16421 +           rename _NAME_ = _VAR_;
16422 +     run;
16423 +     proc datasets lib = work nolist;
16424 +           delete corr_tmp;
16425 +     run;
16426 +     quit;
16427 + %mend UpdateOutStatCorrToDistance;
16428 +
16429 +
16430 +%macro HierClusWithCorr(indata= ,
16431 +                        ncluster=,
16432 +                        method = Ward,
16433 +                        outtree = _outtree,
16434 +                        idvar =_VAR_,
16435 +                        outdata=,
16436 +                        rescore = N,
16437 +                        newncluster=
16438 +                        );
16439 +      %global &newncluster;
16440 +      %if &rescore ne Y %then %do;
16441 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16442 +                   method=&method outtree=&outtree noprint;
16443 +           id &idvar;
16444 +      run;
16445 +      %end;
16446 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16447 +      run;
16448 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16449 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16450 +      run;
16451 +      data _outcontent;
16452 +          set _outcontent;
16453 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16454 +          index = 1;
16455 +          rename NAME = _NAME_;
16456 +      run;
16457 +      proc sort data=_outcontent;
16458 +          by _NAME_;
16459 +      run;
16460 +      proc sort data =&outdata;
16461 +           by _NAME_;
16462 +      run;
16463 +      data &outdata(drop=index);
16464 +          merge &outdata _outcontent;
16465 +          by _NAME_;
16466 +          if index = . then delete;
16467 +      run;
16468 +      /*-----------------------------------------------------------*/
16469 +      data &outdata;
16470 +           length CLUSNAME $16;
16471 +           set &outdata;
16472 +           if CLUSTER > &ncluster then delete;
16473 +           CLUSNAME='GC'||strip(CLUSTER);
16474 +           *label CLUSNAME = "Cluster Name";
16475 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16476 +           rename _NAME_ = VARIABLE ;
16477 +           *label _NAME_ = "Variable";
16478 +           *label CLUSTER = "Cluster";
16479 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16480 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16481 +      run;
16482 +      proc sort data=&outdata out=&outdata;
16483 +           by CLUSTER;
16484 +      run;
16485 +      proc means data =&outdata noprint;
16486 +           output out=_meanout;
16487 +      run;
16488 +      data _null_;
16489 +            set _meanout;
16490 +            if strip(_STAT_) eq 'MAX' then do;
16491 +            call symput("&newncluster", CLUSTER);
16492 +            stop;
16493 +            end;
16494 +      run;
16495 +
16496 +      proc datasets lib = work nolist;
16497 +           delete _outcontent _meanout;
16498 +      run;
16499 +      quit;
16500 +%mend  HierClusWithCorr;
16501 +
16502 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16503 +
16504 +     data _tmpindata;
16505 +          set &indata;
16506 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16507 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16508 +          if _TYPE_ = 'STD' then _NAME_='STD';
16509 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16510 +          DROP _TYPE_ _NCL_;
16511 +     run;
16512 +
16513 +     filename _file_  "&fileRef";
16514 +
16515 +     data _null_;
16516 +        FILE _file_ MOD;
16517 +        put ' ';
16518 +        put "/*-------------------------------------------------*/";
16519 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16520 +        put "/*-------------------------------------------------*/";
16521 +        put ' ';
16522 +        %let dsid = %sysfunc(open(work._tmpindata));
16523 +
16524 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16525 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16526 +        %let k = 1;
16527 +        %do %while(^%sysfunc(fetch(&dsid)));
16528 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16529 +               %if &k > 2 %then %do;
16530 +                %let cn = %eval(&k-2);
16531 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16532 +                %end;
16533 +                %let k = %eval(&k+1);
16534 +
16535 +        %end;
16536 +        %let rc = %sysfunc(rewind(&dsid));
16537 +
16538 +        %do j= 2 %to &nvar;
16539 +            %let _varname = %sysfunc(varname(&dsid, &j));
16540 +            %do %while(^%sysfunc(fetch(&dsid)));
16541 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16542 +                %if &_name = MEAN %then
16543 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16544 +                %else %if &_name = STD %then
16545 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16546 +                %else %do;
16547 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16548 +                      %let abscoeff = %sysfunc(abs(&coeff));
16549 +                          %if &abscoeff >  0 %then %do;
16550 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16551 +                           %end;
16552 +                 %end;
16553 +             %end;
16554 +             %let rc = %sysfunc(rewind(&dsid));
16555 +         %end;
16556 +
16557 +        %let dsid= %sysfunc(close(&dsid));
16558 +
16559 +     run;
16560 +
16561 +     filename _file_;
16562 +     proc datasets lib = work nolist;
16563 +           delete _tmpindata;
16564 +     run;
16565 +     quit;
16566 +%mend CreateScoreCode2;
16567 +
16568 +
16569 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16570 +
16571 +     /*--- Build Code to Modify Metadata ---*/
16572 +     filename X "&deltacodefile";
16573 +     data _null_;
16574 +        FILE X;
16575 +        set &groupds end=eof;
16576 +        if _N_=1 then do;
16577 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16578 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16579 +           %end;
16580 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16581 +           put "if upcase(strip(NAME)) in (";
16582 +        end;
16583 +        if Strip(upcase(Selected)) eq 'YES' then do;
16584 +           string = '"'!!trim(left(VARIABLE))!!'"';
16585 +           put string;
16586 +        end;
16587 +        if eof then do;
16588 +           put ') then ROLE="INPUT";';
16589 +           put 'else ROLE="REJECTED";';
16590 +           put 'end;';
16591 +
16592 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16593 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16594 +           %end;
16595 +        end;
16596 +     run;
16597 +     quit;
16598 +
16599 +     filename X;
16600 +     quit;
16601 +%mend MakeDeltaCode2;
16602 +
16603 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16604 +  %global &ngc;
16605 +  data _null_;
16606 +  %if &indata ne %then %do;
16607 +      %let dsid = %sysfunc(open(&indata));
16608 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16609 +      %let dsid = %sysfunc(close(&dsid));
16610 +  %end;
16611 +  %else %do;
16612 +       %let nvar = %eval(&ninput+&ndummy); ;
16613 +  %end;
16614 +  %let numgc = %eval(&nvar/&div+2);
16615 +  %let &ngc = &numgc;
16616 +   run;
16617 +  quit;
16618 +%mend getInitialGClusterNumber;
16619 +
16620 +
16621 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16622 +data &outlink(drop = Selected);
16623 +     set &indata;
16624 +     LINKID = _N_;
16625 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16626 +run;
16627 +data &outnode(keep=NODEID TYPE LABEL);
16628 +    set &indata;
16629 +    length TYPE $16;
16630 +    rename VARIABLE = NODEID;
16631 +    *label  CLUSNAME="Node ID";
16632 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16633 +    TYPE = "VARIABLE";
16634 +    *label TYPE = "Node Type";
16635 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16636 +    run;
16637 +data _tmp(keep=NODEID TYPE LABEL);
16638 +    set &indata;
16639 +    length TYPE $16;
16640 +    rename CLUSNAME = NODEID;
16641 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16642 +    TYPE = "GCLUSTER";
16643 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16644 +    run;
16645 +proc sort data=_tmp;
16646 +    by NODEID;
16647 +run;
16648 +data _tmp;
16649 +    set _tmp; by NODEID;
16650 +    if first.NODEID then output;
16651 +run;
16652 +proc sort data=&outnode;
16653 +    by NODEID;
16654 +run;
16655 +data  &outnode;
16656 +    set _tmp &outnode;
16657 +run;
16658 +proc datasets lib = work nolist;
16659 +     delete _tmp;
16660 +run;
16661 +quit;
16662 +%mend MakeGobalConstellData;
16663 +
16664 +/* Make contellation plot data among GCLUSTERS */
16665 +
16666 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16667 +
16668 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16669 +     set &indata;
16670 +     LINKID = _N_;
16671 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16672 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16673 +     end;
16674 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16675 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16676 +     end;
16677 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16678 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16679 +    end;
16680 +run;
16681 +
16682 +data _tmp_outrsquare;
16683 +        set &inoutrsq;
16684 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16685 +run;
16686 +
16687 +proc freq data =_tmp_outrsquare noprint;
16688 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16689 +run;
16690 +
16691 +data &outnode(keep=_NAME_ TYPE LABEL);
16692 +    set &outlink;
16693 +    length TYPE $16;
16694 +    length LABEL $100;
16695 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16696 +
16697 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16698 +    TYPE = "GCLUSTER";
16699 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16700 +    end;
16701 +    else do;
16702 +    TYPE= "ROOT";
16703 +    LABEL= _NAME_;
16704 +    end;
16705 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16706 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16707 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16708 +    run;
16709 +
16710 +proc sort data=&outnode;
16711 +     by _NAME_;
16712 +proc sort data=_tmp_GCLUSFREQ;
16713 +     by _NAME_;
16714 +run;
16715 +
16716 +data  &outnode;
16717 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16718 +     if COUNT=. then COUNT=1;
16719 +run;
16720 +
16721 +proc datasets lib = work nolist;
16722 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16723 +run;
16724 +
16725 +quit;
16726 +%Mend MakeGClusterConstData;
16727 +
16728 +
16729 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16730 +
16731 +    data _gscoretmpds;
16732 +          set &indata;
16733 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16734 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16735 +          if _TYPE_ = 'STD' then _NAME_='STD';
16736 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16737 +          DROP _TYPE_ _NCL_;
16738 +     run;
16739 +
16740 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16741 +        GCluster Component &globalclusid ------ */
16742 +
16743 +    filename _file_  "&fileref";
16744 +
16745 +    data _null_;
16746 +        %if &globalclusid eq 1 %then %do;
16747 +          FILE _file_;
16748 +        %end;
16749 +        %else %do;
16750 +          FILE _file_ MOD;
16751 +        %end;
16752 +
16753 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16754 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16755 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16756 +
16757 +        %let k = 1;
16758 +        %do %while(^%sysfunc(fetch(&dsid)));
16759 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16760 +                %if &k > 2 %then %do;
16761 +                put "&_name = 0 ; ";
16762 +                %end;
16763 +                %let k = %eval(&k+1);
16764 +        %end;
16765 +
16766 +        %let rc = %sysfunc(rewind(&dsid));
16767 +        %do i= 2 %to &nvar;
16768 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16769 +            %do %while(^%sysfunc(fetch(&dsid)));
16770 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16771 +                %if &_name = MEAN %then
16772 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16773 +                %else %if &_name = STD %then
16774 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16775 +                %else %do;
16776 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16777 +                      %let abscoeff = %sysfunc(abs(&coeff));
16778 +                          %if &abscoeff >  0 %then %do;
16779 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16780 +                           %end;
16781 +                 %end;
16782 +             %end;
16783 +             %let rc = %sysfunc(rewind(&dsid));
16784 +
16785 +         %end;
16786 +
16787 +        %let dsid= %sysfunc(close(&dsid));
16788 +       run;
16789 +
16790 +
16791 +       proc datasets lib=work nolist;
16792 +            delete _gscoretmpds;
16793 +       run;
16794 +      quit;
16795 +
16796 +%mend CreateGClusterScoreCode;
16797 +
16798 +
16799 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16800 +
16801 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16802 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16803 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16804 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16805 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16806 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16807 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16808 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16809 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16810 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16811 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16812 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16813 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16814 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16815 +
16816 +   filename gsfile "&gscorecode";
16817 +
16818 +   data &EM_USER_GSCORE;
16819 +             set &indata;
16820 +             %include  gsfile;
16821 +        keep
16822 +        %do i=1 %to &ngcluster;
16823 +         %let gcvarname = GC&i;
16824 +         &gcvarname
16825 +        %end;
16826 +     ;
16827 +   run;
16828 +
16829 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16830 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16831 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16832 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16833 +    noprint  ;
16834 +     var
16835 +       %do i=1 %to &ngcluster;
16836 +         %let gcvarname = GC&i;
16837 +         &gcvarname
16838 +        %end;
16839 +   ;
16840 +   run;
16841 +
16842 +
16843 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16844 +   data &EM_USER_GSCORECORRPLOT ;
16845 +        set &EM_USER_GSCORECORRPLOT;
16846 +        rename _X_ = X;
16847 +        rename _Y_ = Y;
16848 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16849 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16850 +   run;
16851 +
16852 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16853 +
16854 +   data &EM_USER_GSCORETREE;
16855 +        length _NAME_ $32;
16856 +        length _LABEL_ $100;
16857 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16858 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16859 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16860 +        end;else do;
16861 +         _LABEL_ = _NAME_;
16862 +        end;
16863 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16864 +
16865 +   run;
16866 +
16867 +   quit;
16868 +
16869 +%mend MakeGClusterCorrelation;
16870 +
16871 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16872 +
16873 +
16874 +%macro train;
16875 +
16876 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16877 +   %include temp;
16878 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16879 +   %include temp;
16880 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16881 +   %include temp;
16882 +   filename temp;
16883 +
16884 +   %let VARCLUS_MAXNUMOBS = 100000;
16885 +   %let VARCLUS_MAXNUMVAR = 200;
16886 +   %let trainnum = 0;
16887 +   %let error = 0;
16888 +
16889 +   %if &EM_IMPORT_DATA eq %then %do;
16890 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16891 +       %let  error = 1;
16892 +       %goto endtrain;
16893 +   %end;
16894 +
16895 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16896 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16897 +        %let  error = 1;
16898 +        %goto endline;
16899 +    %end;
16900 +
16901 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16902 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16903 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16904 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16905 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16906 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16907 +
16908 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16909 +        %if  &_num_input_total < 2 %then %do;
16910 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16911 +            %let error = 2;
16912 +            %goto endtrain;
16913 +        %end;
16914 +   %end;
16915 +   %else %do;
16916 +         %if  &_num_input_interval < 2 %then %do;
16917 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16918 +         %let error = 2;
16919 +         %goto endtrain;
16920 +         %end;
16921 +   %end;
16922 +
16923 +   %em_checkerror();
16924 +
16925 +   %if &EMEXCEPTIONSTRING ne %then %do;
16926 +       %goto endtrain;
16927 +   %end;
16928 +
16929 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16930 +
16931 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16932 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16933 +                             outvar=&EM_USER_OUTDUMMY,
16934 +                             outdata=_newtrainds,
16935 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16936 +
16937 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16938 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16939 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16940 +                proc datasets lib=work nolist;
16941 +                delete  _newtrainds;
16942 +                run;
16943 +                quit;
16944 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16945 +                %let error = 3;
16946 +               %goto endtrain;
16947 +            %end;
16948 +        %end;
16949 +
16950 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16951 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16952 +
16953 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16954 +                %let trainnum = 2;
16955 +            %end;
16956 +            %else %do;
16957 +                %let trainnum = 1;
16958 +            %end;
16959 +        %end;
16960 +    %end;
16961 +    %else %do;
16962 +
16963 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16964 +
16965 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
16966 +
16967 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16968 +
16969 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16970 +                  %let error = 3;
16971 +                 %goto endtrain;
16972 +            %end;
16973 +        %end;
16974 +
16975 +
16976 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16977 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
16978 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
16979 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
16980 +                %let trainnum = 2;
16981 +            %end;
16982 +            %else %do;
16983 +                %let trainnum = 1;
16984 +            %end;
16985 +        %end;
16986 +
16987 +   %end;
16988 +
16989 +    %em_checkerror();
16990 +
16991 +    %if &EMEXCEPTIONSTRING ne %then %do;
16992 +       %let error = 4;
16993 +       %goto endtrain;
16994 +    %end;
16995 +
16996 +    %CreateVarclusMeta(trainnum=&trainnum);
16997 +
16998 +    %if &error > 0 %then  %goto endtrain;
16999 +
17000 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17001 +
17002 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17003 +           %train1;
17004 +       %end;
17005 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17006 +           %train2;
17007 +       %end;
17008 +
17009 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17010 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17011 +      %em_copyfile(infref=_in, outfref=_out);
17012 +      filename _in;
17013 +      filename _out;
17014 +
17015 +
17016 +   %endtrain:
17017 +
17018 +
17019 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17021 +%macro VarClus(indata=,
17022 +               outstat=,
17023 +               outtree=,
17024 +               vars=,
17025 +               freq=,
17026 +               weight=,
17027 +               includeclassvar=
17028 +               );
17030 +   %if &vars eq %then
17031 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17033 +        /*Add by ruzhan, May 28, 2013*/
17034 +        ods graphics on;
17035 +        %let odspath =;
17036 +        data _null_;
17037 +            path = pathname('WORK');
17038 +            call symput('odspath', path);
17039 +        run;
17040 +        ods listing gpath="&odspath";
17041 +        ods output DENDROGRAM=&outtree;
17042 +       proc varclus data = &indata outstat= &outstat
17043 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17044 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17045 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17046 +        /*-----------------------
17047 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17048 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17049 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17050 +       %end;
17051 +       -------------------------*/
17052 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17053 +            maxc = &EM_PROPERTY_MAXCLUS
17054 +       %end;
17056 +       /*------------------------------------------------------------------------------------------------------
17057 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17058 +        ------------------------------------------------------------------------------------------------------*/
17060 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17061 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17062 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17063 +       %end;
17065 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17066 +            proportion = &EM_PROPERTY_PROPORTION
17067 +       %end;
17068 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17069 +               summary
17070 +       %end;
17072 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17073 +           short
17074 +       %end;
17075 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17076 +           corr trace simple
17077 +       %end;
17078 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17079 +          noprint
17080 +       %end;
17081 +        /*Comment out by ruzhan, May 28, 2013*/
17082 +       /*       outtree=&outtree*/
17083 +       ;
17084 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17086 +      %if &includeclassvar eq Y %then %do;
17087 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17088 +          %if &dsid > 0 %then %do;
17089 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17090 +              %do i = 2 %to &nvar;
17091 +                  %let varname = %sysfunc(varname(&dsid, &i));
17092 +                   &varname
17093 +              %end;
17095 +          %end;
17096 +      %end;
17098 +      ;
17099 +      /*------------------------
17100 +      %if &freq ne  %then %do;
17101 +          freq &freq;
17102 +      %end;
17103 +      %if &weight ne  %then %do;
17104 +          weight &weight;
17105 +      %end;
17106 +      ----------------------------*/
17107 +      %if %EM_FREQ ne %then %do;
17108 +           Freq %EM_FREQ;
17109 +      %end;
17110 +      ;
17111 +    run;
17112 +    ods graphics off;
17113 +    %endline:
17114 +    quit;
17115 +%mend VarClus;
17117 +%macro Train1;
17119 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17120 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17121 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17122 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17123 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17124 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17125 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17126 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17127 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17128 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17129 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17130 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17131 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17133 +   /*
17134 +     %let VARCLUS_MAXNUMOBS = 100;
17135 +     %let VARCLUS_MAXNUMVAR = 200;
17136 +   */
17138 +   /* Train
17140 +   %if &EM_IMPORT_DATA eq %then %do;
17141 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17142 +       %goto endtrain1;
17143 +   %end;
17145 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17146 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17147 +        %goto endtrain1;
17148 +   %end;
17149 +   */
17150 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17151 +       /* moved this to pretrain ------------
17153 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17154 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17155 +                             outvar=&EM_USER_OUTDUMMY,
17156 +                             outdata=_newtrainds,
17157 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17159 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17160 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17161 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17162 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17163 +                %goto endtrain;
17164 +            %end;
17165 +        %end;
17167 +        +-------------------------------------*/
17169 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17170 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17171 +          There is no _newtrainds */
17172 +         %VarClus( indata=&EM_IMPORT_DATA,
17173 +                  outstat=&EM_USER_OUTSTAT,
17174 +                  outtree = &EM_USER_OUTTREE,
17175 +                  includeclassvar=N
17176 +                 );
17177 +        %end;
17178 +        %else %do;
17179 +        %VarClus( indata=_newtrainds,
17180 +                  outstat=&EM_USER_OUTSTAT,
17181 +                  outtree = &EM_USER_OUTTREE,
17182 +                  includeclassvar=Y
17183 +                 );
17184 +         proc datasets lib=work nolist;
17185 +              delete  _newtrainds;
17186 +         run;
17187 +         %end;
17188 +    %end;
17189 +    %else %do;
17191 +        /*----- moved this to pretrain ------------
17192 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17193 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17194 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17195 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17196 +                 %goto endtrain;
17197 +            %end;
17198 +        %end;
17199 +        +-------------------------------------*/
17201 +        %VarClus(indata=&EM_IMPORT_DATA,
17202 +                  outstat=&EM_USER_OUTSTAT,
17203 +                  outtree =&EM_USER_OUTTREE,
17204 +                  includeclassvar=N
17205 +               );
17207 +   %end;
17209 +   %em_checkerror();
17211 +   %if &EMEXCEPTIONSTRING ne %then %do;
17212 +       %goto endtrain1;
17213 +   %end;
17214 +    /*
17215 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17216 +    */
17218 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17220 +    %let gid=;
17222 +    /*--- To make the main result table ----------------------*/
17224 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17225 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17226 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17227 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17228 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17229 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17231 +   /* Inter Cluster Correlation Plot ------------------------*/
17233 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17234 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17236 +   /* Create some other data sets for results ----*/
17238 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17239 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17240 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17242 +  /*---- move this to Score action ------------
17243 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17244 +   */
17246 +   /* create score code at training time */
17247 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17248 +   %endtrain1:
17249 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17252 +%macro VarClus2( indata=,
17253 +                 outdata=,
17254 +                 outstat =outstat,
17255 +                 outrsquare=outrsquare,
17256 +                 outtree = outtree,
17257 +                 outclusstruct = outclusstruct,
17258 +                 outcluscorr =outcluscorr,
17259 +                 outcluscorrplot =outcluscorrplot,
17260 +                 outclusrsquare =outclusrsquare,
17261 +                 outstatplot = outstatplot,
17262 +                 outcorr = outcorr,
17263 +                 outcorrplot = outcorrplot,
17264 +                 clusdata=,
17265 +                 outnode=outnode,
17266 +                 outlink=outlink,
17267 +                 ngroup =1  );
17268 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17269 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17270 +              %goto endline;
17271 +         %end;
17273 +        %global numglobalcluster;
17274 +        %let  numglobalcluster = &ngroup;
17275 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17276 +        %do vci =1 %to &ngroup;
17277 +           data tmp_clusdata;
17278 +                set &clusdata;
17279 +                if CLUSTER ne &vci then delete;
17280 +           run;
17281 +           %let outstatds = &outstat.&vci;
17282 +           %let outrsquareds = &outrsquare.&vci;
17283 +           %let outtreeds = &outtree.&vci;
17284 +           %let outclusstuctds = &outclusstruct.&vci;
17285 +           %let outcluscorrds = &outcluscorr.&vci;
17286 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17287 +           %let outclusrsquareds = &outclussquare.&vci;
17288 +           %let outstatplotds = &outstatplot.&vci;
17289 +           %let outcorrds = &outcorr.&vci;
17290 +           %let outcorrplotds = &outcorrplot.&vci;
17291 +           %let outnodeds = &outnode.&vci;
17292 +           %let outlinkds = &outlink.&vci;
17294 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17295 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17296 +           %let emuseroutstat = &EM_USER_&outstatds;
17298 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17299 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17300 +           %let emuserouttree = &EM_USER_&outtreeds;
17302 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17303 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17304 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17306 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17307 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17308 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17310 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17311 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17312 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17314 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17315 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17316 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17318 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17319 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17320 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17322 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17323 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17324 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17326 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17327 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17328 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17330 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17331 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17332 +           %let emuseroutnode = &EM_USER_&outnodeds;
17334 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17335 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17336 +           %let emuseroutlink = &EM_USER_&outlinkds;
17338 +           /*Add by ruzhan, May 28, 2013*/
17339 +           ods graphics on;
17340 +            %let odspath =;
17341 +            data _null_;
17342 +                path = pathname('WORK');
17343 +                call symput('odspath', path);
17344 +            run;
17345 +            ods listing gpath="&odspath";
17347 +           ods output DENDROGRAM=&emuserouttree;
17349 +           proc varclus data=&indata outstat=&emuseroutstat
17350 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17351 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17352 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17353 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17354 +                  maxc=&EM_PROPERTY_MAXCLUS
17355 +           %end;
17357 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17358 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17359 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17360 +            %end;
17362 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17363 +                proportion = &EM_PROPERTY_PROPORTION
17364 +           %end;
17365 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17366 +               summary
17367 +           %end;
17368 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17369 +               short
17370 +           %end;
17371 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17372 +               corr trace simple
17373 +           %end;
17374 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17375 +               noprint
17376 +           %end;
17377 +            /*Comment out by ruzhan, May 28, 2013*/
17378 +              /*outtree=&emuserouttree*/
17379 +           ;
17380 +           var
17381 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17382 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17383 +                %do %while(^%sysfunc(fetch(&dsid)));
17384 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17385 +                    &_varname
17386 +                %end;
17387 +            %let dsid = %sysfunc(close(&dsid));
17388 +           ;
17389 +           %if %EM_FREQ ne %then %do;
17390 +           Freq %EM_FREQ;
17391 +           %end;
17392 +           run;
17393 +            ods graphics off;
17394 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17396 +            %let gid=&vci;
17397 +            /*--- To make the main result table ----------------------*/
17398 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17399 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17400 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17401 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17402 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17403 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17405 +            /* Inter Cluster Correlation Plot ------------------------*/
17407 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17408 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17410 +           /* Create some other data sets for results ---------------*/
17412 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17413 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17414 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17416 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17418 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17420 +           %if &vci = 1 %then %do;
17421 +           data &EM_USER_OUTRSQUARE;
17422 +                set &emuseroutrsquare;
17423 +           run;
17424 +           %end;
17425 +           %else %do;
17426 +           data &EM_USER_OUTRSQUARE;
17427 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17428 +           run;
17429 +           %end;
17430 +           quit;
17431 +       %end;
17433 +       /*---- move this to Score action ------------
17434 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17435 +       */
17437 +       /* Make Score Gcluster component & correlation  */
17438 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17440 +       quit;
17441 +       %endline:
17442 +%mend VarClus2;
17445 +%macro Train2;
17447 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17448 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17449 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17450 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17451 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17452 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17453 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17454 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17455 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17456 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17457 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17458 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17459 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17460 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17461 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17462 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17463 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17464 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17468 +    /* Train */
17470 +   /* moved to pretrain ------------
17472 +   %if &EM_IMPORT_DATA eq %then %do;
17473 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17474 +       %goto endtrain2;
17475 +   %end;
17477 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17478 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17479 +        %goto endtrain2;
17480 +   %end;
17481 +   +-------------------------------------------*/
17483 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17486 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17488 +        /*----- moved to pretrain ------------
17490 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17491 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17492 +                             outvar=&EM_USER_OUTDUMMY,
17493 +                             outdata=_newtrainds,
17494 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17495 +                              ndummyvars=_ndummyvars
17496 +                            );
17498 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17499 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17500 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17501 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17502 +                %goto endtrain;
17503 +            %end;
17504 +        %end;
17506 +        +---------------------------------------*/
17507 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17508 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17509 +          There is no _newtrainds */
17510 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17511 +                             outstat=&EM_USER_GOUTSTAT,
17512 +                             corrmatrix=Y,
17513 +                             outcorr=&EM_USER_GOUTCORR,
17514 +                             includeclassvar=N,
17515 +                             freq =%EM_FREQ
17516 +                          );
17517 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17519 +        %end;
17520 +        %else %do;
17521 +         %MakeCorrelation(   indata=_newtrainds,
17522 +                             outstat=&EM_USER_GOUTSTAT,
17523 +                             corrmatrix=Y,
17524 +                             outcorr=&EM_USER_GOUTCORR,
17525 +                             includeclassvar=Y,
17526 +                             freq =%EM_FREQ
17527 +                          );
17528 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17530 +        %end;
17532 +    %end;
17533 +    %else %do;
17535 +        /* moved to pretrain -------------------
17537 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17538 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17539 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17540 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17541 +                %goto endtrain;
17542 +            %end;
17543 +        %end;
17544 +         +------------------------------------------*/
17546 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17547 +                          outstat=&EM_USER_GOUTSTAT,
17548 +                          corrmatrix=Y,
17549 +                          outcorr=&EM_USER_GOUTCORR,
17550 +                          includeclassvar=N,
17551 +                          freq =%EM_FREQ
17552 +                          );
17553 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17554 +    %end;
17556 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17557 +                                rsquare = N
17558 +                                );
17559 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17560 +                      ncluster=&_ngc,
17561 +                      method = Ward,
17562 +                      outtree =&EM_USER_GOUTTREE,
17563 +                      idvar = _VAR_,
17564 +                      outdata=&EM_USER_GOUTGROUP,
17565 +                      rescore = N,
17566 +                      newncluster=_newnclus
17567 +                        );
17569 +   /* store the number of global cluster */
17571 +   data &EM_USER_VARCLUSMETA;
17572 +        set &EM_USER_VARCLUSMETA;
17573 +        NGCluster = &_newnclus;
17574 +   run;
17576 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17578 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17579 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17580 +            %VarClus2(indata=&EM_IMPORT_DATA,
17581 +                 clusdata=&EM_USER_GOUTGROUP,
17582 +                 ngroup=&_newnclus);
17583 +         %end;
17584 +         %else %do;
17585 +             %VarClus2(indata=_newtrainds,
17586 +                 clusdata=&EM_USER_GOUTGROUP,
17587 +                 ngroup=&_newnclus);
17589 +         %end;
17591 +   %end;
17592 +   %else %do;
17593 +       %VarClus2(indata=&EM_IMPORT_DATA,
17594 +                 clusdata=&EM_USER_GOUTGROUP,
17595 +                 ngroup=&_newnclus);
17596 +   %end;
17598 +   %em_checkerror();
17599 +   %if &EMEXCEPTIONSTRING ne %then %do;
17600 +       %put &em_codebar;
17601 +       %put Error: Variable clustering failed.;
17602 +       %put &em_codebar;
17603 +       %goto endtrain2;
17604 +   %end;
17605 +   /*
17606 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17607 +   */
17608 +   %endtrain2:
17609 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17611 +%macro em_copyfile(infref=, outfref=, append=N);
17612 +
17613 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17614 +
17615 +       %let omode =;
17616 +       %if &append=Y %then
17617 +           %let omode = MOD;
17618 +       data _null_;
17619 +          length line $20000;
17620 +          file &outfref &omode lrecl=20000;
17621 +          fid=fopen("&infref",'i',20000,'v');
17622 +          if fid > 0  then do;
17623 +             do while(^fread(fid));
17624 +                rlen = frlen(fid);
17625 +                rc= fget(fid,line,20000);
17626 +                start = length(line)-length(left(line))+1;
17627 +                line=strip(line);
17628 +                put @start line;
17629 +             end;
17630 +             if fid > 0  then rc=fclose(fid);
17631 +          end;
17632 +       run;
17633 +
17634 +   %end;
17635 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
17636  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:97
NOTE: View EMWS5.IDS5_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 28 observations read from the data set FINALIB.PETRONAS_CSV.
NOTE: There were 28 observations read from the data set EMWS5.IDS5_DATA.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
17637  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: View EMWS5.IDS5_DATA.VIEW used (Total process time):
      real time           1.22 seconds
      cpu time            0.17 seconds
 
NOTE: There were 28 observations read from the data set FINALIB.PETRONAS_CSV.
NOTE: The data set EMWS5.VARCLUS_OUTTREE has 9 observations and 3 variables.
NOTE: The data set EMWS5.VARCLUS_OUTSTAT has 28 observations and 9 variables.
NOTE: The PROCEDURE VARCLUS printed page 2.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           1.26 seconds
      cpu time            0.17 seconds
 
 
 
17638  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 28 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 28 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 28 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 6 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 6 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 28 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSSTRUCT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSSTRUCT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 12 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._OWNRSQ.
NOTE: There were 6 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      47007:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      47007:84
NOTE: There were 28 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS5.VARCLUS_OUTSTATPLOT has 6 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _label_ is uninitialized.
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTSTATPLOT has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTSTATPLOT has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS5.VARCLUS_OUTCORR has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCORR has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS5.VARCLUS_OUTCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 36 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _LABEL_ is uninitialized.
NOTE: There were 36 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 36 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 36 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 36 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 36 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTLINK has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTNODE has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTSTATSCORE has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Dec2019:15:48:15,
      Create Time=19Dec2019:15:48:15
 
NOTE: 13 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Dec2019:15:48:15,
      Create Time=19Dec2019:15:48:15
 
NOTE: 13 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17639  *------------------------------------------------------------*;
17640  * End TRAIN: VarClus;
17641  *------------------------------------------------------------*;
17642
 
17643  *------------------------------------------------------------*;
17644  * Close any missing semi colons;
17645  *------------------------------------------------------------*;
17646  ;
17647  ;
17648  ;
17649  ;
17650  quit;
17651  *------------------------------------------------------------*;
17652  * Close any unbalanced quotes;
17653  *------------------------------------------------------------*;
17654  /*; *"; *'; */
17655  ;
17656  run;
17657  quit;
17658  /* Reset EM Options */
17659  options formchar="|----|+|---+=|-/\<>*";
17660  options nocenter ls=256 ps=10000;
17661  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                December 19, 2019
Time:                15:48:16
*------------------------------------------------------------*
17763  %let EMEXCEPTIONSTRING=;
17764  *------------------------------------------------------------*;
17765  * SCORE: VarClus;
17766  *------------------------------------------------------------*;
17767  %let EM_ACTION = SCORE;
17768  %let syscc = 0;
17769
17770  %macro main;
17771
17772     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17773     %include temp;
17774     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17775     %include temp;
17776     filename temp;
17777
17778    %SetProperties;
17779
17780     %if %upcase(&EM_ACTION) = CREATE %then %do;
17781         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17782         %include temp;
17783         filename temp;
17784         %create;
17785     %end;
17786     %else
17787     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17788          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17789             %include temp;
17790             filename temp;
17791             %train;
17792     %end;
17793     %else
17794     %if %upcase(&EM_ACTION) = SCORE %then %do;
17795             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17796             %include temp;
17797             filename temp;
17798             %score;
17799     %end;
17800     %else
17801     %if %upcase(&EM_ACTION) = REPORT %then %do;
17802             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17803             %include temp;
17804             filename temp;
17805             %report;
17806     %end;
17807     /*
17808     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17809         %put 'OPENING TABLE';
17810     %end;
17811     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17812         %put 'CLOSE TABLE';
17813     %end;
17814     */
17815  %mend main;
17816  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17817 +
17818 +/* Initialize property macro variables */
17819 +%macro SetProperties;
17820 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17821 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17822 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17823 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17824 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17825 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17826 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17827 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17828 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17829 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17830 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17831 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17832 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17833 +
17834 +%mend SetProperties;
17835 +
17836 +%Macro MakeDummyVariables(indata=,
17837 +                          outvar=,
17838 +                          outdata=,
17839 +                          fileref=,
17840 +                          recreatecmeta=N, /* optional */
17841 +                          incmeta=,     /* optional */
17842 +                          outcmeta=,    /* optional */
17843 +                          ndummyvars=_ndummyvars
17844 +                          );
17845 +    %global &ndummyvars;
17846 +
17847 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17848 +       class
17849 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17850 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17851 +    ;
17852 +    run;
17853 +    %let &ndummyvars = 0;
17854 +    data _null_;
17855 +    %let dsid = %sysfunc(open(work._classout));
17856 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17857 +    %let dsid = %sysfunc(close(&dsid));
17858 +    run;
17859 +
17860 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17861 +       input
17862 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17863 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17864 +        / level=nominal stdize=no;
17865 +       make outvar = &outvar;
17866 +       score data = &indata out =&outdata;
17867 +       code  file=  "&fileref";
17868 +    run;
17869 +    %if &recreatecmeta eq Y %then %do;
17870 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17871 +    data _tmpds;
17872 +        set _tmpds;
17873 +           ROLE = 'INPUT';
17874 +           LEVEL = 'INTERVAL';
17875 +           CREATOR='DMZIP';
17876 +           if NAME = '_TYPE_' then delete;
17877 +    run;
17878 +    data &outcmeta;
17879 +         set &incmeta _tmpds;
17880 +    run;
17881 +    %end;
17882 +    proc datasets lib=work nolist;
17883 +      delete  _dmdbdat _dmdbcat _classout
17884 +    %if &recreatecmeta eq Y %then %do;
17885 +    _tmpds
17886 +    %end;
17887 +    ;
17888 +    quit;
17889 +%Mend MakeDummyVariables;
17890 +
17891 +/*--- Determine Optimal Number of Cluster ----
17892 +%macro FindClusNum(statds=, groupds=, minvariation=);
17893 +   %global optnclus;
17894 +   data varclus_tmp(drop=_NAME_);
17895 +      set &statDs;
17896 +      where _type_ ='PROPOR';
17897 +   run;
17898 +   proc sort data=varclus_tmp;
17899 +      by _NCL_;
17900 +   run;
17901 +   proc transpose data=varclus_tmp out=varclus_tmp;
17902 +      by _NCL_;
17903 +      var %EM_INTERVAL_INPUT
17904 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17905 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17906 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17907 +          %do i = 2 %to &nvar;
17908 +          %let varname = %sysfunc(varname(&dsid, &i));
17909 +          &varname
17910 +          %end;
17911 +      %end;
17912 +   ;
17913 +   run;
17914 +
17915 +   %if &minVariation eq %then %do;
17916 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17917 +   %end;
17918 +   %if ^(0<&minVariation<100) %then %do;
17919 +       %let minVariation = 90;
17920 +   %end;
17921 +
17922 +   data _null_;
17923 +      set varclus_tmp end=eof;
17924 +      by _NCL_;
17925 +      retain flag 0;
17926 +      if first._ncl_ then flag=0;
17927 +      if .<col1 < &minVariation then flag=1;
17928 +      if last._ncl_ and ^flag then do;
17929 +         call symput('OPTNCL', _ncl_);
17930 +         stop;
17931 +      end;
17932 +     if eof then call symput('OPTNCL', _ncl_);
17933 +   run;
17934 +
17935 +   %let optnclus = &OPTNCL;
17936 +
17937 +   data varclus_tmp(drop=_NCL_ _NAME_);
17938 +      set &statDs;
17939 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17940 +   run;
17941 +   proc sort data=varclus_tmp;
17942 +      by _TYPE_;
17943 +   run;
17944 +   proc transpose data=varclus_tmp out=varclus_tmp;
17945 +      by _TYPE_;
17946 +   run;
17947 +   proc sort data=varclus_tmp;
17948 +      by _name_ _type_;
17949 +   run;
17950 +
17951 +  proc transpose data=varclus_tmp out=&groupds;
17952 +      by _NAME_;
17953 +   run;
17954 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17955 +      by Cluster descending Rsquare;
17956 +      where Cluster ne 0;
17957 +   run;
17958 +   proc datasets lib=work nolist mt=(DATA VIEW);
17959 +      delete varclus_tmp;
17960 +   run;
17961 +   quit;
17962 +%mend findClusNum;
17963 +*/
17964 +
17965 +%macro getNclusfromTrain(inoutstat=, nc=);
17966 +%global &nc;
17967 +data _null_;
17968 +    set &inoutstat end=eof;
17969 +    if eof then do;
17970 +    call symput("&nc", _ncl_);
17971 +    end;
17972 +run;
17973 +%mend  getNclusfromTrain;
17974 +
17975 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
17976 +
17977 +     *--- Build Code to Modify Metadata ---*;
17978 +     filename X "&deltacodefile";
17979 +     data _null_;
17980 +        FILE X;
17981 +        set &groupds end=eof;
17982 +        /*by Cluster;*/
17983 +         if _N_=1 then do;
17984 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17985 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17986 +           %end;
17987 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17988 +           put "if upcase(strip(NAME)) in (";
17989 +        end;
17990 +        if Strip(upcase(Selected)) eq 'YES' then do;
17991 +           string = '"'!!trim(left(VARIABLE))!!'"';
17992 +           put string;
17993 +        end;
17994 +        if eof then do;
17995 +           put ') then ROLE="INPUT";';
17996 +           put 'else ROLE="REJECTED";';
17997 +           put 'end;';
17998 +
17999 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18000 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18001 +           %end;
18002 +        end;
18003 +     run;
18004 +     quit;
18005 +
18006 +     filename X;
18007 +
18008 +     quit;
18009 +%mend MakeDeltaCode;
18010 +
18011 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18012 +    %if ^%sysfunc(exist(&statds)) %then %do;
18013 +         %goto doendc;
18014 +    %end;
18015 +
18016 +    data &corrds(drop=_TYPE_ _NCL_) ;
18017 +       set &statds;
18018 +       where _type_ eq 'CORR' ;
18019 +    run ;
18020 +    proc sort data=&corrds;
18021 +       by _NAME_ ;
18022 +    run ;
18023 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18024 +      BY _NAME_ ;
18025 +    run ;
18026 +    data &corrplotds;
18027 +       length _Y_ $100;
18028 +       set &corrplotDs;
18029 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18030 +    run ;
18031 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18032 +       set &corrplotds;
18033 +       where _LABEL_ ne '' ;
18034 +       keep _TMP_ _LABEL_ ;
18035 +    run ;
18036 +    data _null_;
18037 +       nobs=0;
18038 +       dsid = open('varclus_match');
18039 +       if dsid then do;
18040 +          nobs = attrn(dsid, 'NOBS');
18041 +          dsid = close(dsid);
18042 +       end;
18043 +       call symput ('CORR_NOBS', nobs);
18044 +    run;
18045 +    %if &corr_nobs %then %do;
18046 +        proc sort data=varclus_match;
18047 +           by _name_;
18048 +        run ;
18049 +        proc sort data=&corrplotds;
18050 +           by _name_;
18051 +        run ;
18052 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18053 +           merge varclus_match &corrplotds;
18054 +           by _NAME_ ;
18055 +           if _X_ eq '' then _X_=_NAME_ ;
18056 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18057 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18058 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18059 +
18060 +       run ;
18061 +    %end;
18062 +    %else %do;
18063 +        proc sort data=&corrplotds;
18064 +           by _name_;
18065 +        run ;
18066 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18067 +           set &corrplotds;
18068 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18069 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18070 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18071 +
18072 +        run ;
18073 +    %end;
18074 +    proc sort data=&corrplotds;
18075 +       by _X_ _Y_;
18076 +    run ;
18077 +    proc datasets lib=work nolist mt=(DATA VIEW);
18078 +       delete varclus_match;
18079 +    run;
18080 +    quit;
18081 +
18082 +%doendc:
18083 +
18084 +%mend MakeVarClusCorrData;
18085 +
18086 +%macro MakeStatPlotData(statds= , outstatplotds=);
18087 +   %if %sysfunc(exist(&statds)) %then %do;
18088 +
18089 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18090 +          set &statDs;
18091 +          where _type_ in('MEAN', 'STD', 'N');
18092 +       run ;
18093 +       proc transpose data=varclus_tmp out=&outstatplotds;
18094 +          id _TYPE_ ;
18095 +       run ;
18096 +       data &outstatplotds;
18097 +          set &outstatplotds(obs=1000);
18098 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18099 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18100 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18101 +          else SCALEDSTD= STD ;
18102 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18103 +       run ;
18104 +       proc sort data=&outstatplotds;
18105 +          by descending SCALEDSTD ;
18106 +       run ;
18107 +       proc datasets lib=work nolist mt=(DATA VIEW);
18108 +          delete varclus_tmp;
18109 +       run;
18110 +       quit;
18111 +    %end;
18112 +
18113 +%mend MakeStatPlotData;
18114 +
18115 +
18116 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18117 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18118 +    data &EM_USER_OUTSTATSCORE;
18119 +          set &indata;
18120 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18121 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18122 +          if _TYPE_ = 'STD' then _NAME_='STD';
18123 +          DROP _TYPE_ _NCL_;
18124 +     run;
18125 +
18126 +     filename _file_  "&fileRef";
18127 +
18128 +     data _null_;
18129 +        FILE _file_ MOD;
18130 +        put ' ';
18131 +        put '/*-------------------------------------------------*/';
18132 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18133 +        put '/*-------------------------------------------------*/';
18134 +        put ' ';
18135 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18136 +
18137 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18138 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18139 +
18140 +        %let k = 1;
18141 +        %do %while(^%sysfunc(fetch(&dsid)));
18142 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18143 +                %if &k > 2 %then %do;
18144 +                 %let cn = %eval(&k-2);
18145 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18146 +                %end;
18147 +                %let k = %eval(&k+1);
18148 +        %end;
18149 +
18150 +        %let rc = %sysfunc(rewind(&dsid));
18151 +
18152 +        %do i= 2 %to &nvar;
18153 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18154 +            %do %while(^%sysfunc(fetch(&dsid)));
18155 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18156 +                %if &_name = MEAN %then
18157 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18158 +                %else %if &_name = STD %then
18159 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18160 +                %else %do;
18161 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18162 +                      %let abscoeff = %sysfunc(abs(&coeff));
18163 +                          %if &abscoeff >  0 %then %do;
18164 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18165 +                           %end;
18166 +                 %end;
18167 +             %end;
18168 +             %let rc = %sysfunc(rewind(&dsid));
18169 +         %end;
18170 +
18171 +        %let dsid= %sysfunc(close(&dsid));
18172 +       run;
18173 +%mend CreateScoreCode;
18174 +
18175 +
18176 +
18177 +/*----------------------------------------------------------
18178 +    Instead of using %MakeRSquareData,
18179 +    %MakeVarClusResultTable at macro2.source is used
18180 + +----------------------------------------------------------*/
18181 +
18182 +
18183 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18184 +
18185 +/* modifying  from ods rsquare = data */
18186 +
18187 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18188 +    Length Cluster $16;
18189 +    length Variable $32;
18190 +    Length VariableLabel $64;
18191 +    set &indata; retain CurrentCluster;
18192 +    if NumberOfClusters ^= &ncluster then delete;
18193 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18194 +    CurrentCluster = Cluster;
18195 +   run;
18196 +proc sort data =&outdata ;
18197 +     by Cluster RsquareRatio;
18198 +run;
18199 +data _tmprsq(drop=index);
18200 +     set &outdata; by Cluster;
18201 +     if first.Cluster then do;
18202 +     index = strip(scan(Cluster,2 ));
18203 +     Variable = "Clus"||index;
18204 +     VariableLabel = "Cluster Component "||index;
18205 +     OwnCluster = 1;
18206 +     NextClosest = .;
18207 +     RsquareRatio = 0;
18208 +     output;
18209 +     end;
18210 +run;
18211 +
18212 +proc sort data = _tmprsq ;
18213 +     by Cluster RsquareRatio;
18214 +run;
18215 +data &outdata;
18216 +     set &outdata _tmprsq;
18217 +by Cluster;
18218 +run;
18219 +
18220 +
18221 +/* Just create the Selected variable with all YES */
18222 +
18223 +data &outdata;
18224 +    set &outdata; by cluster;
18225 +    length Selected $8;
18226 +    Selected = 'YES';
18227 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18228 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18229 +    rename OwnCluster = RSqWithClusterComp;
18230 +    rename NextClosest = RSqWithNextClusComp;
18231 +run;
18232 +
18233 +
18234 +/* Selected = Y/N will be done %score section -----
18235 +
18236 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18237 +data &outdata;
18238 +    set &outdata; by cluster;
18239 +    length Selected $8;
18240 +    if first.Cluster then Selected = 'YES';
18241 +    else Selected = 'NO';
18242 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18243 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18244 +    rename OwnCluster = RSqWithClusterComp;
18245 +    rename NextClosest = RSqWithNextClusComp;
18246 +run;
18247 +%end;
18248 +%else %do;
18249 +data &outdata;
18250 +    set &outdata; by cluster;
18251 +    if last.Cluster then Selected = 'YES';
18252 +    else Selected = 'NO';
18253 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18254 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18255 +    rename OwnCluster = RSqWithClusterComp;
18256 +    rename NextClosest = RSqWithNextClusComp;
18257 +run;
18258 +%end;
18259 +---------------------------------------------------------------*/
18260 +
18261 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18262 +/* to calculate NextClosestClusRsq */
18263 +proc transpose data = &inClusRSquare  out=_clusRsq;
18264 +      by cluster;
18265 +      run;
18266 +data _clusRsq;
18267 +     set _clusRsq;
18268 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18269 +run;
18270 +
18271 +proc sort data=_clusRsq;
18272 +    by cluster col1;
18273 +    run;
18274 +data _clusRsq(drop=_NAME_ _LABEL_);
18275 +     set _clusRsq; by cluster;
18276 +     if last.Cluster then output;
18277 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18278 +     rename COL1 = RSqWithNextClusComp;
18279 +     rename Cluster = Variable;
18280 +     label  Cluster = "Variable";
18281 +run;
18282 +
18283 +proc sort data =&outdata;
18284 +     by Variable;
18285 +run;
18286 +data &outdata;
18287 +    merge &outdata _clusRsq;
18288 +    by Variable;
18289 +run;
18290 +proc sort data =&outdata;
18291 +by Cluster  RsquareRatio;
18292 +run;
18293 +quit;
18294 +%end;
18295 +
18296 +proc datasets lib = work nolist;
18297 +     delete _tmprsq _clusRsq;
18298 +     run;
18299 +quit;
18300 +
18301 +%mend MakeRSquareData;
18302 +
18303 +
18304 +/*-------------------------------------------------------------------------*/
18305 +
18306 +
18307 +
18308 +%macro ModifyCorr(indata=,
18309 +                  outdata=,
18310 +                  rsquare = Y
18311 +                  );
18312 +    data corr_tmp;
18313 +        set &indata;
18314 +    run;
18315 +     proc sql;
18316 +           update &indata
18317 +           set
18318 +     %let dsid = %sysfunc(open(work.corr_tmp));
18319 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18320 +          %do i = 4 %to &nvar;
18321 +          %let _name = %sysfunc(varname(&dsid, &i));
18322 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18323 +            %else  %let _name_md = &_name;
18324 +            %if &i < &nvar %then %do;
18325 +               &_name = 1- &_name_md ,
18326 +            %end;
18327 +            %else %do;
18328 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18329 +            %end;
18330 +          %end;
18331 +      %let dsid= %sysfunc(close(&dsid));
18332 +
18333 +      select * from &indata;
18334 +      run;
18335 +      proc datasets lib = work nolist;
18336 +           delete corr_tmp;
18337 +      run;
18338 +      quit;
18339 +
18340 + %mend ModifyCorr;
18341 +
18342 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18343 +    data &outdata(drop= _NCL_  _TYPE_);
18344 +       set &indata;
18345 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18346 +       rename _NAME_ = Cluster;
18347 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18348 +    run;
18349 +    %if &RSquare eq Y %then %do;
18350 +     data corr_tmp;
18351 +        set &outdata;
18352 +     run;
18353 +
18354 +     data &outdata(drop=i);
18355 +          set &outdata;
18356 +          %let dsid = %sysfunc(open(work.corr_tmp));
18357 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18358 +          %do i = 2 %to &nvar;
18359 +            %let _name = %sysfunc(varname(&dsid, &i));
18360 +            %let _name_md = &_name.**2;
18361 +                &_name = &_name_md;
18362 +          %end;
18363 +      %let dsid= %sysfunc(close(&dsid));
18364 +      run;
18365 +      proc datasets lib = work nolist;
18366 +           delete corr_tmp;
18367 +      run;
18368 +
18369 +    %end;
18370 +     quit;
18371 +%mend MakeClusStructCorrData;
18372 +
18373 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18374 +    data &outdata(drop= _NCL_  _TYPE_);
18375 +       set &indata;
18376 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18377 +       rename _NAME_ = Cluster;
18378 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18379 +    run;
18380 +    data corr_tmp;
18381 +        set &outdata;
18382 +    run;
18383 +
18384 +    %let dsid = %sysfunc(open(work.corr_tmp));
18385 +    %let nclus2= %eval(&ncluster+1);
18386 +    data &outdata;
18387 +         set &outdata;
18388 +          %do i = 2 %to &nclus2;
18389 +          %let i_1 = %eval(&i-1);
18390 +            %let _name = %sysfunc(varname(&dsid, &i));
18391 +            %let _newName = Clus&i_1;
18392 +                rename &_name = &_newName; ;
18393 +                *label &_name ="Cluster &i_1";
18394 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18395 +          %end;
18396 +          keep Cluster
18397 +          %do i = 2 %to &nclus2;
18398 +                %let _name = %sysfunc(varname(&dsid, &i));
18399 +                &_name
18400 +          %end;
18401 +          ;
18402 +    %let dsid= %sysfunc(close(&dsid));
18403 +     run;
18404 +     quit;
18405 +
18406 +    %if &RSquare eq Y %then %do;
18407 +
18408 +       data corr_tmp;
18409 +        set &outdata;
18410 +     run;
18411 +
18412 +     data &outdata(drop=i);
18413 +          set &outdata;
18414 +          %let dsid = %sysfunc(open(work.corr_tmp));
18415 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18416 +          %do i = 2 %to &nvar;
18417 +            %let _name = %sysfunc(varname(&dsid, &i));
18418 +            %let _name_md = &_name.**2;
18419 +                &_name = &_name_md;
18420 +          %end;
18421 +      %let dsid= %sysfunc(close(&dsid));
18422 +      run;
18423 +    %end;
18424 +
18425 +    %if &makeplotds eq Y %then %do;
18426 +     proc transpose data = &outdata
18427 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18428 +          by cluster;
18429 +     run;
18430 +     data &plotds;
18431 +          set  &plotds;
18432 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18433 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18434 +     run;
18435 +     %end;
18436 +     proc datasets lib = work nolist;
18437 +           delete corr_tmp;
18438 +     run;
18439 +     quit;
18440 +%mend MakeInterClusCorrData;
18441 +
18442 +
18443 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18444 +
18445 +data &outlink(drop = Selected);
18446 +     set &indata;
18447 +     LINKID = _N_;
18448 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18449 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18450 +run;
18451 +data &outnode(keep=NODEID TYPE LABEL);
18452 +    set &indata;
18453 +    length TYPE $16;
18454 +    rename Variable = NODEID;
18455 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18456 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18457 +    then  TYPE = "CLUSTER";
18458 +    else  TYPE="VARIABLE";
18459 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18460 +run;
18461 +quit;
18462 +%mend MakeClusConstellData;
18463 +
18464 +
18465 +
18466 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18467 +
18468 +data &outlink(drop = Selected);
18469 +     set &indata;
18470 +     LINKID = _N_;
18471 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18472 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18473 +run;
18474 +data &outnode(keep=NODEID TYPE LABEL);
18475 +    set &indata;
18476 +    length TYPE $16;
18477 +    rename Variable = NODEID;
18478 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18479 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18480 +    then  TYPE = "CLUSTER";
18481 +    else  TYPE="VARIABLE";
18482 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18483 +run;
18484 +quit;
18485 +%mend MakeClusConstellData;
18486 +
18487 +
18488 +/*--- This will work only when inds is not a view data -------
18489 +
18490 +%macro getNVarNObs(inds=, nvar=, nobs=);
18491 +
18492 +    %global &nvar;
18493 +    %global &nobs;
18494 +    data _null_;
18495 +         dsid = open("&inds");
18496 +         nv = attrn(dsid, 'NVAR');
18497 +         no = attrn(dsid, 'NOBS');
18498 +         dsid = close(dsid);
18499 +         call symput("&nvar", nv);
18500 +         call symput("&nobs", no);
18501 +    run;
18502 +    quit;
18503 +%mend  getNVarNObs;
18504 +
18505 ++---------------------------------------------------------------*/
18506 +
18507 +
18508 +%macro getNVar(inds=, nvar=);
18509 +    %global &nvar;
18510 +    data _null_;
18511 +         dsid = open("&inds");
18512 +         nv = attrn(dsid, 'NVAR');
18513 +         dsid = close(dsid);
18514 +         call symput("&nvar", nv);
18515 +    run;
18516 +    quit;
18517 +%mend  getNVar;
18518 +
18519 +
18520 +
18521 +%macro getNObs(inds=, nobs=);
18522 +    %global &nobs;
18523 +    data _null_;
18524 +        set &inds end=eof;
18525 +        if eof then call symput("&nobs", _N_);
18526 +    run;
18527 +    quit;
18528 +%mend  getNObs;
18529 +
18530 +%Macro CreateVarclusMeta(trainnum=);
18531 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18532 +    data &EM_USER_VARCLUSMETA;
18533 +         length TrainNum 8.;
18534 +         length NewTrain $8;
18535 +         length NGCluster 8.;
18536 +         length ExportedComp $16;
18537 +         length HideVariable $8;
18538 +         TrainNum = &trainnum;
18539 +         NewTrain = "Y";
18540 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18541 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18542 +         NGCluster = 0; /* zero means no twostage */
18543 +   run;
18544 +   quit;
18545 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18546 +
18547 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18548 +    data &outdata(drop= _NCL_  _TYPE_);
18549 +       set &indata;
18550 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18551 +       %if &globalclusid ne %then %do;
18552 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18553 +       rename _NAME_ = Cluster;
18554 +       %end;
18555 +       %else %do;
18556 +        _NAME_ = upcase(_NAME_);
18557 +       rename _NAME_ = Cluster;
18558 +       %end;
18559 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18560 +    run;
18561 +    data corr_tmp;
18562 +        set &outdata;
18563 +    run;
18564 +
18565 +    %let dsid = %sysfunc(open(work.corr_tmp));
18566 +    %let nclus2= %eval(&ncluster+1);
18567 +    data &outdata;
18568 +         set &outdata;
18569 +          %do i = 2 %to &nclus2;
18570 +          %let i_1 = %eval(&i-1);
18571 +            %let _name = %sysfunc(varname(&dsid, &i));
18572 +            %if &globalclusid ne %then
18573 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18574 +                     rename &_name = &_newName;
18575 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18576 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18577 +                %end;
18578 +            %else
18579 +                %do; %let _newName = CLUS&i_1;
18580 +                     rename &_name = &_newName;
18581 +                     *label &_name ="Cluster &i_1";
18582 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18583 +                %end;
18584 +          %end;
18585 +          keep Cluster
18586 +          %do i = 2 %to &nclus2;
18587 +                %let _name = %sysfunc(varname(&dsid, &i));
18588 +                &_name
18589 +          %end;
18590 +          ;
18591 +    %let dsid= %sysfunc(close(&dsid));
18592 +     run;
18593 +     quit;
18594 +
18595 +    %if &RSquare eq Y %then %do;
18596 +
18597 +       data corr_tmp;
18598 +        set &outdata;
18599 +     run;
18600 +
18601 +     data &outdata;
18602 +          set &outdata;
18603 +          %let dsid = %sysfunc(open(work.corr_tmp));
18604 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18605 +          %do i = 2 %to &nvar;
18606 +            %let _name = %sysfunc(varname(&dsid, &i));
18607 +            %let _name_md = &_name.**2;
18608 +                &_name = &_name_md;
18609 +          %end;
18610 +      %let dsid= %sysfunc(close(&dsid));
18611 +      run;
18612 +    %end;
18613 +
18614 +    %if &makeplotds eq Y %then %do;
18615 +     proc transpose data = &outdata
18616 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18617 +          by cluster;
18618 +     run;
18619 +     data &plotds;
18620 +          set  &plotds;
18621 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18622 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18623 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18624 +     run;
18625 +     %end;
18626 +     proc datasets lib = work nolist;
18627 +           delete corr_tmp;
18628 +     run;
18629 +     quit;
18630 +%mend MakeInterClusCorrData;
18631 +
18632 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18633 +    data _tmpds(drop= _NCL_);
18634 +       set &indata;
18635 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18636 +       %if &globalclusid ne %then %do;
18637 +           _NAME_ = "GC&globalclusid.";
18638 +       rename _NAME_ = Cluster;
18639 +       %end;
18640 +       %else %do;
18641 +        _NAME_ = "CLUS";
18642 +        rename _NAME_ = Cluster;
18643 +       %end;
18644 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18645 +    run;
18646 +    proc transpose data =_tmpds out =&outdata;
18647 +    run;
18648 +
18649 +    data &outdata(drop=COL1);
18650 +        %if &globalclusid ne %then %do;
18651 +        length GCluster $16;
18652 +        %end;
18653 +        length Cluster $32;
18654 +        length _NAME_ $32;
18655 +         set &outdata;
18656 +         _NAME_ = upcase(_NAME_);
18657 +         rename _NAME_=Variable;
18658 +         *label _NAME_="Variable";
18659 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18660 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18661 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18662 +
18663 +         %if &globalclusid ne %then %do;
18664 +          GCluster = "GC&globalclusid";
18665 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18666 +         %end;
18667 +         %else %do;
18668 +         Cluster = "CLUS"||strip(COL1);
18669 +        %end;
18670 +         rename COL2 = RSqWithOwnClusComp;
18671 +         *label COL2 = "R-Square With Own Cluster Component";
18672 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18673 +
18674 +   run;
18675 +   proc sort data =&outdata;
18676 +        by Cluster RSqWithOwnClusComp;
18677 +   run;
18678 +   proc datasets lib = work nolist;
18679 +           delete _tmpds;
18680 +   run;
18681 +   quit;
18682 +%mend MakeOwnRSquare;
18683 +
18684 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18685 +    data &outdata(drop= _NCL_  _TYPE_);
18686 +       %if &globalclusid ne %then %do;
18687 +        length GCluster $16;
18688 +        %end;
18689 +       set &indata;
18690 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18691 +       %if &globalclusid ne %then %do;
18692 +         GCluster = "GC&globalclusid";
18693 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18694 +         rename _NAME_ = Cluster;
18695 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18696 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18697 +
18698 +       %end;
18699 +       %else %do;
18700 +         _NAME_ = upcase(_NAME_);
18701 +         rename _NAME_ = Cluster;
18702 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18703 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18704 +
18705 +       %end;
18706 +     run;
18707 +    %if &RSquare eq Y %then %do;
18708 +     data corr_tmp;
18709 +          set &outdata;
18710 +     run;
18711 +     %let istart = 2;
18712 +     %if &globalclusid ne %then %let istart = 3;
18713 +     data &outdata;
18714 +          set &outdata;
18715 +          %let dsid = %sysfunc(open(work.corr_tmp));
18716 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18717 +          %do i =&istart %to &nvar;
18718 +            %let _name = %sysfunc(varname(&dsid, &i));
18719 +            %let _name_md = &_name.**2;
18720 +                &_name = &_name_md;
18721 +          %end;
18722 +      %let dsid= %sysfunc(close(&dsid));
18723 +      run;
18724 +      proc datasets lib = work nolist;
18725 +           delete corr_tmp;
18726 +      run;
18727 +    %end;
18728 +     quit;
18729 +%mend MakeClusStructCorrData;
18730 +
18731 +/*
18732 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18733 +*/
18734 +
18735 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18736 +
18737 +     /* The indata should be the outdata
18738 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18739 +
18740 +     proc sort data =&indata out=_tmpclusRsq;
18741 +     by cluster;
18742 +     run;
18743 +
18744 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18745 +      by cluster;
18746 +     run;
18747 +
18748 +     proc sort data=_tmpclusRsq;
18749 +        by _NAME_ COL1;
18750 +     run;
18751 +
18752 +     data _tmpclusRsq;
18753 +         length _NAME_ $32;
18754 +         set _tmpclusRsq; by _NAME_;
18755 +          _NAME_ = upcase(_NAME_);
18756 +          %if &ncluster ne 1 %then %do;
18757 +             if last._NAME_ then delete;
18758 +          %end;
18759 +          %else %do;
18760 +             COL1 = 0;
18761 +          %end;
18762 +     run;
18763 +     /* need to sort again */
18764 +     proc sort data=_tmpclusRsq;
18765 +        by _NAME_ COL1;
18766 +     run;
18767 +
18768 +     data &outdata;
18769 +         set _tmpclusRsq; by _NAME_;
18770 +         Cluster = upcase(Cluster);
18771 +         if last._NAME_ then output;
18772 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18773 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18774 +         rename COL1 = RSqWithNextClusComp;
18775 +         Cluster = upcase(Cluster);
18776 +         rename Cluster = ClosestCluster;
18777 +         *label  Cluster = "Next Closest Cluster";
18778 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18779 +         rename _NAME_ = Variable;
18780 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18781 +    run;
18782 +
18783 +
18784 +    %if &globalclusid ne %then %do;
18785 +    data &outdata;
18786 +       length GCluster $16;
18787 +       set &outdata;
18788 +       GCluster = "GC&globalclusid";
18789 +       run;
18790 +    %end;
18791 +    proc datasets lib = work nolist;
18792 +           delete _tmpclusRsq;
18793 +    run;
18794 +    quit;
18795 +%mend FindNextClosestClusByVar;
18796 +
18797 +
18798 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18799 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18800 +     proc sort data =&indata out=_tmpclusRsq;
18801 +     by cluster;
18802 +     run;
18803 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18804 +     by cluster;
18805 +     run;
18806 +     proc sort data=_tmpclusRsq;
18807 +        by _NAME_ col1;
18808 +     run;
18809 +     data _tmpclusRsq;
18810 +         length _NAME_ $32;
18811 +         set _tmpclusRsq; by _NAME_;
18812 +          _NAME_ = upcase(_NAME_);
18813 +          %if &ncluster ne 1 %then %do;
18814 +             if last._NAME_ then delete;
18815 +          %end;
18816 +          %else %do;
18817 +             COL1 = 0;
18818 +          %end;
18819 +     run;
18820 +     data &outdata;
18821 +         set _tmpclusRsq; by _NAME_;
18822 +         Cluster = upcase(Cluster);
18823 +         if last._NAME_ then output;
18824 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18825 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18826 +         rename COL1 = RSqWithNextClusComp;
18827 +         Cluster = upcase(Cluster);
18828 +         rename Cluster = ClosestCluster;
18829 +         *label  Cluster = "Next Closest Cluster";
18830 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18831 +         rename _NAME_ = Variable;
18832 +         *label  _NAME_ = "Variable";
18833 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18834 +
18835 +    run;
18836 +    %if &globalclusid ne %then %do;
18837 +    data &outdata;
18838 +       length GCluster $16;
18839 +       set &outdata;
18840 +       GCluster = "GC&globalclusid";
18841 +       run;
18842 +    %end;
18843 +
18844 +    proc datasets lib = work nolist;
18845 +           delete _tmpclusRsq;
18846 +    run;
18847 +
18848 +    quit;
18849 +%mend FindNextClosestClusByCluster;
18850 +
18851 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18852 +/*----
18853 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18854 +-----------*/
18855 +
18856 +proc sort data =&indata1;
18857 +    by Variable;
18858 +run;
18859 +proc sort data =&indata2;
18860 +    by Variable;
18861 +run;
18862 +data &outdata;
18863 +    merge &indata1 &indata2;
18864 +    by Variable;
18865 +    length Type $16;
18866 +    Type = 'Variable';
18867 +    *label Type ='Type';
18868 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18869 +run;
18870 +
18871 +
18872 +data &indata3;
18873 +    set  &indata3 ;
18874 +    length RSqWithOwnClusComp 8.;
18875 +    Cluster = Variable;
18876 +    RSqWithOwnClusComp = 1;
18877 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18878 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18879 +    length Type $16;
18880 +    Type = 'ClusterComp';
18881 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18882 +
18883 +;
18884 +run;
18885 +
18886 +proc sort data=&outdata;
18887 +    by Cluster;
18888 +run;
18889 +proc sort data =&indata3;
18890 +    by Cluster;
18891 +run;
18892 +
18893 +data &outdata;
18894 +     set &outdata &indata3;
18895 +     by Cluster;
18896 +run;
18897 +
18898 +
18899 +/* Create the Selected variable with all YES */
18900 +
18901 +data &outdata;
18902 +     set &outdata;
18903 +     length RsqRatio 8.;
18904 +     length Selected $8;
18905 +     *label RSqRatio = "1-R**2 Ratio";
18906 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18907 +     *label Selected = "Variable Selected";
18908 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18909 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18910 +     Selected ='YES';
18911 +     rename _LABEL_ = Label;
18912 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18913 +run;
18914 +
18915 +
18916 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18917 +        Just create the Selected variable with all YES at the step above
18918 + +------------------------------------------------------------------------------+
18919 +
18920 +proc sort data=&outdata;
18921 +    by Cluster RsqRatio;
18922 +run;
18923 +
18924 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18925 +data &outdata;
18926 +     set &outdata; by Cluster;
18927 +     length Selected $8;
18928 +     label Selected = "Variable Selected";
18929 +     if  first.Cluster then Selected ='Yes';
18930 +     else Selected = 'No';
18931 +    run;
18932 +%end;
18933 +%else %do;
18934 +data &outdata(drop = _var _varchange);
18935 +     set &outdata; retain _var 0; by Cluster;
18936 +     length Selected $8;
18937 +     label Selected = "Variable Selected";
18938 +     if first.Cluster then  _varchange = 0;
18939 +     else _varchange =1;
18940 +     if _var ne _varchange then  Selected  = 'Yes';
18941 +     else Selected = 'No';
18942 +     if last.cluster then  _var = 0;
18943 +     else _var = _varchange;
18944 +run;
18945 +%end;
18946 +
18947 +--------------------------------------------------------------*/
18948 +
18949 +quit;
18950 +%mend MakeVarClusResultTable;
18951 +
18952 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18953 +     proc sort data =&indata;
18954 +        by cluster;
18955 +     run;
18956 +     proc transpose data =&indata
18957 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18958 +          by cluster;
18959 +     run;
18960 +     data &outdata;
18961 +          set  &outdata;
18962 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18963 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18964 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
18965 +     run;
18966 +     %if &globalclusid ne %then %do;
18967 +     data &outdata;
18968 +          Length GCluster $16;
18969 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18970 +          set  &outdata;
18971 +          GCluster ="GC&globalclusid.";
18972 +          run;
18973 +     %end;
18974 +
18975 +%Mend MakePlotDataFromCorrTable;
18976 +
18977 +
18978 +%macro MakeCorrelation(indata=,
18979 +                       outstat=_tmpoutstat,
18980 +                       corrmatrix=N,
18981 +                       outcorr=_tmpoutcorr,
18982 +                       includeclassvar=N,
18983 +                       target=,
18984 +                       freq=,
18985 +                       weight=);
18986 +   %if &target eq  %then %do;
18987 +
18988 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
18989 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
18990 +       %if &includeclassvar eq Y %then %do;
18991 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18992 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18993 +          %do i = 2 %to &nvar;
18994 +          %let varname = %sysfunc(varname(&dsid, &i));
18995 +          &varname
18996 +          %end;
18997 +       %end;
18998 +       ;
18999 +      %if &freq ne  %then %do;
19000 +          freq &freq;
19001 +      %end;
19002 +      %if &weight ne  %then %do;
19003 +          weight &weight;
19004 +      %end;
19005 +
19006 +      run;
19007 +      %if &corrmatrix eq Y %then %do;
19008 +      data  &outcorr (drop = _NCL_ _TYPE_);
19009 +           set  &outstat ;
19010 +           if _TYPE_ ='CORR' then output;
19011 +      run;
19012 +      %end;
19013 +    %end;
19014 +    %else %do;
19015 +       proc corr data=&indata outp=&outstat noprint;
19016 +            var
19017 +       %let dsid = %sysfunc(open(&indata));
19018 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19019 +          %do i = 1 %to &nvar;
19020 +              %let _name = %sysfunc(varname(&dsid, &i));
19021 +              %if &_name ne &target %then;
19022 +              &_name
19023 +           %end;
19024 +        %let dsid= %sysfunc(close(&dsid));
19025 +        ;
19026 +        with &target;
19027 +        run;
19028 +    %end;
19029 +    quit;
19030 +%mend MakeCorrelation;
19031 +
19032 +
19033 +%macro MakeCorrelationDistance(indata=,
19034 +                               outdata=,
19035 +                               rsquare = N
19036 +                               );
19037 +    data corr_tmp;
19038 +        set &indata;
19039 +        if _N_ = 1 then do;
19040 +           output;
19041 +           stop;
19042 +         end;
19043 +    run;
19044 +    %if &outdata ne  %then %let  _outdata = &outdata;
19045 +    %else %let _outdata = &indata;
19046 +
19047 +    data &_outdata;
19048 +         set &indata;
19049 +
19050 +         %let dsid = %sysfunc(open(work.corr_tmp));
19051 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19052 +          %do i = 2 %to &nvar;
19053 +              %let _name = %sysfunc(varname(&dsid, &i));
19054 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19055 +              %else  %let _name_md = &_name;
19056 +              &_name = 1- &_name_md;
19057 +          %end;
19058 +      %let dsid= %sysfunc(close(&dsid));
19059 +      run;
19060 +      proc datasets lib = work nolist;
19061 +           delete corr_tmp;
19062 +      run;
19063 +      quit;
19064 +  %mend MakeCorrelationDistance;
19065 +
19066 +
19067 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19068 +                                   rsquare = N
19069 +                                   );
19070 +    data corr_tmp;
19071 +        set &indata;
19072 +    run;
19073 +    proc sql noprint;
19074 +           update &indata
19075 +           set
19076 +     %let dsid = %sysfunc(open(work.corr_tmp));
19077 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19078 +          %do i = 4 %to &nvar;
19079 +          %let _name = %sysfunc(varname(&dsid, &i));
19080 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19081 +            %else  %let _name_md = &_name;
19082 +            %if &i < &nvar %then %do;
19083 +               &_name = 1- &_name_md ,
19084 +            %end;
19085 +            %else %do;
19086 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19087 +            %end;
19088 +          %end;
19089 +      %let dsid= %sysfunc(close(&dsid));
19090 +
19091 +      select * from &indata;
19092 +      run;
19093 +     data &indata( drop = _NCL_);
19094 +           set &indata;
19095 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19096 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19097 +     run;
19098 +     data &indata(DROP = _NCL_);
19099 +           set &indata;
19100 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19101 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19102 +           rename _NAME_ = _VAR_;
19103 +     run;
19104 +     proc datasets lib = work nolist;
19105 +           delete corr_tmp;
19106 +     run;
19107 +     quit;
19108 + %mend UpdateOutStatCorrToDistance;
19109 +
19110 +
19111 +%macro HierClusWithCorr(indata= ,
19112 +                        ncluster=,
19113 +                        method = Ward,
19114 +                        outtree = _outtree,
19115 +                        idvar =_VAR_,
19116 +                        outdata=,
19117 +                        rescore = N,
19118 +                        newncluster=
19119 +                        );
19120 +      %global &newncluster;
19121 +      %if &rescore ne Y %then %do;
19122 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19123 +                   method=&method outtree=&outtree noprint;
19124 +           id &idvar;
19125 +      run;
19126 +      %end;
19127 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19128 +      run;
19129 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19130 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19131 +      run;
19132 +      data _outcontent;
19133 +          set _outcontent;
19134 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19135 +          index = 1;
19136 +          rename NAME = _NAME_;
19137 +      run;
19138 +      proc sort data=_outcontent;
19139 +          by _NAME_;
19140 +      run;
19141 +      proc sort data =&outdata;
19142 +           by _NAME_;
19143 +      run;
19144 +      data &outdata(drop=index);
19145 +          merge &outdata _outcontent;
19146 +          by _NAME_;
19147 +          if index = . then delete;
19148 +      run;
19149 +      /*-----------------------------------------------------------*/
19150 +      data &outdata;
19151 +           length CLUSNAME $16;
19152 +           set &outdata;
19153 +           if CLUSTER > &ncluster then delete;
19154 +           CLUSNAME='GC'||strip(CLUSTER);
19155 +           *label CLUSNAME = "Cluster Name";
19156 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19157 +           rename _NAME_ = VARIABLE ;
19158 +           *label _NAME_ = "Variable";
19159 +           *label CLUSTER = "Cluster";
19160 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19161 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19162 +      run;
19163 +      proc sort data=&outdata out=&outdata;
19164 +           by CLUSTER;
19165 +      run;
19166 +      proc means data =&outdata noprint;
19167 +           output out=_meanout;
19168 +      run;
19169 +      data _null_;
19170 +            set _meanout;
19171 +            if strip(_STAT_) eq 'MAX' then do;
19172 +            call symput("&newncluster", CLUSTER);
19173 +            stop;
19174 +            end;
19175 +      run;
19176 +
19177 +      proc datasets lib = work nolist;
19178 +           delete _outcontent _meanout;
19179 +      run;
19180 +      quit;
19181 +%mend  HierClusWithCorr;
19182 +
19183 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19184 +
19185 +     data _tmpindata;
19186 +          set &indata;
19187 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19188 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19189 +          if _TYPE_ = 'STD' then _NAME_='STD';
19190 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19191 +          DROP _TYPE_ _NCL_;
19192 +     run;
19193 +
19194 +     filename _file_  "&fileRef";
19195 +
19196 +     data _null_;
19197 +        FILE _file_ MOD;
19198 +        put ' ';
19199 +        put "/*-------------------------------------------------*/";
19200 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19201 +        put "/*-------------------------------------------------*/";
19202 +        put ' ';
19203 +        %let dsid = %sysfunc(open(work._tmpindata));
19204 +
19205 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19206 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19207 +        %let k = 1;
19208 +        %do %while(^%sysfunc(fetch(&dsid)));
19209 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19210 +               %if &k > 2 %then %do;
19211 +                %let cn = %eval(&k-2);
19212 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19213 +                %end;
19214 +                %let k = %eval(&k+1);
19215 +
19216 +        %end;
19217 +        %let rc = %sysfunc(rewind(&dsid));
19218 +
19219 +        %do j= 2 %to &nvar;
19220 +            %let _varname = %sysfunc(varname(&dsid, &j));
19221 +            %do %while(^%sysfunc(fetch(&dsid)));
19222 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19223 +                %if &_name = MEAN %then
19224 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19225 +                %else %if &_name = STD %then
19226 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19227 +                %else %do;
19228 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19229 +                      %let abscoeff = %sysfunc(abs(&coeff));
19230 +                          %if &abscoeff >  0 %then %do;
19231 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19232 +                           %end;
19233 +                 %end;
19234 +             %end;
19235 +             %let rc = %sysfunc(rewind(&dsid));
19236 +         %end;
19237 +
19238 +        %let dsid= %sysfunc(close(&dsid));
19239 +
19240 +     run;
19241 +
19242 +     filename _file_;
19243 +     proc datasets lib = work nolist;
19244 +           delete _tmpindata;
19245 +     run;
19246 +     quit;
19247 +%mend CreateScoreCode2;
19248 +
19249 +
19250 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19251 +
19252 +     /*--- Build Code to Modify Metadata ---*/
19253 +     filename X "&deltacodefile";
19254 +     data _null_;
19255 +        FILE X;
19256 +        set &groupds end=eof;
19257 +        if _N_=1 then do;
19258 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19259 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19260 +           %end;
19261 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19262 +           put "if upcase(strip(NAME)) in (";
19263 +        end;
19264 +        if Strip(upcase(Selected)) eq 'YES' then do;
19265 +           string = '"'!!trim(left(VARIABLE))!!'"';
19266 +           put string;
19267 +        end;
19268 +        if eof then do;
19269 +           put ') then ROLE="INPUT";';
19270 +           put 'else ROLE="REJECTED";';
19271 +           put 'end;';
19272 +
19273 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19274 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19275 +           %end;
19276 +        end;
19277 +     run;
19278 +     quit;
19279 +
19280 +     filename X;
19281 +     quit;
19282 +%mend MakeDeltaCode2;
19283 +
19284 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19285 +  %global &ngc;
19286 +  data _null_;
19287 +  %if &indata ne %then %do;
19288 +      %let dsid = %sysfunc(open(&indata));
19289 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19290 +      %let dsid = %sysfunc(close(&dsid));
19291 +  %end;
19292 +  %else %do;
19293 +       %let nvar = %eval(&ninput+&ndummy); ;
19294 +  %end;
19295 +  %let numgc = %eval(&nvar/&div+2);
19296 +  %let &ngc = &numgc;
19297 +   run;
19298 +  quit;
19299 +%mend getInitialGClusterNumber;
19300 +
19301 +
19302 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19303 +data &outlink(drop = Selected);
19304 +     set &indata;
19305 +     LINKID = _N_;
19306 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19307 +run;
19308 +data &outnode(keep=NODEID TYPE LABEL);
19309 +    set &indata;
19310 +    length TYPE $16;
19311 +    rename VARIABLE = NODEID;
19312 +    *label  CLUSNAME="Node ID";
19313 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19314 +    TYPE = "VARIABLE";
19315 +    *label TYPE = "Node Type";
19316 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19317 +    run;
19318 +data _tmp(keep=NODEID TYPE LABEL);
19319 +    set &indata;
19320 +    length TYPE $16;
19321 +    rename CLUSNAME = NODEID;
19322 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19323 +    TYPE = "GCLUSTER";
19324 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19325 +    run;
19326 +proc sort data=_tmp;
19327 +    by NODEID;
19328 +run;
19329 +data _tmp;
19330 +    set _tmp; by NODEID;
19331 +    if first.NODEID then output;
19332 +run;
19333 +proc sort data=&outnode;
19334 +    by NODEID;
19335 +run;
19336 +data  &outnode;
19337 +    set _tmp &outnode;
19338 +run;
19339 +proc datasets lib = work nolist;
19340 +     delete _tmp;
19341 +run;
19342 +quit;
19343 +%mend MakeGobalConstellData;
19344 +
19345 +/* Make contellation plot data among GCLUSTERS */
19346 +
19347 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19348 +
19349 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19350 +     set &indata;
19351 +     LINKID = _N_;
19352 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19353 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19354 +     end;
19355 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19356 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19357 +     end;
19358 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19359 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19360 +    end;
19361 +run;
19362 +
19363 +data _tmp_outrsquare;
19364 +        set &inoutrsq;
19365 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19366 +run;
19367 +
19368 +proc freq data =_tmp_outrsquare noprint;
19369 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19370 +run;
19371 +
19372 +data &outnode(keep=_NAME_ TYPE LABEL);
19373 +    set &outlink;
19374 +    length TYPE $16;
19375 +    length LABEL $100;
19376 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19377 +
19378 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19379 +    TYPE = "GCLUSTER";
19380 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19381 +    end;
19382 +    else do;
19383 +    TYPE= "ROOT";
19384 +    LABEL= _NAME_;
19385 +    end;
19386 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19387 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19388 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19389 +    run;
19390 +
19391 +proc sort data=&outnode;
19392 +     by _NAME_;
19393 +proc sort data=_tmp_GCLUSFREQ;
19394 +     by _NAME_;
19395 +run;
19396 +
19397 +data  &outnode;
19398 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19399 +     if COUNT=. then COUNT=1;
19400 +run;
19401 +
19402 +proc datasets lib = work nolist;
19403 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19404 +run;
19405 +
19406 +quit;
19407 +%Mend MakeGClusterConstData;
19408 +
19409 +
19410 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19411 +
19412 +    data _gscoretmpds;
19413 +          set &indata;
19414 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19415 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19416 +          if _TYPE_ = 'STD' then _NAME_='STD';
19417 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19418 +          DROP _TYPE_ _NCL_;
19419 +     run;
19420 +
19421 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19422 +        GCluster Component &globalclusid ------ */
19423 +
19424 +    filename _file_  "&fileref";
19425 +
19426 +    data _null_;
19427 +        %if &globalclusid eq 1 %then %do;
19428 +          FILE _file_;
19429 +        %end;
19430 +        %else %do;
19431 +          FILE _file_ MOD;
19432 +        %end;
19433 +
19434 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19435 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19436 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19437 +
19438 +        %let k = 1;
19439 +        %do %while(^%sysfunc(fetch(&dsid)));
19440 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19441 +                %if &k > 2 %then %do;
19442 +                put "&_name = 0 ; ";
19443 +                %end;
19444 +                %let k = %eval(&k+1);
19445 +        %end;
19446 +
19447 +        %let rc = %sysfunc(rewind(&dsid));
19448 +        %do i= 2 %to &nvar;
19449 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19450 +            %do %while(^%sysfunc(fetch(&dsid)));
19451 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19452 +                %if &_name = MEAN %then
19453 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19454 +                %else %if &_name = STD %then
19455 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19456 +                %else %do;
19457 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19458 +                      %let abscoeff = %sysfunc(abs(&coeff));
19459 +                          %if &abscoeff >  0 %then %do;
19460 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19461 +                           %end;
19462 +                 %end;
19463 +             %end;
19464 +             %let rc = %sysfunc(rewind(&dsid));
19465 +
19466 +         %end;
19467 +
19468 +        %let dsid= %sysfunc(close(&dsid));
19469 +       run;
19470 +
19471 +
19472 +       proc datasets lib=work nolist;
19473 +            delete _gscoretmpds;
19474 +       run;
19475 +      quit;
19476 +
19477 +%mend CreateGClusterScoreCode;
19478 +
19479 +
19480 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19481 +
19482 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19483 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19484 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19485 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19486 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19487 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19488 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19489 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19490 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19491 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19492 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19493 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19494 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19495 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19496 +
19497 +   filename gsfile "&gscorecode";
19498 +
19499 +   data &EM_USER_GSCORE;
19500 +             set &indata;
19501 +             %include  gsfile;
19502 +        keep
19503 +        %do i=1 %to &ngcluster;
19504 +         %let gcvarname = GC&i;
19505 +         &gcvarname
19506 +        %end;
19507 +     ;
19508 +   run;
19509 +
19510 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19511 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19512 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19513 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19514 +    noprint  ;
19515 +     var
19516 +       %do i=1 %to &ngcluster;
19517 +         %let gcvarname = GC&i;
19518 +         &gcvarname
19519 +        %end;
19520 +   ;
19521 +   run;
19522 +
19523 +
19524 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19525 +   data &EM_USER_GSCORECORRPLOT ;
19526 +        set &EM_USER_GSCORECORRPLOT;
19527 +        rename _X_ = X;
19528 +        rename _Y_ = Y;
19529 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19530 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19531 +   run;
19532 +
19533 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19534 +
19535 +   data &EM_USER_GSCORETREE;
19536 +        length _NAME_ $32;
19537 +        length _LABEL_ $100;
19538 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19539 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19540 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19541 +        end;else do;
19542 +         _LABEL_ = _NAME_;
19543 +        end;
19544 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19545 +
19546 +   run;
19547 +
19548 +   quit;
19549 +
19550 +%mend MakeGClusterCorrelation;
19551 +
19552 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19553 +%macro score;
19554 +
19555 +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19556 +%include temp;
19557 +filename temp;
19558 +
19559 +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19560 +
19561 +data _null_;
19562 +         set &EM_USER_VARCLUSMETA;
19563 +         if _N_=1 then
19564 +         call symput('_trainnum', TrainNum);
19565 +         call symput('_exportedcomp', ExportedComp);
19566 +         call symput('_hidevariable', HideVariable);
19567 +         call symput('_newTrain', NewTrain);
19568 +run;
19569 +
19570 +%if &_newTrain = N %then %do;
19571 +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19572 +        %else %let _exportedCompChanged = Y;
19573 +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19574 +        %else  %let _hideVariableChanged = Y;
19575 +%end;
19576 +%else %do;
19577 +        %let _exportedCompChanged = Y;
19578 +        %let _hideVariableChanged = Y;
19579 +%end;
19580 +
19581 +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19582 +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19583 +     %include temp;
19584 +     filename temp;
19585 +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19586 +%end;
19587 +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19588 +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19589 +     %include temp;
19590 +     filename temp;
19591 +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19592 +%end;
19593 +
19594 +  /* store  current property values */
19595 + data &EM_USER_VARCLUSMETA;
19596 +       set &EM_USER_VARCLUSMETA;
19597 +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19598 +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19599 + run;
19600 +
19601 +%mend score;
19602 +
19603 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19604 +
19605 +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19606 +     proc sort data =&indata;
19607 +              by Cluster RsqRatio Type;
19608 +     run;
19609 +     /*----------------------------------------------------------------------
19610 +      The Type variabe is used becuse the variable need to be selected
19611 +        instead of Cluster component when only one variable is in the cluster
19612 +     +-----------------------------------------------------------------------*/
19613 +
19614 +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19615 +         data &indata;
19616 +              set &indata; by cluster;
19617 +              if first.Cluster then Selected = 'YES';
19618 +              else Selected = 'NO';
19619 +         run;
19620 +         quit;
19621 +    %end;
19622 +    %else %do;
19623 +         data &indata(drop = _var _varchange);
19624 +              set &indata; retain _var 0; by Cluster;
19625 +             if first.Cluster then  _varchange = 0;
19626 +                 else _varchange =1;
19627 +             if _var ne _varchange then  Selected  = 'YES';
19628 +             else Selected = 'NO';
19629 +             if last.cluster then  _var = 0;
19630 +             else _var = _varchange;
19631 +         run;
19632 +         quit;
19633 +    %end;
19634 +%mend ChangeVariableSelectionFlag;
19635 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19636 +
19637 +%macro score1(ExportedCompChanged=,
19638 +              HideVariableChanged=);
19639 +
19640 +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19641 +   %if &ExportedCompChanged = Y %then %do;
19642 +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19643 +   %end;
19644 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19645 +
19646 +%mend score1;
19647 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file X is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Dec2019:15:48:16,
      Create Time=19Dec2019:15:46:24
 
NOTE: 8 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19648  *------------------------------------------------------------*;
19649  * End SCORE: VarClus;
19650  *------------------------------------------------------------*;
19651
 
19652  filename emflow "F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
19653  *------------------------------------------------------------*;
19654  * VarClus: Scoring DATA data;
19655  *------------------------------------------------------------*;
19656  data EMWS5.VarClus_TRAIN
19657  / view=EMWS5.VarClus_TRAIN
19658  ;
19659  set EMWS5.Ids5_DATA
19660  ;
19661  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas.
19662 +
19663 +/*-------------------------------------------------*/
19664 +/* Varclus Score Code Begins*/
19665 +/*-------------------------------------------------*/
19666 +
19667 +Clus1 = 0 ; /*---Cluster Component 1------ */
19668 +Clus2 = 0 ; /*---Cluster Component 2------ */
19669 +Clus2 = Clus2+0.53518725702076 * (gasprice - 2.59735712834766)/0.08137623778295;
19670 +Clus1 = Clus1+0.38236012188015 * (goldprice - 14.9730001177106)/0.14886382723575;
19671 +Clus1 = Clus1+0.15320588911508 * (newspolarity - 0.36245323761878)/0.34898400441679;
19672 +Clus2 = Clus2+-0.53518725702076 * (oilprice - 71.5950009482247)/1.52092212639709;
19673 +Clus1 = Clus1+0.3823999910204 * (silverprice - 14.9729286602564)/0.14904638923777;
19674 +Clus1 = Clus1+-0.28806082232814 * (stockprice - 6.64464285714285)/0.08863082579116;
NOTE: %INCLUDE (level 1) ending.
19675  run;
 
NOTE: DATA STEP view saved on file EMWS5.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.IDS5_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
19676  quit;
19677  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19679  *------------------------------------------------------------*;
19680  * VarClus: Computing metadata for TRAIN data;
19681  *------------------------------------------------------------*;
 
NOTE: View EMWS5.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS5.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 19, 2019
Time:                15:48:17
*------------------------------------------------------------*
20050  %let EMEXCEPTIONSTRING=;
20051  *------------------------------------------------------------*;
20052  * REPORT: VarClus;
20053  *------------------------------------------------------------*;
20054  %let EM_ACTION = REPORT;
20055  %let syscc = 0;
20056
20057  %macro main;
20058
20059     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20060     %include temp;
20061     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20062     %include temp;
20063     filename temp;
20064
20065    %SetProperties;
20066
20067     %if %upcase(&EM_ACTION) = CREATE %then %do;
20068         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20069         %include temp;
20070         filename temp;
20071         %create;
20072     %end;
20073     %else
20074     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20075          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20076             %include temp;
20077             filename temp;
20078             %train;
20079     %end;
20080     %else
20081     %if %upcase(&EM_ACTION) = SCORE %then %do;
20082             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20083             %include temp;
20084             filename temp;
20085             %score;
20086     %end;
20087     %else
20088     %if %upcase(&EM_ACTION) = REPORT %then %do;
20089             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20090             %include temp;
20091             filename temp;
20092             %report;
20093     %end;
20094     /*
20095     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20096         %put 'OPENING TABLE';
20097     %end;
20098     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20099         %put 'CLOSE TABLE';
20100     %end;
20101     */
20102  %mend main;
20103  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20104 +
20105 +/* Initialize property macro variables */
20106 +%macro SetProperties;
20107 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20108 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20109 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20110 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20111 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20112 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20113 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20114 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20115 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20116 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20117 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20118 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20119 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20120 +
20121 +%mend SetProperties;
20122 +
20123 +%Macro MakeDummyVariables(indata=,
20124 +                          outvar=,
20125 +                          outdata=,
20126 +                          fileref=,
20127 +                          recreatecmeta=N, /* optional */
20128 +                          incmeta=,     /* optional */
20129 +                          outcmeta=,    /* optional */
20130 +                          ndummyvars=_ndummyvars
20131 +                          );
20132 +    %global &ndummyvars;
20133 +
20134 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20135 +       class
20136 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20137 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20138 +    ;
20139 +    run;
20140 +    %let &ndummyvars = 0;
20141 +    data _null_;
20142 +    %let dsid = %sysfunc(open(work._classout));
20143 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20144 +    %let dsid = %sysfunc(close(&dsid));
20145 +    run;
20146 +
20147 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20148 +       input
20149 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20150 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20151 +        / level=nominal stdize=no;
20152 +       make outvar = &outvar;
20153 +       score data = &indata out =&outdata;
20154 +       code  file=  "&fileref";
20155 +    run;
20156 +    %if &recreatecmeta eq Y %then %do;
20157 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20158 +    data _tmpds;
20159 +        set _tmpds;
20160 +           ROLE = 'INPUT';
20161 +           LEVEL = 'INTERVAL';
20162 +           CREATOR='DMZIP';
20163 +           if NAME = '_TYPE_' then delete;
20164 +    run;
20165 +    data &outcmeta;
20166 +         set &incmeta _tmpds;
20167 +    run;
20168 +    %end;
20169 +    proc datasets lib=work nolist;
20170 +      delete  _dmdbdat _dmdbcat _classout
20171 +    %if &recreatecmeta eq Y %then %do;
20172 +    _tmpds
20173 +    %end;
20174 +    ;
20175 +    quit;
20176 +%Mend MakeDummyVariables;
20177 +
20178 +/*--- Determine Optimal Number of Cluster ----
20179 +%macro FindClusNum(statds=, groupds=, minvariation=);
20180 +   %global optnclus;
20181 +   data varclus_tmp(drop=_NAME_);
20182 +      set &statDs;
20183 +      where _type_ ='PROPOR';
20184 +   run;
20185 +   proc sort data=varclus_tmp;
20186 +      by _NCL_;
20187 +   run;
20188 +   proc transpose data=varclus_tmp out=varclus_tmp;
20189 +      by _NCL_;
20190 +      var %EM_INTERVAL_INPUT
20191 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20192 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20193 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20194 +          %do i = 2 %to &nvar;
20195 +          %let varname = %sysfunc(varname(&dsid, &i));
20196 +          &varname
20197 +          %end;
20198 +      %end;
20199 +   ;
20200 +   run;
20201 +
20202 +   %if &minVariation eq %then %do;
20203 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20204 +   %end;
20205 +   %if ^(0<&minVariation<100) %then %do;
20206 +       %let minVariation = 90;
20207 +   %end;
20208 +
20209 +   data _null_;
20210 +      set varclus_tmp end=eof;
20211 +      by _NCL_;
20212 +      retain flag 0;
20213 +      if first._ncl_ then flag=0;
20214 +      if .<col1 < &minVariation then flag=1;
20215 +      if last._ncl_ and ^flag then do;
20216 +         call symput('OPTNCL', _ncl_);
20217 +         stop;
20218 +      end;
20219 +     if eof then call symput('OPTNCL', _ncl_);
20220 +   run;
20221 +
20222 +   %let optnclus = &OPTNCL;
20223 +
20224 +   data varclus_tmp(drop=_NCL_ _NAME_);
20225 +      set &statDs;
20226 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20227 +   run;
20228 +   proc sort data=varclus_tmp;
20229 +      by _TYPE_;
20230 +   run;
20231 +   proc transpose data=varclus_tmp out=varclus_tmp;
20232 +      by _TYPE_;
20233 +   run;
20234 +   proc sort data=varclus_tmp;
20235 +      by _name_ _type_;
20236 +   run;
20237 +
20238 +  proc transpose data=varclus_tmp out=&groupds;
20239 +      by _NAME_;
20240 +   run;
20241 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20242 +      by Cluster descending Rsquare;
20243 +      where Cluster ne 0;
20244 +   run;
20245 +   proc datasets lib=work nolist mt=(DATA VIEW);
20246 +      delete varclus_tmp;
20247 +   run;
20248 +   quit;
20249 +%mend findClusNum;
20250 +*/
20251 +
20252 +%macro getNclusfromTrain(inoutstat=, nc=);
20253 +%global &nc;
20254 +data _null_;
20255 +    set &inoutstat end=eof;
20256 +    if eof then do;
20257 +    call symput("&nc", _ncl_);
20258 +    end;
20259 +run;
20260 +%mend  getNclusfromTrain;
20261 +
20262 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20263 +
20264 +     *--- Build Code to Modify Metadata ---*;
20265 +     filename X "&deltacodefile";
20266 +     data _null_;
20267 +        FILE X;
20268 +        set &groupds end=eof;
20269 +        /*by Cluster;*/
20270 +         if _N_=1 then do;
20271 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20272 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20273 +           %end;
20274 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20275 +           put "if upcase(strip(NAME)) in (";
20276 +        end;
20277 +        if Strip(upcase(Selected)) eq 'YES' then do;
20278 +           string = '"'!!trim(left(VARIABLE))!!'"';
20279 +           put string;
20280 +        end;
20281 +        if eof then do;
20282 +           put ') then ROLE="INPUT";';
20283 +           put 'else ROLE="REJECTED";';
20284 +           put 'end;';
20285 +
20286 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20287 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20288 +           %end;
20289 +        end;
20290 +     run;
20291 +     quit;
20292 +
20293 +     filename X;
20294 +
20295 +     quit;
20296 +%mend MakeDeltaCode;
20297 +
20298 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20299 +    %if ^%sysfunc(exist(&statds)) %then %do;
20300 +         %goto doendc;
20301 +    %end;
20302 +
20303 +    data &corrds(drop=_TYPE_ _NCL_) ;
20304 +       set &statds;
20305 +       where _type_ eq 'CORR' ;
20306 +    run ;
20307 +    proc sort data=&corrds;
20308 +       by _NAME_ ;
20309 +    run ;
20310 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20311 +      BY _NAME_ ;
20312 +    run ;
20313 +    data &corrplotds;
20314 +       length _Y_ $100;
20315 +       set &corrplotDs;
20316 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20317 +    run ;
20318 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20319 +       set &corrplotds;
20320 +       where _LABEL_ ne '' ;
20321 +       keep _TMP_ _LABEL_ ;
20322 +    run ;
20323 +    data _null_;
20324 +       nobs=0;
20325 +       dsid = open('varclus_match');
20326 +       if dsid then do;
20327 +          nobs = attrn(dsid, 'NOBS');
20328 +          dsid = close(dsid);
20329 +       end;
20330 +       call symput ('CORR_NOBS', nobs);
20331 +    run;
20332 +    %if &corr_nobs %then %do;
20333 +        proc sort data=varclus_match;
20334 +           by _name_;
20335 +        run ;
20336 +        proc sort data=&corrplotds;
20337 +           by _name_;
20338 +        run ;
20339 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20340 +           merge varclus_match &corrplotds;
20341 +           by _NAME_ ;
20342 +           if _X_ eq '' then _X_=_NAME_ ;
20343 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20344 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20345 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20346 +
20347 +       run ;
20348 +    %end;
20349 +    %else %do;
20350 +        proc sort data=&corrplotds;
20351 +           by _name_;
20352 +        run ;
20353 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20354 +           set &corrplotds;
20355 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20356 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20357 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20358 +
20359 +        run ;
20360 +    %end;
20361 +    proc sort data=&corrplotds;
20362 +       by _X_ _Y_;
20363 +    run ;
20364 +    proc datasets lib=work nolist mt=(DATA VIEW);
20365 +       delete varclus_match;
20366 +    run;
20367 +    quit;
20368 +
20369 +%doendc:
20370 +
20371 +%mend MakeVarClusCorrData;
20372 +
20373 +%macro MakeStatPlotData(statds= , outstatplotds=);
20374 +   %if %sysfunc(exist(&statds)) %then %do;
20375 +
20376 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20377 +          set &statDs;
20378 +          where _type_ in('MEAN', 'STD', 'N');
20379 +       run ;
20380 +       proc transpose data=varclus_tmp out=&outstatplotds;
20381 +          id _TYPE_ ;
20382 +       run ;
20383 +       data &outstatplotds;
20384 +          set &outstatplotds(obs=1000);
20385 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20386 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20387 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20388 +          else SCALEDSTD= STD ;
20389 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20390 +       run ;
20391 +       proc sort data=&outstatplotds;
20392 +          by descending SCALEDSTD ;
20393 +       run ;
20394 +       proc datasets lib=work nolist mt=(DATA VIEW);
20395 +          delete varclus_tmp;
20396 +       run;
20397 +       quit;
20398 +    %end;
20399 +
20400 +%mend MakeStatPlotData;
20401 +
20402 +
20403 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20404 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20405 +    data &EM_USER_OUTSTATSCORE;
20406 +          set &indata;
20407 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20408 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20409 +          if _TYPE_ = 'STD' then _NAME_='STD';
20410 +          DROP _TYPE_ _NCL_;
20411 +     run;
20412 +
20413 +     filename _file_  "&fileRef";
20414 +
20415 +     data _null_;
20416 +        FILE _file_ MOD;
20417 +        put ' ';
20418 +        put '/*-------------------------------------------------*/';
20419 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20420 +        put '/*-------------------------------------------------*/';
20421 +        put ' ';
20422 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20423 +
20424 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20425 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20426 +
20427 +        %let k = 1;
20428 +        %do %while(^%sysfunc(fetch(&dsid)));
20429 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20430 +                %if &k > 2 %then %do;
20431 +                 %let cn = %eval(&k-2);
20432 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
20433 +                %end;
20434 +                %let k = %eval(&k+1);
20435 +        %end;
20436 +
20437 +        %let rc = %sysfunc(rewind(&dsid));
20438 +
20439 +        %do i= 2 %to &nvar;
20440 +            %let _varname =  %sysfunc(varname(&dsid, &i));
20441 +            %do %while(^%sysfunc(fetch(&dsid)));
20442 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20443 +                %if &_name = MEAN %then
20444 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20445 +                %else %if &_name = STD %then
20446 +                %let _std = %sysfunc(getvarn(&dsid, &i));
20447 +                %else %do;
20448 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20449 +                      %let abscoeff = %sysfunc(abs(&coeff));
20450 +                          %if &abscoeff >  0 %then %do;
20451 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20452 +                           %end;
20453 +                 %end;
20454 +             %end;
20455 +             %let rc = %sysfunc(rewind(&dsid));
20456 +         %end;
20457 +
20458 +        %let dsid= %sysfunc(close(&dsid));
20459 +       run;
20460 +%mend CreateScoreCode;
20461 +
20462 +
20463 +
20464 +/*----------------------------------------------------------
20465 +    Instead of using %MakeRSquareData,
20466 +    %MakeVarClusResultTable at macro2.source is used
20467 + +----------------------------------------------------------*/
20468 +
20469 +
20470 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
20471 +
20472 +/* modifying  from ods rsquare = data */
20473 +
20474 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
20475 +    Length Cluster $16;
20476 +    length Variable $32;
20477 +    Length VariableLabel $64;
20478 +    set &indata; retain CurrentCluster;
20479 +    if NumberOfClusters ^= &ncluster then delete;
20480 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
20481 +    CurrentCluster = Cluster;
20482 +   run;
20483 +proc sort data =&outdata ;
20484 +     by Cluster RsquareRatio;
20485 +run;
20486 +data _tmprsq(drop=index);
20487 +     set &outdata; by Cluster;
20488 +     if first.Cluster then do;
20489 +     index = strip(scan(Cluster,2 ));
20490 +     Variable = "Clus"||index;
20491 +     VariableLabel = "Cluster Component "||index;
20492 +     OwnCluster = 1;
20493 +     NextClosest = .;
20494 +     RsquareRatio = 0;
20495 +     output;
20496 +     end;
20497 +run;
20498 +
20499 +proc sort data = _tmprsq ;
20500 +     by Cluster RsquareRatio;
20501 +run;
20502 +data &outdata;
20503 +     set &outdata _tmprsq;
20504 +by Cluster;
20505 +run;
20506 +
20507 +
20508 +/* Just create the Selected variable with all YES */
20509 +
20510 +data &outdata;
20511 +    set &outdata; by cluster;
20512 +    length Selected $8;
20513 +    Selected = 'YES';
20514 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20515 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20516 +    rename OwnCluster = RSqWithClusterComp;
20517 +    rename NextClosest = RSqWithNextClusComp;
20518 +run;
20519 +
20520 +
20521 +/* Selected = Y/N will be done %score section -----
20522 +
20523 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
20524 +data &outdata;
20525 +    set &outdata; by cluster;
20526 +    length Selected $8;
20527 +    if first.Cluster then Selected = 'YES';
20528 +    else Selected = 'NO';
20529 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20530 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20531 +    rename OwnCluster = RSqWithClusterComp;
20532 +    rename NextClosest = RSqWithNextClusComp;
20533 +run;
20534 +%end;
20535 +%else %do;
20536 +data &outdata;
20537 +    set &outdata; by cluster;
20538 +    if last.Cluster then Selected = 'YES';
20539 +    else Selected = 'NO';
20540 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20541 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20542 +    rename OwnCluster = RSqWithClusterComp;
20543 +    rename NextClosest = RSqWithNextClusComp;
20544 +run;
20545 +%end;
20546 +---------------------------------------------------------------*/
20547 +
20548 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
20549 +/* to calculate NextClosestClusRsq */
20550 +proc transpose data = &inClusRSquare  out=_clusRsq;
20551 +      by cluster;
20552 +      run;
20553 +data _clusRsq;
20554 +     set _clusRsq;
20555 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
20556 +run;
20557 +
20558 +proc sort data=_clusRsq;
20559 +    by cluster col1;
20560 +    run;
20561 +data _clusRsq(drop=_NAME_ _LABEL_);
20562 +     set _clusRsq; by cluster;
20563 +     if last.Cluster then output;
20564 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
20565 +     rename COL1 = RSqWithNextClusComp;
20566 +     rename Cluster = Variable;
20567 +     label  Cluster = "Variable";
20568 +run;
20569 +
20570 +proc sort data =&outdata;
20571 +     by Variable;
20572 +run;
20573 +data &outdata;
20574 +    merge &outdata _clusRsq;
20575 +    by Variable;
20576 +run;
20577 +proc sort data =&outdata;
20578 +by Cluster  RsquareRatio;
20579 +run;
20580 +quit;
20581 +%end;
20582 +
20583 +proc datasets lib = work nolist;
20584 +     delete _tmprsq _clusRsq;
20585 +     run;
20586 +quit;
20587 +
20588 +%mend MakeRSquareData;
20589 +
20590 +
20591 +/*-------------------------------------------------------------------------*/
20592 +
20593 +
20594 +
20595 +%macro ModifyCorr(indata=,
20596 +                  outdata=,
20597 +                  rsquare = Y
20598 +                  );
20599 +    data corr_tmp;
20600 +        set &indata;
20601 +    run;
20602 +     proc sql;
20603 +           update &indata
20604 +           set
20605 +     %let dsid = %sysfunc(open(work.corr_tmp));
20606 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
20607 +          %do i = 4 %to &nvar;
20608 +          %let _name = %sysfunc(varname(&dsid, &i));
20609 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
20610 +            %else  %let _name_md = &_name;
20611 +            %if &i < &nvar %then %do;
20612 +               &_name = 1- &_name_md ,
20613 +            %end;
20614 +            %else %do;
20615 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
20616 +            %end;
20617 +          %end;
20618 +      %let dsid= %sysfunc(close(&dsid));
20619 +
20620 +      select * from &indata;
20621 +      run;
20622 +      proc datasets lib = work nolist;
20623 +           delete corr_tmp;
20624 +      run;
20625 +      quit;
20626 +
20627 + %mend ModifyCorr;
20628 +
20629 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
20630 +    data &outdata(drop= _NCL_  _TYPE_);
20631 +       set &indata;
20632 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
20633 +       rename _NAME_ = Cluster;
20634 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20635 +    run;
20636 +    %if &RSquare eq Y %then %do;
20637 +     data corr_tmp;
20638 +        set &outdata;
20639 +     run;
20640 +
20641 +     data &outdata(drop=i);
20642 +          set &outdata;
20643 +          %let dsid = %sysfunc(open(work.corr_tmp));
20644 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20645 +          %do i = 2 %to &nvar;
20646 +            %let _name = %sysfunc(varname(&dsid, &i));
20647 +            %let _name_md = &_name.**2;
20648 +                &_name = &_name_md;
20649 +          %end;
20650 +      %let dsid= %sysfunc(close(&dsid));
20651 +      run;
20652 +      proc datasets lib = work nolist;
20653 +           delete corr_tmp;
20654 +      run;
20655 +
20656 +    %end;
20657 +     quit;
20658 +%mend MakeClusStructCorrData;
20659 +
20660 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
20661 +    data &outdata(drop= _NCL_  _TYPE_);
20662 +       set &indata;
20663 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20664 +       rename _NAME_ = Cluster;
20665 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20666 +    run;
20667 +    data corr_tmp;
20668 +        set &outdata;
20669 +    run;
20670 +
20671 +    %let dsid = %sysfunc(open(work.corr_tmp));
20672 +    %let nclus2= %eval(&ncluster+1);
20673 +    data &outdata;
20674 +         set &outdata;
20675 +          %do i = 2 %to &nclus2;
20676 +          %let i_1 = %eval(&i-1);
20677 +            %let _name = %sysfunc(varname(&dsid, &i));
20678 +            %let _newName = Clus&i_1;
20679 +                rename &_name = &_newName; ;
20680 +                *label &_name ="Cluster &i_1";
20681 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20682 +          %end;
20683 +          keep Cluster
20684 +          %do i = 2 %to &nclus2;
20685 +                %let _name = %sysfunc(varname(&dsid, &i));
20686 +                &_name
20687 +          %end;
20688 +          ;
20689 +    %let dsid= %sysfunc(close(&dsid));
20690 +     run;
20691 +     quit;
20692 +
20693 +    %if &RSquare eq Y %then %do;
20694 +
20695 +       data corr_tmp;
20696 +        set &outdata;
20697 +     run;
20698 +
20699 +     data &outdata(drop=i);
20700 +          set &outdata;
20701 +          %let dsid = %sysfunc(open(work.corr_tmp));
20702 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20703 +          %do i = 2 %to &nvar;
20704 +            %let _name = %sysfunc(varname(&dsid, &i));
20705 +            %let _name_md = &_name.**2;
20706 +                &_name = &_name_md;
20707 +          %end;
20708 +      %let dsid= %sysfunc(close(&dsid));
20709 +      run;
20710 +    %end;
20711 +
20712 +    %if &makeplotds eq Y %then %do;
20713 +     proc transpose data = &outdata
20714 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20715 +          by cluster;
20716 +     run;
20717 +     data &plotds;
20718 +          set  &plotds;
20719 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20720 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20721 +     run;
20722 +     %end;
20723 +     proc datasets lib = work nolist;
20724 +           delete corr_tmp;
20725 +     run;
20726 +     quit;
20727 +%mend MakeInterClusCorrData;
20728 +
20729 +
20730 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20731 +
20732 +data &outlink(drop = Selected);
20733 +     set &indata;
20734 +     LINKID = _N_;
20735 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20736 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20737 +run;
20738 +data &outnode(keep=NODEID TYPE LABEL);
20739 +    set &indata;
20740 +    length TYPE $16;
20741 +    rename Variable = NODEID;
20742 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20743 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20744 +    then  TYPE = "CLUSTER";
20745 +    else  TYPE="VARIABLE";
20746 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20747 +run;
20748 +quit;
20749 +%mend MakeClusConstellData;
20750 +
20751 +
20752 +
20753 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20754 +
20755 +data &outlink(drop = Selected);
20756 +     set &indata;
20757 +     LINKID = _N_;
20758 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20759 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20760 +run;
20761 +data &outnode(keep=NODEID TYPE LABEL);
20762 +    set &indata;
20763 +    length TYPE $16;
20764 +    rename Variable = NODEID;
20765 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20766 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20767 +    then  TYPE = "CLUSTER";
20768 +    else  TYPE="VARIABLE";
20769 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20770 +run;
20771 +quit;
20772 +%mend MakeClusConstellData;
20773 +
20774 +
20775 +/*--- This will work only when inds is not a view data -------
20776 +
20777 +%macro getNVarNObs(inds=, nvar=, nobs=);
20778 +
20779 +    %global &nvar;
20780 +    %global &nobs;
20781 +    data _null_;
20782 +         dsid = open("&inds");
20783 +         nv = attrn(dsid, 'NVAR');
20784 +         no = attrn(dsid, 'NOBS');
20785 +         dsid = close(dsid);
20786 +         call symput("&nvar", nv);
20787 +         call symput("&nobs", no);
20788 +    run;
20789 +    quit;
20790 +%mend  getNVarNObs;
20791 +
20792 ++---------------------------------------------------------------*/
20793 +
20794 +
20795 +%macro getNVar(inds=, nvar=);
20796 +    %global &nvar;
20797 +    data _null_;
20798 +         dsid = open("&inds");
20799 +         nv = attrn(dsid, 'NVAR');
20800 +         dsid = close(dsid);
20801 +         call symput("&nvar", nv);
20802 +    run;
20803 +    quit;
20804 +%mend  getNVar;
20805 +
20806 +
20807 +
20808 +%macro getNObs(inds=, nobs=);
20809 +    %global &nobs;
20810 +    data _null_;
20811 +        set &inds end=eof;
20812 +        if eof then call symput("&nobs", _N_);
20813 +    run;
20814 +    quit;
20815 +%mend  getNObs;
20816 +
20817 +%Macro CreateVarclusMeta(trainnum=);
20818 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
20819 +    data &EM_USER_VARCLUSMETA;
20820 +         length TrainNum 8.;
20821 +         length NewTrain $8;
20822 +         length NGCluster 8.;
20823 +         length ExportedComp $16;
20824 +         length HideVariable $8;
20825 +         TrainNum = &trainnum;
20826 +         NewTrain = "Y";
20827 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
20828 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
20829 +         NGCluster = 0; /* zero means no twostage */
20830 +   run;
20831 +   quit;
20832 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
20833 +
20834 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
20835 +    data &outdata(drop= _NCL_  _TYPE_);
20836 +       set &indata;
20837 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20838 +       %if &globalclusid ne %then %do;
20839 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
20840 +       rename _NAME_ = Cluster;
20841 +       %end;
20842 +       %else %do;
20843 +        _NAME_ = upcase(_NAME_);
20844 +       rename _NAME_ = Cluster;
20845 +       %end;
20846 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20847 +    run;
20848 +    data corr_tmp;
20849 +        set &outdata;
20850 +    run;
20851 +
20852 +    %let dsid = %sysfunc(open(work.corr_tmp));
20853 +    %let nclus2= %eval(&ncluster+1);
20854 +    data &outdata;
20855 +         set &outdata;
20856 +          %do i = 2 %to &nclus2;
20857 +          %let i_1 = %eval(&i-1);
20858 +            %let _name = %sysfunc(varname(&dsid, &i));
20859 +            %if &globalclusid ne %then
20860 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
20861 +                     rename &_name = &_newName;
20862 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
20863 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
20864 +                %end;
20865 +            %else
20866 +                %do; %let _newName = CLUS&i_1;
20867 +                     rename &_name = &_newName;
20868 +                     *label &_name ="Cluster &i_1";
20869 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20870 +                %end;
20871 +          %end;
20872 +          keep Cluster
20873 +          %do i = 2 %to &nclus2;
20874 +                %let _name = %sysfunc(varname(&dsid, &i));
20875 +                &_name
20876 +          %end;
20877 +          ;
20878 +    %let dsid= %sysfunc(close(&dsid));
20879 +     run;
20880 +     quit;
20881 +
20882 +    %if &RSquare eq Y %then %do;
20883 +
20884 +       data corr_tmp;
20885 +        set &outdata;
20886 +     run;
20887 +
20888 +     data &outdata;
20889 +          set &outdata;
20890 +          %let dsid = %sysfunc(open(work.corr_tmp));
20891 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20892 +          %do i = 2 %to &nvar;
20893 +            %let _name = %sysfunc(varname(&dsid, &i));
20894 +            %let _name_md = &_name.**2;
20895 +                &_name = &_name_md;
20896 +          %end;
20897 +      %let dsid= %sysfunc(close(&dsid));
20898 +      run;
20899 +    %end;
20900 +
20901 +    %if &makeplotds eq Y %then %do;
20902 +     proc transpose data = &outdata
20903 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20904 +          by cluster;
20905 +     run;
20906 +     data &plotds;
20907 +          set  &plotds;
20908 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20909 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20910 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20911 +     run;
20912 +     %end;
20913 +     proc datasets lib = work nolist;
20914 +           delete corr_tmp;
20915 +     run;
20916 +     quit;
20917 +%mend MakeInterClusCorrData;
20918 +
20919 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
20920 +    data _tmpds(drop= _NCL_);
20921 +       set &indata;
20922 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
20923 +       %if &globalclusid ne %then %do;
20924 +           _NAME_ = "GC&globalclusid.";
20925 +       rename _NAME_ = Cluster;
20926 +       %end;
20927 +       %else %do;
20928 +        _NAME_ = "CLUS";
20929 +        rename _NAME_ = Cluster;
20930 +       %end;
20931 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20932 +    run;
20933 +    proc transpose data =_tmpds out =&outdata;
20934 +    run;
20935 +
20936 +    data &outdata(drop=COL1);
20937 +        %if &globalclusid ne %then %do;
20938 +        length GCluster $16;
20939 +        %end;
20940 +        length Cluster $32;
20941 +        length _NAME_ $32;
20942 +         set &outdata;
20943 +         _NAME_ = upcase(_NAME_);
20944 +         rename _NAME_=Variable;
20945 +         *label _NAME_="Variable";
20946 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20947 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
20948 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20949 +
20950 +         %if &globalclusid ne %then %do;
20951 +          GCluster = "GC&globalclusid";
20952 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
20953 +         %end;
20954 +         %else %do;
20955 +         Cluster = "CLUS"||strip(COL1);
20956 +        %end;
20957 +         rename COL2 = RSqWithOwnClusComp;
20958 +         *label COL2 = "R-Square With Own Cluster Component";
20959 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
20960 +
20961 +   run;
20962 +   proc sort data =&outdata;
20963 +        by Cluster RSqWithOwnClusComp;
20964 +   run;
20965 +   proc datasets lib = work nolist;
20966 +           delete _tmpds;
20967 +   run;
20968 +   quit;
20969 +%mend MakeOwnRSquare;
20970 +
20971 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
20972 +    data &outdata(drop= _NCL_  _TYPE_);
20973 +       %if &globalclusid ne %then %do;
20974 +        length GCluster $16;
20975 +        %end;
20976 +       set &indata;
20977 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
20978 +       %if &globalclusid ne %then %do;
20979 +         GCluster = "GC&globalclusid";
20980 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
20981 +         rename _NAME_ = Cluster;
20982 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
20983 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20984 +
20985 +       %end;
20986 +       %else %do;
20987 +         _NAME_ = upcase(_NAME_);
20988 +         rename _NAME_ = Cluster;
20989 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
20990 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20991 +
20992 +       %end;
20993 +     run;
20994 +    %if &RSquare eq Y %then %do;
20995 +     data corr_tmp;
20996 +          set &outdata;
20997 +     run;
20998 +     %let istart = 2;
20999 +     %if &globalclusid ne %then %let istart = 3;
21000 +     data &outdata;
21001 +          set &outdata;
21002 +          %let dsid = %sysfunc(open(work.corr_tmp));
21003 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21004 +          %do i =&istart %to &nvar;
21005 +            %let _name = %sysfunc(varname(&dsid, &i));
21006 +            %let _name_md = &_name.**2;
21007 +                &_name = &_name_md;
21008 +          %end;
21009 +      %let dsid= %sysfunc(close(&dsid));
21010 +      run;
21011 +      proc datasets lib = work nolist;
21012 +           delete corr_tmp;
21013 +      run;
21014 +    %end;
21015 +     quit;
21016 +%mend MakeClusStructCorrData;
21017 +
21018 +/*
21019 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21020 +*/
21021 +
21022 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21023 +
21024 +     /* The indata should be the outdata
21025 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21026 +
21027 +     proc sort data =&indata out=_tmpclusRsq;
21028 +     by cluster;
21029 +     run;
21030 +
21031 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21032 +      by cluster;
21033 +     run;
21034 +
21035 +     proc sort data=_tmpclusRsq;
21036 +        by _NAME_ COL1;
21037 +     run;
21038 +
21039 +     data _tmpclusRsq;
21040 +         length _NAME_ $32;
21041 +         set _tmpclusRsq; by _NAME_;
21042 +          _NAME_ = upcase(_NAME_);
21043 +          %if &ncluster ne 1 %then %do;
21044 +             if last._NAME_ then delete;
21045 +          %end;
21046 +          %else %do;
21047 +             COL1 = 0;
21048 +          %end;
21049 +     run;
21050 +     /* need to sort again */
21051 +     proc sort data=_tmpclusRsq;
21052 +        by _NAME_ COL1;
21053 +     run;
21054 +
21055 +     data &outdata;
21056 +         set _tmpclusRsq; by _NAME_;
21057 +         Cluster = upcase(Cluster);
21058 +         if last._NAME_ then output;
21059 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21060 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21061 +         rename COL1 = RSqWithNextClusComp;
21062 +         Cluster = upcase(Cluster);
21063 +         rename Cluster = ClosestCluster;
21064 +         *label  Cluster = "Next Closest Cluster";
21065 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21066 +         rename _NAME_ = Variable;
21067 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21068 +    run;
21069 +
21070 +
21071 +    %if &globalclusid ne %then %do;
21072 +    data &outdata;
21073 +       length GCluster $16;
21074 +       set &outdata;
21075 +       GCluster = "GC&globalclusid";
21076 +       run;
21077 +    %end;
21078 +    proc datasets lib = work nolist;
21079 +           delete _tmpclusRsq;
21080 +    run;
21081 +    quit;
21082 +%mend FindNextClosestClusByVar;
21083 +
21084 +
21085 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21086 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21087 +     proc sort data =&indata out=_tmpclusRsq;
21088 +     by cluster;
21089 +     run;
21090 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21091 +     by cluster;
21092 +     run;
21093 +     proc sort data=_tmpclusRsq;
21094 +        by _NAME_ col1;
21095 +     run;
21096 +     data _tmpclusRsq;
21097 +         length _NAME_ $32;
21098 +         set _tmpclusRsq; by _NAME_;
21099 +          _NAME_ = upcase(_NAME_);
21100 +          %if &ncluster ne 1 %then %do;
21101 +             if last._NAME_ then delete;
21102 +          %end;
21103 +          %else %do;
21104 +             COL1 = 0;
21105 +          %end;
21106 +     run;
21107 +     data &outdata;
21108 +         set _tmpclusRsq; by _NAME_;
21109 +         Cluster = upcase(Cluster);
21110 +         if last._NAME_ then output;
21111 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21112 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21113 +         rename COL1 = RSqWithNextClusComp;
21114 +         Cluster = upcase(Cluster);
21115 +         rename Cluster = ClosestCluster;
21116 +         *label  Cluster = "Next Closest Cluster";
21117 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21118 +         rename _NAME_ = Variable;
21119 +         *label  _NAME_ = "Variable";
21120 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21121 +
21122 +    run;
21123 +    %if &globalclusid ne %then %do;
21124 +    data &outdata;
21125 +       length GCluster $16;
21126 +       set &outdata;
21127 +       GCluster = "GC&globalclusid";
21128 +       run;
21129 +    %end;
21130 +
21131 +    proc datasets lib = work nolist;
21132 +           delete _tmpclusRsq;
21133 +    run;
21134 +
21135 +    quit;
21136 +%mend FindNextClosestClusByCluster;
21137 +
21138 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21139 +/*----
21140 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21141 +-----------*/
21142 +
21143 +proc sort data =&indata1;
21144 +    by Variable;
21145 +run;
21146 +proc sort data =&indata2;
21147 +    by Variable;
21148 +run;
21149 +data &outdata;
21150 +    merge &indata1 &indata2;
21151 +    by Variable;
21152 +    length Type $16;
21153 +    Type = 'Variable';
21154 +    *label Type ='Type';
21155 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21156 +run;
21157 +
21158 +
21159 +data &indata3;
21160 +    set  &indata3 ;
21161 +    length RSqWithOwnClusComp 8.;
21162 +    Cluster = Variable;
21163 +    RSqWithOwnClusComp = 1;
21164 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21165 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21166 +    length Type $16;
21167 +    Type = 'ClusterComp';
21168 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21169 +
21170 +;
21171 +run;
21172 +
21173 +proc sort data=&outdata;
21174 +    by Cluster;
21175 +run;
21176 +proc sort data =&indata3;
21177 +    by Cluster;
21178 +run;
21179 +
21180 +data &outdata;
21181 +     set &outdata &indata3;
21182 +     by Cluster;
21183 +run;
21184 +
21185 +
21186 +/* Create the Selected variable with all YES */
21187 +
21188 +data &outdata;
21189 +     set &outdata;
21190 +     length RsqRatio 8.;
21191 +     length Selected $8;
21192 +     *label RSqRatio = "1-R**2 Ratio";
21193 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21194 +     *label Selected = "Variable Selected";
21195 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21196 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21197 +     Selected ='YES';
21198 +     rename _LABEL_ = Label;
21199 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21200 +run;
21201 +
21202 +
21203 +/*----  Selected = Y/N will be assigened at the %score                   -------+
21204 +        Just create the Selected variable with all YES at the step above
21205 + +------------------------------------------------------------------------------+
21206 +
21207 +proc sort data=&outdata;
21208 +    by Cluster RsqRatio;
21209 +run;
21210 +
21211 +%if &selectedcomp eq CLUSTERCOMP %then %do;
21212 +data &outdata;
21213 +     set &outdata; by Cluster;
21214 +     length Selected $8;
21215 +     label Selected = "Variable Selected";
21216 +     if  first.Cluster then Selected ='Yes';
21217 +     else Selected = 'No';
21218 +    run;
21219 +%end;
21220 +%else %do;
21221 +data &outdata(drop = _var _varchange);
21222 +     set &outdata; retain _var 0; by Cluster;
21223 +     length Selected $8;
21224 +     label Selected = "Variable Selected";
21225 +     if first.Cluster then  _varchange = 0;
21226 +     else _varchange =1;
21227 +     if _var ne _varchange then  Selected  = 'Yes';
21228 +     else Selected = 'No';
21229 +     if last.cluster then  _var = 0;
21230 +     else _var = _varchange;
21231 +run;
21232 +%end;
21233 +
21234 +--------------------------------------------------------------*/
21235 +
21236 +quit;
21237 +%mend MakeVarClusResultTable;
21238 +
21239 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21240 +     proc sort data =&indata;
21241 +        by cluster;
21242 +     run;
21243 +     proc transpose data =&indata
21244 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21245 +          by cluster;
21246 +     run;
21247 +     data &outdata;
21248 +          set  &outdata;
21249 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21250 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21251 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21252 +     run;
21253 +     %if &globalclusid ne %then %do;
21254 +     data &outdata;
21255 +          Length GCluster $16;
21256 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21257 +          set  &outdata;
21258 +          GCluster ="GC&globalclusid.";
21259 +          run;
21260 +     %end;
21261 +
21262 +%Mend MakePlotDataFromCorrTable;
21263 +
21264 +
21265 +%macro MakeCorrelation(indata=,
21266 +                       outstat=_tmpoutstat,
21267 +                       corrmatrix=N,
21268 +                       outcorr=_tmpoutcorr,
21269 +                       includeclassvar=N,
21270 +                       target=,
21271 +                       freq=,
21272 +                       weight=);
21273 +   %if &target eq  %then %do;
21274 +
21275 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21276 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21277 +       %if &includeclassvar eq Y %then %do;
21278 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21279 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21280 +          %do i = 2 %to &nvar;
21281 +          %let varname = %sysfunc(varname(&dsid, &i));
21282 +          &varname
21283 +          %end;
21284 +       %end;
21285 +       ;
21286 +      %if &freq ne  %then %do;
21287 +          freq &freq;
21288 +      %end;
21289 +      %if &weight ne  %then %do;
21290 +          weight &weight;
21291 +      %end;
21292 +
21293 +      run;
21294 +      %if &corrmatrix eq Y %then %do;
21295 +      data  &outcorr (drop = _NCL_ _TYPE_);
21296 +           set  &outstat ;
21297 +           if _TYPE_ ='CORR' then output;
21298 +      run;
21299 +      %end;
21300 +    %end;
21301 +    %else %do;
21302 +       proc corr data=&indata outp=&outstat noprint;
21303 +            var
21304 +       %let dsid = %sysfunc(open(&indata));
21305 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21306 +          %do i = 1 %to &nvar;
21307 +              %let _name = %sysfunc(varname(&dsid, &i));
21308 +              %if &_name ne &target %then;
21309 +              &_name
21310 +           %end;
21311 +        %let dsid= %sysfunc(close(&dsid));
21312 +        ;
21313 +        with &target;
21314 +        run;
21315 +    %end;
21316 +    quit;
21317 +%mend MakeCorrelation;
21318 +
21319 +
21320 +%macro MakeCorrelationDistance(indata=,
21321 +                               outdata=,
21322 +                               rsquare = N
21323 +                               );
21324 +    data corr_tmp;
21325 +        set &indata;
21326 +        if _N_ = 1 then do;
21327 +           output;
21328 +           stop;
21329 +         end;
21330 +    run;
21331 +    %if &outdata ne  %then %let  _outdata = &outdata;
21332 +    %else %let _outdata = &indata;
21333 +
21334 +    data &_outdata;
21335 +         set &indata;
21336 +
21337 +         %let dsid = %sysfunc(open(work.corr_tmp));
21338 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21339 +          %do i = 2 %to &nvar;
21340 +              %let _name = %sysfunc(varname(&dsid, &i));
21341 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21342 +              %else  %let _name_md = &_name;
21343 +              &_name = 1- &_name_md;
21344 +          %end;
21345 +      %let dsid= %sysfunc(close(&dsid));
21346 +      run;
21347 +      proc datasets lib = work nolist;
21348 +           delete corr_tmp;
21349 +      run;
21350 +      quit;
21351 +  %mend MakeCorrelationDistance;
21352 +
21353 +
21354 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21355 +                                   rsquare = N
21356 +                                   );
21357 +    data corr_tmp;
21358 +        set &indata;
21359 +    run;
21360 +    proc sql noprint;
21361 +           update &indata
21362 +           set
21363 +     %let dsid = %sysfunc(open(work.corr_tmp));
21364 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21365 +          %do i = 4 %to &nvar;
21366 +          %let _name = %sysfunc(varname(&dsid, &i));
21367 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21368 +            %else  %let _name_md = &_name;
21369 +            %if &i < &nvar %then %do;
21370 +               &_name = 1- &_name_md ,
21371 +            %end;
21372 +            %else %do;
21373 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21374 +            %end;
21375 +          %end;
21376 +      %let dsid= %sysfunc(close(&dsid));
21377 +
21378 +      select * from &indata;
21379 +      run;
21380 +     data &indata( drop = _NCL_);
21381 +           set &indata;
21382 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21383 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21384 +     run;
21385 +     data &indata(DROP = _NCL_);
21386 +           set &indata;
21387 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21388 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21389 +           rename _NAME_ = _VAR_;
21390 +     run;
21391 +     proc datasets lib = work nolist;
21392 +           delete corr_tmp;
21393 +     run;
21394 +     quit;
21395 + %mend UpdateOutStatCorrToDistance;
21396 +
21397 +
21398 +%macro HierClusWithCorr(indata= ,
21399 +                        ncluster=,
21400 +                        method = Ward,
21401 +                        outtree = _outtree,
21402 +                        idvar =_VAR_,
21403 +                        outdata=,
21404 +                        rescore = N,
21405 +                        newncluster=
21406 +                        );
21407 +      %global &newncluster;
21408 +      %if &rescore ne Y %then %do;
21409 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21410 +                   method=&method outtree=&outtree noprint;
21411 +           id &idvar;
21412 +      run;
21413 +      %end;
21414 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21415 +      run;
21416 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21417 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21418 +      run;
21419 +      data _outcontent;
21420 +          set _outcontent;
21421 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21422 +          index = 1;
21423 +          rename NAME = _NAME_;
21424 +      run;
21425 +      proc sort data=_outcontent;
21426 +          by _NAME_;
21427 +      run;
21428 +      proc sort data =&outdata;
21429 +           by _NAME_;
21430 +      run;
21431 +      data &outdata(drop=index);
21432 +          merge &outdata _outcontent;
21433 +          by _NAME_;
21434 +          if index = . then delete;
21435 +      run;
21436 +      /*-----------------------------------------------------------*/
21437 +      data &outdata;
21438 +           length CLUSNAME $16;
21439 +           set &outdata;
21440 +           if CLUSTER > &ncluster then delete;
21441 +           CLUSNAME='GC'||strip(CLUSTER);
21442 +           *label CLUSNAME = "Cluster Name";
21443 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
21444 +           rename _NAME_ = VARIABLE ;
21445 +           *label _NAME_ = "Variable";
21446 +           *label CLUSTER = "Cluster";
21447 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21448 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21449 +      run;
21450 +      proc sort data=&outdata out=&outdata;
21451 +           by CLUSTER;
21452 +      run;
21453 +      proc means data =&outdata noprint;
21454 +           output out=_meanout;
21455 +      run;
21456 +      data _null_;
21457 +            set _meanout;
21458 +            if strip(_STAT_) eq 'MAX' then do;
21459 +            call symput("&newncluster", CLUSTER);
21460 +            stop;
21461 +            end;
21462 +      run;
21463 +
21464 +      proc datasets lib = work nolist;
21465 +           delete _outcontent _meanout;
21466 +      run;
21467 +      quit;
21468 +%mend  HierClusWithCorr;
21469 +
21470 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
21471 +
21472 +     data _tmpindata;
21473 +          set &indata;
21474 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21475 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21476 +          if _TYPE_ = 'STD' then _NAME_='STD';
21477 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
21478 +          DROP _TYPE_ _NCL_;
21479 +     run;
21480 +
21481 +     filename _file_  "&fileRef";
21482 +
21483 +     data _null_;
21484 +        FILE _file_ MOD;
21485 +        put ' ';
21486 +        put "/*-------------------------------------------------*/";
21487 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
21488 +        put "/*-------------------------------------------------*/";
21489 +        put ' ';
21490 +        %let dsid = %sysfunc(open(work._tmpindata));
21491 +
21492 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21493 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21494 +        %let k = 1;
21495 +        %do %while(^%sysfunc(fetch(&dsid)));
21496 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21497 +               %if &k > 2 %then %do;
21498 +                %let cn = %eval(&k-2);
21499 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
21500 +                %end;
21501 +                %let k = %eval(&k+1);
21502 +
21503 +        %end;
21504 +        %let rc = %sysfunc(rewind(&dsid));
21505 +
21506 +        %do j= 2 %to &nvar;
21507 +            %let _varname = %sysfunc(varname(&dsid, &j));
21508 +            %do %while(^%sysfunc(fetch(&dsid)));
21509 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21510 +                %if &_name = MEAN %then
21511 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
21512 +                %else %if &_name = STD %then
21513 +                %let _std = %sysfunc(getvarn(&dsid, &j));
21514 +                %else %do;
21515 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
21516 +                      %let abscoeff = %sysfunc(abs(&coeff));
21517 +                          %if &abscoeff >  0 %then %do;
21518 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21519 +                           %end;
21520 +                 %end;
21521 +             %end;
21522 +             %let rc = %sysfunc(rewind(&dsid));
21523 +         %end;
21524 +
21525 +        %let dsid= %sysfunc(close(&dsid));
21526 +
21527 +     run;
21528 +
21529 +     filename _file_;
21530 +     proc datasets lib = work nolist;
21531 +           delete _tmpindata;
21532 +     run;
21533 +     quit;
21534 +%mend CreateScoreCode2;
21535 +
21536 +
21537 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
21538 +
21539 +     /*--- Build Code to Modify Metadata ---*/
21540 +     filename X "&deltacodefile";
21541 +     data _null_;
21542 +        FILE X;
21543 +        set &groupds end=eof;
21544 +        if _N_=1 then do;
21545 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21546 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21547 +           %end;
21548 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21549 +           put "if upcase(strip(NAME)) in (";
21550 +        end;
21551 +        if Strip(upcase(Selected)) eq 'YES' then do;
21552 +           string = '"'!!trim(left(VARIABLE))!!'"';
21553 +           put string;
21554 +        end;
21555 +        if eof then do;
21556 +           put ') then ROLE="INPUT";';
21557 +           put 'else ROLE="REJECTED";';
21558 +           put 'end;';
21559 +
21560 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21561 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21562 +           %end;
21563 +        end;
21564 +     run;
21565 +     quit;
21566 +
21567 +     filename X;
21568 +     quit;
21569 +%mend MakeDeltaCode2;
21570 +
21571 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
21572 +  %global &ngc;
21573 +  data _null_;
21574 +  %if &indata ne %then %do;
21575 +      %let dsid = %sysfunc(open(&indata));
21576 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
21577 +      %let dsid = %sysfunc(close(&dsid));
21578 +  %end;
21579 +  %else %do;
21580 +       %let nvar = %eval(&ninput+&ndummy); ;
21581 +  %end;
21582 +  %let numgc = %eval(&nvar/&div+2);
21583 +  %let &ngc = &numgc;
21584 +   run;
21585 +  quit;
21586 +%mend getInitialGClusterNumber;
21587 +
21588 +
21589 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
21590 +data &outlink(drop = Selected);
21591 +     set &indata;
21592 +     LINKID = _N_;
21593 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
21594 +run;
21595 +data &outnode(keep=NODEID TYPE LABEL);
21596 +    set &indata;
21597 +    length TYPE $16;
21598 +    rename VARIABLE = NODEID;
21599 +    *label  CLUSNAME="Node ID";
21600 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21601 +    TYPE = "VARIABLE";
21602 +    *label TYPE = "Node Type";
21603 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21604 +    run;
21605 +data _tmp(keep=NODEID TYPE LABEL);
21606 +    set &indata;
21607 +    length TYPE $16;
21608 +    rename CLUSNAME = NODEID;
21609 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21610 +    TYPE = "GCLUSTER";
21611 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21612 +    run;
21613 +proc sort data=_tmp;
21614 +    by NODEID;
21615 +run;
21616 +data _tmp;
21617 +    set _tmp; by NODEID;
21618 +    if first.NODEID then output;
21619 +run;
21620 +proc sort data=&outnode;
21621 +    by NODEID;
21622 +run;
21623 +data  &outnode;
21624 +    set _tmp &outnode;
21625 +run;
21626 +proc datasets lib = work nolist;
21627 +     delete _tmp;
21628 +run;
21629 +quit;
21630 +%mend MakeGobalConstellData;
21631 +
21632 +/* Make contellation plot data among GCLUSTERS */
21633 +
21634 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
21635 +
21636 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
21637 +     set &indata;
21638 +     LINKID = _N_;
21639 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
21640 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
21641 +     end;
21642 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
21643 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
21644 +     end;
21645 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
21646 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
21647 +    end;
21648 +run;
21649 +
21650 +data _tmp_outrsquare;
21651 +        set &inoutrsq;
21652 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21653 +run;
21654 +
21655 +proc freq data =_tmp_outrsquare noprint;
21656 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
21657 +run;
21658 +
21659 +data &outnode(keep=_NAME_ TYPE LABEL);
21660 +    set &outlink;
21661 +    length TYPE $16;
21662 +    length LABEL $100;
21663 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
21664 +
21665 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21666 +    TYPE = "GCLUSTER";
21667 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21668 +    end;
21669 +    else do;
21670 +    TYPE= "ROOT";
21671 +    LABEL= _NAME_;
21672 +    end;
21673 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21674 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21675 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21676 +    run;
21677 +
21678 +proc sort data=&outnode;
21679 +     by _NAME_;
21680 +proc sort data=_tmp_GCLUSFREQ;
21681 +     by _NAME_;
21682 +run;
21683 +
21684 +data  &outnode;
21685 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
21686 +     if COUNT=. then COUNT=1;
21687 +run;
21688 +
21689 +proc datasets lib = work nolist;
21690 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
21691 +run;
21692 +
21693 +quit;
21694 +%Mend MakeGClusterConstData;
21695 +
21696 +
21697 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
21698 +
21699 +    data _gscoretmpds;
21700 +          set &indata;
21701 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
21702 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21703 +          if _TYPE_ = 'STD' then _NAME_='STD';
21704 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
21705 +          DROP _TYPE_ _NCL_;
21706 +     run;
21707 +
21708 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
21709 +        GCluster Component &globalclusid ------ */
21710 +
21711 +    filename _file_  "&fileref";
21712 +
21713 +    data _null_;
21714 +        %if &globalclusid eq 1 %then %do;
21715 +          FILE _file_;
21716 +        %end;
21717 +        %else %do;
21718 +          FILE _file_ MOD;
21719 +        %end;
21720 +
21721 +        %let dsid = %sysfunc(open(work._gscoretmpds));
21722 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21723 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21724 +
21725 +        %let k = 1;
21726 +        %do %while(^%sysfunc(fetch(&dsid)));
21727 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21728 +                %if &k > 2 %then %do;
21729 +                put "&_name = 0 ; ";
21730 +                %end;
21731 +                %let k = %eval(&k+1);
21732 +        %end;
21733 +
21734 +        %let rc = %sysfunc(rewind(&dsid));
21735 +        %do i= 2 %to &nvar;
21736 +            %let _varname =  %sysfunc(varname(&dsid, &i));
21737 +            %do %while(^%sysfunc(fetch(&dsid)));
21738 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21739 +                %if &_name = MEAN %then
21740 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21741 +                %else %if &_name = STD %then
21742 +                %let _std = %sysfunc(getvarn(&dsid, &i));
21743 +                %else %do;
21744 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21745 +                      %let abscoeff = %sysfunc(abs(&coeff));
21746 +                          %if &abscoeff >  0 %then %do;
21747 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21748 +                           %end;
21749 +                 %end;
21750 +             %end;
21751 +             %let rc = %sysfunc(rewind(&dsid));
21752 +
21753 +         %end;
21754 +
21755 +        %let dsid= %sysfunc(close(&dsid));
21756 +       run;
21757 +
21758 +
21759 +       proc datasets lib=work nolist;
21760 +            delete _gscoretmpds;
21761 +       run;
21762 +      quit;
21763 +
21764 +%mend CreateGClusterScoreCode;
21765 +
21766 +
21767 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
21768 +
21769 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
21770 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
21771 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
21772 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
21773 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
21774 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
21775 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
21776 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
21777 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
21778 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
21779 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
21780 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
21781 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
21782 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
21783 +
21784 +   filename gsfile "&gscorecode";
21785 +
21786 +   data &EM_USER_GSCORE;
21787 +             set &indata;
21788 +             %include  gsfile;
21789 +        keep
21790 +        %do i=1 %to &ngcluster;
21791 +         %let gcvarname = GC&i;
21792 +         &gcvarname
21793 +        %end;
21794 +     ;
21795 +   run;
21796 +
21797 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
21798 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
21799 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
21800 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
21801 +    noprint  ;
21802 +     var
21803 +       %do i=1 %to &ngcluster;
21804 +         %let gcvarname = GC&i;
21805 +         &gcvarname
21806 +        %end;
21807 +   ;
21808 +   run;
21809 +
21810 +
21811 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
21812 +   data &EM_USER_GSCORECORRPLOT ;
21813 +        set &EM_USER_GSCORECORRPLOT;
21814 +        rename _X_ = X;
21815 +        rename _Y_ = Y;
21816 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21817 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21818 +   run;
21819 +
21820 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
21821 +
21822 +   data &EM_USER_GSCORETREE;
21823 +        length _NAME_ $32;
21824 +        length _LABEL_ $100;
21825 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
21826 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21827 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21828 +        end;else do;
21829 +         _LABEL_ = _NAME_;
21830 +        end;
21831 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21832 +
21833 +   run;
21834 +
21835 +   quit;
21836 +
21837 +%mend MakeGClusterCorrelation;
21838 +
21839 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
21840 +%macro report;
21841 +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
21842 +
21843 +    data _null_;
21844 +         set &EM_USER_VARCLUSMETA;
21845 +         if _N_=1 then
21846 +         call symput('_trainnum', TrainNum);
21847 +    run;
21848 +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
21849 +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
21850 +           %include temp;
21851 +           filename temp;
21852 +           %report1;
21853 +       %end;
21854 +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
21855 +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
21856 +           %include temp;
21857 +           filename temp;
21858 +           %report2;
21859 +    %end;
21860 +
21861 +   /* End of all runs, change the flag of newtrain to N */
21862 +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21863 +    data &EM_USER_VARCLUSMETA;
21864 +         set &EM_USER_VARCLUSMETA;
21865 +         NewTrain = "N";
21866 +    run;
21867 +    quit;
21868 +%mend report;
21869 +
21870 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      55071:166
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
21871 +%macro report1;
21873 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
21874 +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
21875 +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
21877 +   data &EM_USER_OUTVARSEL;
21878 +        set &EM_USER_OUTRSQUARE;
21879 +        if upcase(strip(SELECTED)) = 'YES' then output;
21880 +   run;
21882 +   data _tmp_outrsquare;
21883 +        set &EM_USER_OUTRSQUARE;
21884 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21885 +   run;
21887 +   proc freq data =_tmp_outrsquare noprint;
21888 +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
21889 +   run;
21891 +   proc datasets lib = work nolist;
21892 +     delete _tmp_outrsquare;
21893 +   run;
21895 +   data &EM_USER_CLUSFREQ;
21896 +       set &EM_USER_CLUSFREQ;
21897 +       label
21898 +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
21899 +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
21900 +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
21901 +       ;
21902 +   run;
21904 +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
21905 +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
21906 +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
21908 +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
21909 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
21910 +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
21911 +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
21912 +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
21913 +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
21914 +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
21915 +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
21917 +   /*
21918 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
21919 +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
21920 +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
21923 +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTVARSEL has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS5.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21926  *------------------------------------------------------------*;
21927  * End REPORT: VarClus;
21928  *------------------------------------------------------------*;
21929
 
21930  /* Reset EM Options */
21931  options formchar="|----|+|---+=|-/\<>*";
21932  options nocenter ls=256 ps=10000;
21933  goptions reset=all device=GIF NODISPLAY;
 
21934  proc sort data=WORK.EM_USER_REPORT;
21935  by ID VIEW;
21936  run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
