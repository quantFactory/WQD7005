*------------------------------------------------------------*
* Training Log
Date:                December 19, 2019
Time:                13:06:41
*------------------------------------------------------------*
14718  proc freq data=EMWS5.TSESM4_VariableSet noprint;
14719  table ROLE*LEVEL/out=WORK.TSESM4META;
14720  run;

NOTE: There were 6 observations read from the data set EMWS5.TSESM4_VARIABLESET.
NOTE: The data set WORK.TSESM4META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14721  proc print data=WORK.TSESM4META label noobs;
14722  var ROLE LEVEL COUNT;
14723  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14724  title9 ' ';
14725  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14726  run;

NOTE: There were 3 observations read from the data set WORK.TSESM4META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14727  title10;

14728  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15083  *------------------------------------------------------------*;
15084  * TSESM4: Generation of macros and macro variables;
15085  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15086  *------------------------------------------------------------*;

15087  %let EMEXCEPTIONSTRING=;
15088  *------------------------------------------------------------*;
15089  * TRAIN: TSESM4;
15090  *------------------------------------------------------------*;
15091  %let EM_ACTION = TRAIN;
15092  %let syscc = 0;
15093  
15094  %macro EM_TSESM_MAIN;
15095  
15096     filename temp catalog 'sashelp.emtsdm.tsesm_macros.source';
15097     %include temp;
15098     filename temp catalog 'sashelp.emtsdm.tsutility_macros.source';
15099     %include temp;
15100     filename temp;
15101  
15102     %if %upcase(&EM_ACTION) = CREATE %then %do;
15103         filename temp catalog 'sashelp.emtsdm.tsesm_create.source';
15104         %include temp;
15105         filename temp;
15106         %EM_TSESM_CREATE;
15107     %end;
15108     %else
15109     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15110          filename temp catalog 'sashelp.emtsdm.tsesm_train.source';
15111             %include temp;
15112             filename temp;
15113          %EM_TSESM_TRAIN;
15114     %end;
15115     %else
15116     %if %upcase(&EM_ACTION) = SCORE %then %do;
15117             filename temp catalog 'sashelp.emtsdm.tsesm_score.source';
15118             %include temp;
15119             filename temp;
15120           %EM_TSESM_SCORE;
15121     %end;
15122     %else
15123     %if %upcase(&EM_ACTION) = REPORT %then %do;
15124             filename temp catalog 'sashelp.emtsdm.tsesm_report.source';
15125             %include temp;
15126             filename temp;
15127            %EM_TSESM_REPORT;
15128     %end;
15129  %mend EM_TSESM_MAIN;
15130  %EM_TSESM_MAIN;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTSDM.TSESM_MACROS.SOURCE.
15131 +/*----------------------------------------------------------------------------------+
15132 + |
15133 + |   Title :  Time Series data Mining Forcating Macros
15134 + |
15135 + |   SUPPORT: Ruiwen Zhang (Ruiwen.Zhang@sas.com)
15136 + |
15137 + |
15138 + +-----------------------------------------------------------------------------------*/
15141 +%macro EM_TSESM_Forecast(indata=,
15142 +                method=,
15143 +                timeinterval=,
15144 +                timeid= ,
15145 +                target= ,
15146 +                tsidvar=,
15147 +                lead=,
15148 +                back=,
15149 +                startsum=,
15150 +                accumulate=,
15151 +                seasonality=,
15152 +                alpha=,
15153 +                extendedvalue=,
15154 +                outest = ,
15155 +                outdata = ,
15156 +                outfor = ,
15157 +                outstat = ,
15158 +                outsum=
15159 +   );
15162 +   %if &tsidvar eq _SEGMENT_ %then %do;
15163 +       proc sort data=&indata out=_tmpdata;
15164 +            by  &tsidvar %EM_CROSSID &timeid ;
15165 +       run;
15166 +       proc timeseries  data =_tmpdata out=_tmpdata;
15167 +            by  &tsidvar %EM_CROSSID;
15168 +            id &timeid interval=&timeinterval accumulate=&accumulate;
15169 +            var &target / ;
15170 +       run;
15171 +       proc esm data =_tmpdata
15172 +   %end;
15173 +   %else %do;
15174 +       proc sort data= &indata out=_tmpdata;
15175 +            by  &tsidvar %EM_CROSSID &timeid ;
15176 +       run;
15177 +       proc esm data = _tmpdata
15178 +   %end;
15179 +            lead=&lead  back=&back startsum=&startsum
15181 +   %if &seasonality ne DEFAULT %then %do;
15182 +            seasonality = &seasonality
15183 +   %end;
15186 +            out=&outdata
15187 +            outest=&outest
15188 +            outfor =&outfor
15189 +            outstat=&outstat
15190 +            outsum= &outsum
15191 +       ;
15192 +        id &timeid  interval = &timeinterval   accumulate=&accumulate ;
15194 +        %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
15195 +            %if &target ne %then %do;
15196 +            forecast &target   /  model = none alpha=&alpha;
15197 +            %end;
15198 +            %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15199 +            forecast %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED /  model = &method alpha=&alpha use=&extendedvalue;
15200 +            %end;
15201 +        %end;
15202 +        %else %if &EM_PROPERTY_EXPORTDATA eq DEFAULT %then %do;
15203 +            %if &target ne %then %do;
15204 +            forecast &target /  model =&method alpha=&alpha;
15205 +            %end;
15206 +            %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15207 +            forecast %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/  model = none alpha=&alpha;
15208 +            %end;
15209 +        %end;
15210 +        %else %do; /* for KLD, FORECAST Cluster , SIMILARITY */
15211 +            forecast &target /*%EM_INTERVAL_INPUT*/ /  model = &method alpha=&alpha use=predict;
15212 +        %end;
15214 +   %if &tsidvar ne %then %do;
15215 +        by &tsidvar %EM_CROSSID ;
15216 +   %end;
15217 +   run;
15218 +%mend EM_TSESM_Forecast;
15221 +%macro EM_TSESM_CreateOutFor(indata=,
15222 +                            target=,
15223 +                            timeid=,
15224 +                            tsidVar=,
15225 +                            percent=,
15226 +                            outdata=);
15228 +  %let lowerBound = L&percent;
15229 +  %let upperBound = U&percent;
15231 +  data ds_fore(rename=(&target=FORECAST)  drop=_TYPE_)
15232 +       ds_resid(rename=(&target=RESIDUAL) drop=_TYPE_)
15233 +       ds_act(rename=(&target=ACTUAL) drop=_TYPE_)
15234 +       ds_lower(rename=(&target=LBOUND)  drop=_TYPE_)
15235 +       ds_upper(rename=(&target=UBOUND) drop=_TYPE_)
15236 +       ds_std(rename=(&target=STD) drop=_TYPE_);
15237 +     set &indata;
15238 +       if _TYPE_="FORECAST" then output ds_fore;
15239 +       if _TYPE_="RESIDUAL" then output ds_resid;
15240 +       if _TYPE_="ACTUAL" then output ds_act;
15241 +       if _TYPE_="&lowerBound" then output ds_lower;
15242 +       if _TYPE_="&upperBound" then output ds_upper;
15243 +       if _TYPE_="STD" then output ds_std;
15244 +  run;
15246 +  data &outdata;
15247 +       merge ds_fore ds_resid ds_act ds_lower ds_upper ds_std;
15248 +       by &tsidVar &timeid;
15249 +       label  FORECAST = "Forecast";
15250 +       label  ACTUAL = "Actual";
15251 +       label  RESIDUAL = "Residual";
15252 +       label  LBOUND = "Lower Bound";
15253 +       label  UBOUND = "Upper Bound";
15254 +       label   STD = "Standard Deviation";
15255 +  run;
15256 +%mend EM_TSESM_CreateOutFor;
15259 +%macro EM_TSESM_CreateOutExpand(indata=,
15260 +                       target=,
15261 +                       timeid=,
15262 +                       tsidVar=,
15263 +                       percent=,
15264 +                       outlower=,
15265 +                       outupper=,
15266 +                       outdata=);
15268 +  %let lowerBound = L&percent;
15269 +  %let upperBound = U&percent;
15271 +  /*proc print data=&indata(obs=200);
15272 +  run;
15273 +  */
15275 +  data ds_fore(drop=&target)
15276 +       ds_lower(drop=&target)
15277 +       ds_upper(drop=&target)
15278 +       ds_act;
15279 +     set &indata;
15280 +       if _TYPE_="FORECAST" and _LEAD_  > 0 then output ds_fore;
15281 +       if _TYPE_="&lowerBound" and  _LEAD_  > 0 then output ds_lower;
15282 +       if _TYPE_="&upperBound" and  _LEAD_  > 0 then output ds_upper;
15283 +       if _TYPE_="ACTUAL" then output ds_act;
15284 +  run;
15286 +  /*
15287 +  proc print data = ds_fore;
15288 +  proc print data=ds_act;
15289 +  run;
15290 +  */
15291 +  data &outdata;
15292 +       merge ds_act ds_fore;
15293 +       by &tsidVar &timeid;
15294 +  run;
15296 +  data &outlower;
15297 +       merge ds_act ds_lower;
15298 +       by &tsidVar &timeid;
15299 +  run;
15301 +  data &outupper;
15302 +       merge ds_act ds_upper;
15303 +       by &tsidVar &timeid;
15304 +  run;
15305 +  /*
15306 +  proc print data=&outdata(obs=300);
15307 +  proc print data=&outlower(obs=300);
15308 +  proc print data=&outupper(obs=300);
15309 +  run;
15310 +  */
15311 +%mend EM_TSESM_CreateOutExpand;
15315 +%macro EM_TSESM_MakeOutClus(indata=,
15316 +                   target=,
15317 +                   timeid=,
15318 +                   tsidVar=,
15319 +                   percent=,
15320 +                   outlower=,
15321 +                   outupper=,
15322 +                   outdata=);
15325 +  %EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
15327 +  data &outdata(rename=(_NAME_ =_NAMEID_));
15328 +       set &indata;
15329 +       DROP _STATUS_ NOBS N NMISS MEAN MIN MAX STDDEV PREDICT LOWER UPPER STD;
15330 +  run;
15332 +  %let dsid=%sysfunc(open(&outdata));
15333 +  %let vn_name =%sysfunc(varnum(&dsid, _TSID_));
15334 +  %let dsid=%sysfunc(close(&dsid));
15336 +  %if &vn_name > 0 %then %do;
15337 +      data &outdata(drop=_NAMEID_);
15338 +           merge &EM_USER_TSIDMAP &outdata;
15339 +           by _TSID_;
15340 +      run;
15341 +  %end;
15342 +  %else %do;
15343 +      proc sort data= &outdata; by _NAMEID_;
15344 +      run;
15345 +      proc sort data = &EM_USER_TSIDMAP ;by _NAMEID_;
15346 +      run;
15347 +      data &outdata(drop=_NAMEID_);
15348 +           merge &EM_USER_TSIDMAP &outdata;
15349 +           by _NAMEID_;
15350 +      run;
15351 +  %end;
15353 +%mend EM_TSESM_MakeOutClus;
15356 +%macro EM_TSESM_CreateOutEst(indata=,
15357 +                    target=,
15358 +                    timeid=,
15359 +                    outdata=);
15361 +%mend EM_TSESM_CreateOutEst;
15364 +%macro EM_TSESM_Best_Forecast(indata=,
15365 +                method=,
15366 +                timeinterval=,
15367 +                timeid= ,
15368 +                target= ,
15369 +                tsidvar=,
15370 +                lead=,
15371 +                back=,
15372 +                startsum=,
15373 +                accumulate=,
15374 +                seasonality=,
15375 +                alpha=,
15376 +                criterion=,
15377 +                extendedvalue=,
15378 +                outest = ,
15379 +                outdata = ,
15380 +                outfor = ,
15381 +                outstat = ,
15382 +                outsum=
15383 +   );
15385 +   %let _indata = &indata;
15387 +   %if &tsidvar eq _SEGMENT_ %then %do;
15388 +       proc sort data=&indata out=_tmpdata;
15389 +            by  &tsidvar %EM_CROSSID &timeid ;
15390 +       run;
15391 +       proc timeseries  data =_tmpdata out=_tmpdata;
15392 +            by  &tsidvar %EM_CROSSID ;
15393 +            id &timeid interval=&timeinterval accumulate=&accumulate;
15394 +            var &target / ;
15395 +       run;
15396 +       %let _indata = _tmpdata;
15397 +   %end;
15399 +   %let n_model = 0;
15401 +   %if &EM_PROPERTY_SIMPLE eq Y %then %do;
15403 +       %let n_model = %eval(&n_model+1);
15405 +       %let _ds_out =_out&n_model;
15406 +       %let _ds_outest =_outest&n_model;
15407 +       %let _ds_outfor =_outfor&n_model;
15408 +       %let _ds_outstat =_outstat&n_model;
15409 +       %let _ds_outsum=_outsum&n_model;
15411 +       %EM_TSESM_ESM(method=SIMPLE,
15412 +        timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15413 +        lead=&lead, back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15414 +        out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15415 +        );
15417 +   %end;
15418 +   %if &EM_PROPERTY_DOUBLE eq Y %then %do;
15420 +       %let n_model = %eval(&n_model+1);
15422 +       %let _ds_out =_out&n_model;
15423 +       %let _ds_outest =_outest&n_model;
15424 +       %let _ds_outfor =_outfor&n_model;
15425 +       %let _ds_outstat =_outstat&n_model;
15426 +       %let _ds_outsum=_outsum&n_model;
15428 +       %EM_TSESM_ESM(method=DOUBLE,
15429 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15430 +            lead=&lead,  back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15431 +             out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15432 +       );
15433 +   %end;
15435 +   %if &EM_PROPERTY_LINEAR eq Y %then %do;
15437 +       %let n_model = %eval(&n_model+1);
15438 +       %let _ds_out =_out&n_model;
15439 +       %let _ds_outest =_outest&n_model;
15440 +       %let _ds_outfor =_outfor&n_model;
15441 +       %let _ds_outstat =_outstat&n_model;
15442 +       %let _ds_outsum=_outsum&n_model;
15444 +       %EM_TSESM_ESM(method=LINEAR,
15445 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15446 +            lead=&lead, back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15447 +            out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15448 +        );
15449 +   %end;
15451 +   %if &EM_PROPERTY_DAMPTREND eq Y %then %do;
15453 +       %let n_model = %eval(&n_model+1);
15455 +       %let _ds_out =_out&n_model;
15456 +       %let _ds_outest =_outest&n_model;
15457 +       %let _ds_outfor =_outfor&n_model;
15458 +       %let _ds_outstat =_outstat&n_model;
15459 +       %let _ds_outsum=_outsum&n_model;
15461 +       %EM_TSESM_ESM(method=DAMPTREND,
15462 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15463 +            lead=&lead, back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15464 +            out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15465 +            );
15466 +   %end;
15467 +   /*------- Seasonal model ------*/
15469 +   %if (&timeinterval ne YEAR ) and ( &timeinterval ne DTYEAR ) %then %do;
15471 +   %if (&EM_PROPERTY_WINTERS eq Y) %then %do;
15473 +       %let n_model = %eval(&n_model+1);
15475 +       %let _ds_out =_out&n_model;
15476 +       %let _ds_outest =_outest&n_model;
15477 +       %let _ds_outfor =_outfor&n_model;
15478 +       %let _ds_outstat =_outstat&n_model;
15479 +       %let _ds_outsum=_outsum&n_model;
15481 +       %EM_TSESM_ESM(method=WINTERS,
15482 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15483 +            lead=&lead,  back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15484 +            out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15485 +        );
15486 +   %end;
15488 +   %if (&EM_PROPERTY_ADDSEASONAL eq Y) %then %do;
15490 +       %let n_model = %eval(&n_model+1);
15492 +       %let _ds_out =_out&n_model;
15493 +       %let _ds_outest =_outest&n_model;
15494 +       %let _ds_outfor =_outfor&n_model;
15495 +       %let _ds_outstat =_outstat&n_model;
15496 +       %let _ds_outsum=_outsum&n_model;
15498 +       %EM_TSESM_ESM(method=ADDSEASONAL,
15499 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15500 +            lead=&lead, back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15501 +            out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15502 +       );
15503 +   %end;
15505 +   %if (&EM_PROPERTY_MULTSEASONAL eq Y) %then %do;
15507 +       %let n_model = %eval(&n_model+1);
15509 +       %let _ds_out =_out&n_model;
15510 +       %let _ds_outest =_outest&n_model;
15511 +       %let _ds_outfor =_outfor&n_model;
15512 +       %let _ds_outstat =_outstat&n_model;
15513 +       %let _ds_outsum=_outsum&n_model;
15515 +       %EM_TSESM_ESM(method=MULTSEASONAL,
15516 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15517 +            lead=&lead,  back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15518 +            out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15519 +       );
15520 +   %end;
15522 +   %if (&EM_PROPERTY_ADDWINTERS eq Y) %then %do;
15524 +       %let n_model = %eval(&n_model+1);
15526 +       %let _ds_out =_out&n_model;
15527 +       %let _ds_outest =_outest&n_model;
15528 +       %let _ds_outfor =_outfor&n_model;
15529 +       %let _ds_outstat =_outstat&n_model;
15530 +       %let _ds_outsum=_outsum&n_model;
15532 +       %EM_TSESM_ESM(method=ADDWINTERS,
15533 +            timeinterval=&timeinterval, timeid=&timeid, target=&target, tsidvar=&tsidvar,
15534 +            lead=&lead,  back=&back, startsum=&startsum, accumulate=&accumulate, seasonality=&seasonality, alpha=&alpha,
15535 +            out=&_ds_out, outest=&_ds_outest, outfor =&_ds_outfor, outstat=&_ds_outstat, outsum=&_ds_outsum
15536 +            );
15537 +   %end;
15540 +   %end; /* end of %if (&timeinterval ne YEAR ) and ( &timeinterval ne DTYEAR ) %then %do; */
15541 +   /*-------- end of seasonal model  ------------------------------------------------------*/
15543 +   %if &n_model eq 0 %then %do;
15545 +       /*---- %PUT  ERROR:THE NUMBER OF CANDIDATE MODELS IS ZERO;  */
15546 +       %let  EMEXCEPTIONSTRING = exception.server.tsdm.zerocandidatemodel;
15547 +   %end;
15548 +   %else %do;
15549 +         %EM_TSESM_BestModelSel(crit=&criterion,
15550 +                               n_mdl=&n_model,
15551 +                               tsidvar=&tsidvar,
15552 +                               timeid=&timeid,
15553 +                               out=&outdata,
15554 +                               outest=&outest,
15555 +                               outfor =&outfor,
15556 +                               outstat=&outstat,
15557 +                               outsum=&outsum
15558 +                  );
15559 +   %end;
15561 +%mend EM_TSESM_Best_Forecast;
15564 +%macro EM_TSESM_ESM(method= ,
15565 +           timeinterval=,
15566 +           timeid= ,
15567 +           target= ,
15568 +           tsidvar=,
15569 +           lead=,
15570 +           back=,
15571 +           startsum=,
15572 +           accumulate=,
15573 +           seasonality=,
15574 +           alpha=,
15575 +           out= ,
15576 +           outest= ,
15577 +           outfor= ,
15578 +           outstat= ,
15579 +           outsum=
15580 +           );
15582 +       proc sort data= &_indata out=_tmpdata;
15583 +            by  &tsidvar %EM_CROSSID &timeid ;
15584 +       run;
15585 +       proc esm data = _tmpdata  lead=&lead    back=&back  startsum=&startsum
15587 +       %if &seasonality ne DEFAULT %then %do;
15588 +                     seasonality = &seasonality
15589 +       %end;
15590 +            out=&out
15591 +            outest=&outest
15592 +            outfor =&outfor
15593 +            outstat=&outstat
15594 +            outsum= &outsum
15595 +            ;
15596 +       id &timeid  interval = &timeinterval  accumulate=&accumulate  ;
15598 +       %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
15599 +            %if &target ne %then %do;
15600 +            forecast &target   /  model = none alpha=&alpha;
15601 +            %end;
15602 +            %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15603 +            forecast %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/  model = &method alpha=&alpha use=&extendedvalue;
15604 +            %end;
15605 +       %end;
15606 +       %else %if &EM_PROPERTY_EXPORTDATA eq DEFAULT %then %do;
15607 +            %if &target ne %then %do;
15608 +            forecast &target /  model =&method alpha=&alpha;
15609 +            %end;
15610 +            %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15611 +            forecast %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/  model = none alpha=&alpha;
15612 +            %end;
15613 +       %end;
15614 +       %else %do;   /*----- CLUSTER INPUT , KLD, SIMILARITY INPUT ------*/
15615 +            %if &target ne %then %do;
15616 +            forecast &target   /  model = &method alpha=&alpha;
15617 +            %end;
15618 +            /*
15619 +            %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15620 +            forecast %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/  model = &method alpha=&alpha;
15621 +            %end;
15622 +            */
15623 +       %end;
15625 +       %if &tsidvar ne %then %do;
15626 +        by &tsidvar %EM_CROSSID;
15627 +       %end;
15628 +       run;
15630 +%mend EM_TSESM_ESM;
15634 +%macro EM_TSESM_BestModelSel(crit=,
15635 +                    n_mdl=,
15636 +                    tsidvar=_TSID_,
15637 +                    timeid=MNTH_YR,
15638 +                    out=&_outdata,
15639 +                    outest=&_outest,
15640 +                    outfor =&_outfor,
15641 +                    outstat=&_outstat,
15642 +                    outsum=&_outsum
15643 +    );
15645 +   %let statbls=select *, 1 as mdlID from _outstat1;
15646 +   %let estbls=select *,  1 as mdlID from _outest1;
15647 +   %let fortbls=select *, 1 as mdlID from _outfor1;
15648 +   %let outbls=select *,  1 as mdlID from _out1;
15649 +   %let sumtbls=select *, 1 as mdlID from _outsum1;
15650 +   %do i=2 %to &n_mdl;
15651 +      %let statbls=&statbls union all select *, &i as mdlID from _outstat&i;
15652 +        %let estbls=&estbls union all select *, &i as mdlID from _outest&i;
15653 +        %let fortbls=&fortbls union all select *, &i as mdlID from _outfor&i;
15654 +        %let outbls=&outbls union all select *, &i as mdlID from _out&i;
15655 +        %let sumtbls=&sumtbls union all select *, &i as mdlID from _outsum&i;
15656 +   %end;
15658 +   %let dsid=%sysfunc(open(_out1));
15659 +   %let vn_tsid = 0;
15661 +   %if &dsid > 0 %then %do;
15662 +         %let vn_tsid =%sysfunc(varnum(&dsid, _TSID_));
15663 +         %let dsid = %sysfunc(close(&dsid));
15664 +   %end;
15666 +   %if &vn_tsid <= 0  %then %do;
15667 +       %let tsidvar=_NAME_;
15668 +   %end;
15670 +  /*
15671 +  %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
15672 +     %let tsidvar=_NAME_;
15673 +   %end;
15674 +  */
15676 +   proc sql;
15677 +     create table tsstat as &statbls;
15678 +     create table tsest  as &estbls;
15679 +     create table tsfor  as &fortbls;
15680 +     create table tsout  as &outbls;
15681 +     create table tssum  as &sumtbls;
15682 +   quit;
15684 +    proc sort data=tsstat out=bestmdl;
15685 +        by &tsidvar &crit mdlID;
15686 +    run;
15688 +    * when multiple BEST model found;
15689 +    * use the one with smallest model ID;
15690 +    data bestmdl;
15691 +        set bestmdl;
15692 +        by &tsIDvar;
15693 +        if first.&tsIDVar;
15694 +    run;
15696 +   proc sql;
15697 +      create table bestID as
15698 +        select distinct(tsest.&tsidvar), _model_, &crit, bestmdl.mdlID
15699 +        from bestmdl,tsest
15700 +        where bestmdl.mdlID=tsest.mdlID and bestmdl.&tsidvar=tsest.&tsidvar;
15702 +      create table &outfor
15703 +        as select tsfor.*, _model_, &crit from tsfor, bestID
15704 +        where tsfor.&tsidvar=bestID.&tsidvar and tsfor.mdlID=bestID.mdlID order by &tsidvar, &timeid;
15706 +        create table &outstat
15707 +        as select tsstat.*, _model_ from tsstat, bestID
15708 +      where tsstat.&tsidvar=bestID.&tsidvar and tsstat.mdlID=bestID.mdlID order by &tsidvar;
15710 +        create table &outest
15711 +        as select tsest.*, &crit from bestmdl, tsest
15712 +      where bestmdl.mdlID=tsest.mdlID and bestmdl.&tsidvar=tsest.&tsidvar order by &tsidvar;
15714 +      create table &outsum
15715 +        as select tssum.*, _model_, &crit from tssum, bestID
15716 +      where tssum.&tsidvar=bestID.&tsidvar and tssum.mdlID=bestID.mdlID order by &tsidvar;
15718 +      /*
15719 +      %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
15720 +        create table &out
15721 +          as select tsout.*, _model_, &crit from tsout, bestID
15722 +        where tsout.&tsidvar=bestID.&tsidvar and tsout.mdlID=bestID.mdlID order by &tsidvar, &timeid;
15723 +      %end;
15724 +      */
15726 +      %if &tsidvar eq _TSID_ %then %do;
15728 +         create table &out
15729 +          as select tsout.*, _model_, &crit from tsout, bestID
15730 +        where tsout.&tsidvar=bestID.&tsidvar and tsout.mdlID=bestID.mdlID order by &tsidvar, &timeid;
15732 +      %end;
15733 + run;
15734 +quit;
15736 + /*%if &EM_PROPERTY_EXTINPUT eq Y %then %do; */
15738 + %if &tsidvar = _NAME_ %then %do;
15739 +      data
15740 +            %let i=1;
15741 +            %do i=1 %to &n_mdl;
15742 +               %let _tmpdsname = _tmpds&i;
15743 +                    &_tmpdsname
15744 +            %end;
15745 +        ;
15746 +         set work.Bestmdl;
15747 +            %let i=1;
15748 +            %do i=1 %to &n_mdl;
15749 +               %let _tmpdsname = _tmpds&i;
15750 +                  if mdlID = &i then output &_tmpdsname;
15751 +            %end;
15752 +      run;
15754 +      data &out;
15755 +           set _out1;
15756 +           keep &timeid %EM_TARGET;
15757 +      run;
15758 +      %let i=1;
15759 +      %do i=1 %to &n_mdl;
15760 +          %let _tmpdsname = _tmpds&i;
15761 +          %let _outdsname = _out&i;
15763 +          data &out;
15764 +               set &out;
15765 +               set &_outdsname(keep=
15766 +               %let dsid=%sysfunc(open(&_tmpdsname));
15767 +               %if &dsid > 0 %then %do;
15768 +                  %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15769 +                  %do %while(^%sysfunc(fetch(&dsid)));
15770 +                     %let _name  = %sysfunc(getvarc(&dsid, &vn_name));
15771 +                          &_name
15772 +                  %end;
15773 +                  %let dsid = %sysfunc(close(&dsid));
15774 +               %end;
15775 +               );
15776 +           run;
15777 +       %end;
15779 +%end;
15781 +data &out;
15782 +     set  &out;
15783 +      drop mdlID _MODEL_ &crit;
15784 +data &outest;
15785 +      set  &outest;
15786 +      drop mdlID &crit;
15787 +data &outfor;
15788 +     set &outfor;
15789 +     drop mdlID &crit;
15790 +data &outstat;
15791 +     set &outstat;
15792 +     drop mdlID;
15793 +data &outsum;
15794 +     set &outsum;
15795 +     drop mdlID &crit;
15796 +run;
15798 +%mend EM_TSESM_BestModelSel;
15802 +%macro EM_TSESM_MakeOutlierIndex(indata=,
15803 +                        target=,
15804 +                        timeid=,
15805 +                        outoutlier=,
15806 +                        outlierds=,
15807 +                        outdata=);
15808 +%let label_Outlier = %sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_outlier, noquote));
15809 +%let str_Actual_Outlier = %sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_actualoutlier, noquote));
15810 +%let str_Actual = %sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_actual, noquote));
15811 +data &outdata;
15812 +     set &indata;
15813 +     length OutlierIndex 8.;
15814 +     length Outlier  $40;
15815 +     label  OutlierIndex = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_outlierindex, noquote))";
15816 +     label  Outlier = "&label_Outlier";
15817 +   /*  if (ACTUAL ne . ) and ( (ACTUAL > UPPER) or (ACTUAL < LOWER) ) then do; OutlierIndex=1; Outlier="&label_Outlier";end;
15818 +       else  do; OutlierIndex=0; outlier =" "; end; */
15819 +     if (ACTUAL ne . ) and ( (ACTUAL > UPPER) or (ACTUAL < LOWER) ) then do; OutlierIndex=1; Outlier="&str_Actual_Outlier";end;
15820 +       else  do; OutlierIndex=0; outlier ="&str_Actual"; end;
15821 +run;
15823 +data  &outoutlier;
15824 +      set  &outdata;
15825 +      keep &timeid _TSID_ _SEGMENT_ _NAME_ _NAMEID_ OUTLIERINDEX OUTLIER PREDICT;
15826 +      if ACTUAL = . then delete;
15827 +run;
15829 +data &outlierds;
15830 +     set &outoutlier;
15831 +     if OUTLIERINDEX = 0 then delete;
15832 +     Drop OUTLIERINDEX;
15833 +run;
15835 +%mend  EM_TSESM_MakeOutlierIndex;
15838 +%macro EM_TSESM_MakeSmoothedOutds(indata=,
15839 +                         inoutlierds=,
15840 +                         target=,
15841 +                         timeid=,
15842 +                         tsidvar=_TSID_,
15843 +                         replace=,
15844 +                         outdata=);
15847 +%EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
15850 +%let dsid=%sysfunc(open(&indata));
15851 +%let vn_tsid = 0;
15852 +%if &dsid > 0 %then %do;
15853 +         %let vn_tsid =%sysfunc(varnum(&dsid, _TSID_));
15854 +         %let dsid = %sysfunc(close(&dsid));
15855 +%end;
15857 +%if &vn_tsid <= 0  %then %do;
15858 +    %let tsidvar=_NAME_;
15859 +%end;
15861 +%if &tsidvar = _TSID_ %then %do;
15862 +/* %if &EM_PROPERTY_EXTINPUT eq Y %then %do; */
15863 + /*    data &outdata;
15864 +          merge &indata &inoutlierds;
15865 +          by _TSID_ &timeid;
15866 +          if OutlierIndex > 0 then
15867 +          %if &replace eq PREDICT %then %do;
15868 +             &target = PREDICT;
15869 +          %end;
15870 +          %else %do;
15871 +             &target = .;
15872 +          %end;
15873 +           Drop Predict _NAME_ OutlierIndex;
15874 +     run;     */
15875 +  %let dsid=%sysfunc(open(&EM_USER_TSIDMAP));
15876 +     %if &dsid > 0 %then %do;
15877 +         %let vn_nameid =%sysfunc(varnum(&dsid, _VARNAME_));
15878 +         %let vn_tsid =%sysfunc(varnum(&dsid, _TSID_));
15879 +         %let i = 1;
15880 +              %do %while(^%sysfunc(fetch(&dsid)));
15881 +                  %let _varname= %sysfunc(getvarc(&dsid, &vn_nameid));
15882 +                  %let _vartsid= %sysfunc(getvarn(&dsid, &vn_tsid));
15883 +                  %if &i eq 1 %then %do;
15884 +                      data _tmpoutlier;
15885 +                           set &inoutlierds;
15886 +                           if _NAME_ ="&_varname" and _TSID_ = &_vartsid then output;
15887 +                      run;
15888 +                      data &outdata;
15889 +                           merge &indata _tmpoutlier;
15890 +                           by _TSID_ &timeid ;
15891 +                           if OutlierIndex  > 0 then
15892 +                              %if &replace eq PREDICT %then %do;
15893 +                                &_varname = PREDICT;
15894 +                              %end;
15895 +                              %else %do;
15896 +                                &_varname = .;
15897 +                              %end;
15898 +                            Drop Predict _NAME_  OutlierIndex Outlier;
15899 +                      run;
15900 +                   %end;
15901 +                   %else %do;
15902 +                      data _tmpoutlier;
15903 +                           set &inoutlierds;
15904 +                           if _NAME_ ="&_varname" and _TSID_ = &_vartsid  then output;
15905 +                      run;
15906 +                      data &outdata;
15907 +                           merge &outdata _tmpoutlier;
15908 +                           by _TSID_ &timeid ;
15909 +                           if OutlierIndex  > 0 then
15910 +                              %if &replace eq PREDICT %then %do;
15911 +                                &_varname = PREDICT;
15912 +                              %end;
15913 +                              %else %do;
15914 +                                &_varname = .;
15915 +                              %end;
15916 +                           Drop Predict _NAME_  OutlierIndex Outlier;
15917 +                      run;
15918 +                   %end;
15919 +                   %let i = %eval(&i+1);
15921 +              %end;
15922 +           %let dsid = %sysfunc(close(&dsid));
15923 +      %end;
15924 +%end;
15925 +%else %do;  /*  %if &tsidvar = _NAME_ %then %do; */
15927 +     %let dsid=%sysfunc(open(&EM_USER_TSIDMAP));
15928 +     %if &dsid > 0 %then %do;
15929 +         %let vn_nameid =%sysfunc(varnum(&dsid, _NAMEID_));
15930 +         %let i = 1;
15931 +              %do %while(^%sysfunc(fetch(&dsid)));
15932 +                  %let _varname= %sysfunc(getvarc(&dsid, &vn_nameid));
15933 +                  %if &i eq 1 %then %do;
15934 +                      data _tmpoutlier;
15935 +                           set &inoutlierds;
15936 +                           if _NAME_ ="&_varname"  then output;
15937 +                      run;
15938 +                      data &outdata;
15939 +                           merge &indata _tmpoutlier;
15940 +                           by &timeid;
15941 +                           if OutlierIndex  > 0 then
15942 +                              %if &replace eq PREDICT %then %do;
15943 +                                &_varname = PREDICT;
15944 +                              %end;
15945 +                              %else %do;
15946 +                                &_varname = .;
15947 +                              %end;
15948 +                            Drop Predict _NAME_ OutlierIndex Outlier;
15949 +                      run;
15950 +                   %end;
15951 +                   %else %do;
15952 +                      data _tmpoutlier;
15953 +                           set &inoutlierds;
15954 +                           if _NAME_ ="&_varname"  then output;
15955 +                      run;
15956 +                      data &outdata;
15957 +                           merge &outdata _tmpoutlier;
15958 +                           by &timeid;
15959 +                           if OutlierIndex  > 0 then
15960 +                              %if &replace eq PREDICT %then %do;
15961 +                                &_varname = PREDICT;
15962 +                              %end;
15963 +                              %else %do;
15964 +                                &_varname = .;
15965 +                              %end;
15966 +                           Drop Predict _NAME_ OutlierIndex Outlier;
15967 +                      run;
15968 +                   %end;
15969 +                   %let i = %eval(&i+1);
15971 +              %end;
15972 +           %let dsid = %sysfunc(close(&dsid));
15973 +      %end;
15974 +      %else %do;
15975 +            /* this block is added 09022011*/
15976 +            /* works for wide table in which each time series has a column */
15978 +            proc transpose data=&indata out=_tmpdata1;
15979 +                by &timeID;
15980 +            run;
15982 +            proc sql;
15983 +                create table _tmpdata2 as
15984 +                    select a.*, b.outlierindex, b.outlier, b.predict
15985 +                        from _tmpdata1 as a left join &inoutlierds as b
15986 +                            on a.&timeID eq b.&timeID and a._name_ eq b._name_
15987 +                        order by a.&timeID, a._name_
15988 +                    ;
15989 +            quit;
15991 +            data _tmpdata2;
15992 +                set _tmpdata2;
15993 +                if outlierindex eq 1 then
15994 +                    if &replace eq PREDICT then col1=predict; else col1=.;
15995 +            run;
15997 +            proc transpose data=_tmpdata2 out=_tmpdata3(drop=_name_ _label_);
15998 +                by &timeID;
15999 +                ID _name_;
16000 +                var col1;
16001 +            proc sort data=&inoutlierds out=_tmpoutlier;
16002 +                by &timeID _name_;
16003 +            proc transpose data=_tmpoutlier out=_tmpdata4(drop=_name_ _label_) prefix=Outlier_;
16004 +                by &timeID;
16005 +                ID _name_;
16006 +                var outlier;
16007 +            run;
16009 +            data &outdata;
16010 +                merge _tmpdata3 _tmpdata4;
16011 +                by &timeID;
16012 +            run;
16013 +      %end;
16014 +%end;
16015 +%mend EM_TSESM_MakeSmoothedOutds;
16017 +%Macro EM_TSESM_MakeOutKLD(indata=&EM_USER_OUTPRED,
16018 +                  insumdata=&EM_USER_OUTSUM,
16019 +                target=&_targetVar,
16020 +                timeid=&_timeidVar,
16021 +                futurepoint=1,
16022 +                outKLD=&EM_USER_OUTKLD
16023 +                );
16025 +%if &futurepoint > 0 %then %do;
16027 +proc sort data=&indata out=_tmptimeid;
16028 +     by &timeid;
16029 +run;
16031 +data _tmptimeid(keep=&timeid);
16032 +      set _tmptimeid; by &timeid;
16033 +      if first.&timeid then output;
16034 +run;
16036 +%let _targetTime =;
16037 +%let dsid=%sysfunc(open(work._tmptimeid));
16038 +%if &dsid > 0 %then %do;
16039 +    %let vn_timeid =%sysfunc(varnum(&dsid, &timeid));
16040 +    %let i = 1;
16041 +    %do %while(^%sysfunc(fetch(&dsid)));
16042 +       %if &i eq &futurepoint %then %do;
16043 +       %let _targetTime  = %sysfunc(getvarn(&dsid, &vn_timeid));
16044 +       %end;
16045 +       %let i = %eval(&i+1);
16046 +    %end;
16047 +    %let dsid = %sysfunc(close(&dsid));
16048 +%end;
16050 +data _tmpKLD(keep = _TSID_ _NAME_ PREDICT STD);
16051 +   set &indata;
16052 +   if &timeid eq &_targetTime then output;
16053 +run;
16055 +%end;  /* end of %if &futurepoint > 0 %then %do; */
16056 +%else %do;
16059 +data _tmpKLD(keep = _TSID_ _NAME_ PREDICT STD);
16060 +   set &insumdata;
16061 +run;
16064 +%end;
16066 +%EM_TSESM_KLD(indata=work._tmpKLD, outdata=&outKLD);
16068 +/* Merge TSIDMAP  */
16070 +%EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
16071 +data &outKLD(rename=(_NAME_ =_NAMEID_));
16072 +       set &outKLD;
16073 +run;
16075 +%let dsid=%sysfunc(open(&outKLD));
16076 +%let vn_name =%sysfunc(varnum(&dsid, _TSID_));
16077 +%let dsid=%sysfunc(close(&dsid));
16079 +%if &vn_name > 0 %then %do;
16080 +      data &outKLD(drop=_NAMEID_);
16081 +           merge &EM_USER_TSIDMAP &outKLD;
16082 +           by _TSID_;
16083 +      run;
16084 +%end;
16085 +%else %do;
16086 +      proc sort data= &outKLD; by _NAMEID_;
16087 +      run;
16088 +      proc sort data = &EM_USER_TSIDMAP ;by _NAMEID_;
16089 +      run;
16090 +      data &outKLD(drop=_NAMEID_);
16091 +           merge &EM_USER_TSIDMAP &outKLD;
16092 +           by _NAMEID_;
16093 +      run;
16094 +%end;
16096 +/* delete _tmptimeid  _tmpKLD */
16097 +%Mend  EM_TSESM_MakeOutKLD;
16100 +%Macro EM_TSESM_MakeOutPred(indata=&EM_USER_OUTFORCST,
16101 +                 target=&_targetVar,
16102 +                 timeid=&_timeidVar,
16103 +                 outdata=&EM_USER_OUTPRED
16104 +                 );
16106 +%EM_GETNAME(KEY=TSMETA, TYPE=DATA);
16107 +%let _EndTime = ;
16108 +%let dsid=%sysfunc(open(&EM_USER_TSMETA));
16109 +%if &dsid > 0 %then %do;
16110 +    %let vn_end =%sysfunc(varnum(&dsid, END));
16111 +    %let vn_format  = %sysfunc(varnum(&dsid, TIMEFORMAT));
16112 +    %do %while(^%sysfunc(fetch(&dsid)));
16113 +       %let _EndTime  = %sysfunc(getvarn(&dsid, &vn_end));
16114 +       /*--------------------------------------------------------
16115 +       %let _TimeFormat  = %sysfunc(getvarc(&dsid, &vn_format));
16116 +       %let _EndTime =%sysfunc( putn(&_EndTime, &_TimeFormat));
16117 +        ---------------------------------------------------------*/
16118 +    %end;
16119 +    %let dsid = %sysfunc(close(&dsid));
16120 +%end;
16122 +data &outdata(keep= _TSID_ _NAME_  &timeid PREDICT LOWER UPPER STD);
16123 +     set &indata;
16124 +     if &timeid > &_EndTime then output;
16125 +run;
16126 +%Mend  EM_TSESM_MakeOutPred;
16129 +%macro EM_TSESM_KLD(indata=work._tmp, outdata=_out);
16131 +%let std_x = ;
16132 +%let mu_y = ;
16134 +%let dsid=%sysfunc(open(&indata));
16135 +%if &dsid > 0 %then %do;
16136 +    %let vn_pred =%sysfunc(varnum(&dsid, PREDICT));
16137 +    %let vn_std  = %sysfunc(varnum(&dsid, STD));
16138 +    %let i=1;
16139 +    %do %while(^%sysfunc(fetch(&dsid)));
16140 +        %let _pred  = %sysfunc(getvarn(&dsid, &vn_pred));
16141 +        %let _std  = %sysfunc(getvarn(&dsid, &vn_std));
16142 +        %let _tsid = _TSID&i.;
16143 +        /* create new data set */
16144 +            %if &i = 1 %then %do;
16145 +            data _tmpindata;
16146 +                set &indata;
16147 +                  mu_x = &_pred;
16148 +                  std_x = &_std;
16149 +                  rename predict = mu_y;
16150 +                  rename std = std_y;
16151 +            run;
16152 +        data _tmpout;
16153 +                 set _tmpindata;
16154 +             KLD1=0.5*(log(std_y**2/std_x**2)+std_x**2/std_y**2+(mu_y-mu_x)**2/std_y**2-1);
16155 +             KLD2=0.5*(log(std_x**2/std_y**2)+std_y**2/std_x**2+(mu_x-mu_y)**2/std_x**2-1);
16156 +             &_tsid= (KLD1+KLD2)/2;
16157 +             if &_tsid < 0 then &_tsid = 0;
16158 +                   drop KLD1 KLD2;
16159 +         run;
16160 +             %end;
16161 +         %else %do;
16162 +         data _tmpindata;
16163 +                  set _tmpout;
16164 +                  mu_x = &_pred;
16165 +                  std_x = &_std;
16167 +             run;
16168 +         data _tmpout;
16169 +                 set _tmpindata;
16170 +             KLD1=0.5*(log(std_y**2/std_x**2)+std_x**2/std_y**2+(mu_y-mu_x)**2/std_y**2-1);
16171 +             KLD2=0.5*(log(std_x**2/std_y**2)+std_y**2/std_x**2+(mu_x-mu_y)**2/std_x**2-1);
16172 +             &_tsid= (KLD1+KLD2)/2;
16173 +             if &_tsid < 0 then &_tsid = 0;
16174 +                   drop KLD1 KLD2;
16175 +         run;
16177 +         %end;
16178 +             %let i = %eval(&i+1);
16180 +    %end;
16181 +    %let dsid = %sysfunc(close(&dsid));
16182 +    data &outdata;
16183 +         set _tmpout;
16184 +         drop mu_x mu_y std_x std_y;
16185 +    run;
16186 +%end;
16187 +%mend EM_TSESM_KLD;
16190 +%macro EM_TSESM_MakeOutClusInput(indata=,
16191 +                   target=,
16192 +                   timeid=,
16193 +                   tsidVar=,
16194 +                   percent=,
16195 +                   outlower=,
16196 +                   outupper=,
16197 +                   esmmethod=,
16198 +                   criterion=,
16199 +                   outdata=);
16201 +  %EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
16203 +  data &outdata(rename=(_NAME_ =_NAMEID_));
16204 +       set &indata;
16205 +       DROP _STATUS_ NOBS N NMISS MEAN MIN MAX STDDEV PREDICT LOWER UPPER STD
16206 +  %if &esmmethod eq BEST %then %do;
16207 +      mdlID _MODEL_ &criterion
16209 +  %end;
16210 +  ;
16211 +  run;
16213 +  %let dsid=%sysfunc(open(&outdata));
16214 +       %let vn_name =%sysfunc(varnum(&dsid, _TSID_));
16215 +  %let dsid=%sysfunc(close(&dsid));
16217 +  %if &vn_name > 0 %then %do;
16218 +      proc sort data= &outdata; by _TSID_;
16219 +      run;
16220 +      proc sort data = &EM_USER_TSIDMAP ;by _TSID_;
16221 +      run;
16223 +      data &outdata(drop=_NAMEID_);
16224 +           merge &EM_USER_TSIDMAP &outdata;
16225 +           by _TSID_;
16226 +      run;
16227 +  %end;
16228 +  %else %do;
16229 +      proc sort data= &outdata; by _NAMEID_;
16230 +      run;
16231 +      proc sort data = &EM_USER_TSIDMAP ;by _NAMEID_;
16232 +      run;
16233 +      data &outdata(drop=_NAMEID_);
16234 +           merge &EM_USER_TSIDMAP &outdata;
16235 +           by _NAMEID_;
16236 +      run;
16237 +  %end;
16239 +%mend EM_TSESM_MakeOutClusInput;
16241 +%macro EM_TSESM_MakeOutSimInput(indata=,
16242 +                   inoutfor=,
16243 +                   target=,
16244 +                   timeid=,
16245 +                   tsidVar=,
16246 +                   esmmethod=,
16247 +                   criterion=,
16248 +                   outdata=);
16251 +  %EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
16252 +  %EM_GETNAME(KEY=TSMETA, TYPE=DATA);
16254 +   %let _EndTime = ;
16255 +   %let dsid=%sysfunc(open(&EM_USER_TSMETA));
16256 +   %if &dsid > 0 %then %do;
16257 +   %let vn_end =%sysfunc(varnum(&dsid, END));
16258 +   %let vn_format  = %sysfunc(varnum(&dsid, TIMEFORMAT));
16259 +   %do %while(^%sysfunc(fetch(&dsid)));
16260 +       %let _EndTime  = %sysfunc(getvarn(&dsid, &vn_end));
16261 +   %end;
16262 +   %let dsid = %sysfunc(close(&dsid));
16263 +   %end;
16265 +   %em_varMacro(name=tsesm_crossid, metadata= &EM_DATA_VARIABLESET, key=NAME,
16266 +       where=%nrbquote(ROLE='CROSSID' and USE ne 'N') , nummacro=tsesm_crossidNum);
16268 +   data _out1;
16269 +       set &indata;
16270 +       DROP _STATUS_ NOBS N NMISS MEAN MIN MAX STDDEV PREDICT LOWER UPPER STD
16271 +           %tsesm_crossid
16272 +   %if &esmmethod eq BEST %then %do;
16273 +      mdlID _MODEL_ &criterion
16274 +   %end;
16275 +   ;
16276 +   run;
16278 +    %let dsid=%sysfunc(open(work._out1));
16279 +    %if &dsid > 0 %then %do;
16280 +      %let vn_tsid =%sysfunc(varnum(&dsid, _TSID_));
16281 +      %let dsid = %sysfunc(close(&dsid));
16282 +    %end;
16284 +    /*
16285 +    proc print data=_out1(obs=10);
16286 +    run;
16287 +    */
16288 +    %let _existtsid = Y;
16289 +    %if (&vn_tsid = 0)  %then %do;
16290 +    %let _existtsid = N;
16291 +    %goto NO_TSID_SIMINPUT;
16292 +    %end;
16294 +    data _out1;
16295 +        set _out1;
16296 +        where _name_ = "&target";
16297 +    run;
16298 +    %let target2 = &target._;
16299 +    proc transpose data=_out1 out=_out2 prefix=&target2;
16300 +            id _TSID_  ;
16301 +    run;
16302 +    /*
16303 +    proc print data=_out2(obs=11);
16304 +    run;
16305 +    */
16306 +    data _out2;
16307 +       length _index 8.;
16308 +       set _out2;
16309 +       _index=_N_;
16310 +       drop _NAME_ _LABEL_;
16311 +    run;
16314 +   data _out3;
16315 +       length _index 8.;
16316 +        set &inoutfor(where=(_TSID_=1 and &timeid > &_EndTime));
16317 +         _index =_N_;
16318 +        keep &timeid _index;
16320 +   run;
16321 +   /*
16322 +   proc print data=_out2(obs=12);
16323 +   proc print data =_out3(obs=13);
16324 +   run;
16325 +   */
16326 +   data &outdata(drop=_index);
16327 +        merge _out3 _out2;by _index;
16328 +        run;
16331 +  proc transpose data=&outdata out=_tout;
16332 +     id &timeid;
16333 +   run;
16334 +   data _tout;
16335 +        length _TSID_ 8.;
16336 +        set _tout;
16337 +        rename _NAME_= _NAMEID_;
16338 +        _TSID_ = _N_;
16339 +        label _NAME_ = "NAMEID";
16340 +        keep _NAME_ _TSID_;
16342 +   run;
16344 +   data &EM_USER_TSIDMAP;
16345 +        merge  _tout  &EM_USER_TSIDMAP; by _TSID_;
16346 +   run;
16347 +   /*
16348 +   proc print data=_tout(obs=14);
16349 +   run;
16350 +   */
16351 +   proc datasets lib=work nolist;
16352 +      delete  _out1 _tmpout1 _out2 _out3 _tout;
16353 +   run;
16356 +   %NO_TSID_SIMINPUT:
16357 +   %if  &_existtsid eq N %then %do;
16358 +   data &outdata;
16359 +        set &inoutfor(where=(&timeid > &_EndTime));
16360 +   run;
16361 +   %end;
16364 +%mend EM_TSESM_MakeOutSimInput;
16367 +%macro EM_TS_CONVERT_LONG_TO_WIDE(indata=, outdata=, wherevar=, nwherevalue=, targetvar=, timeid=);
16368 +%do i=1 %to &nwherevalue;
16369 +     %if &i = 1 %then %do;
16370 +        data &outdata(drop = &wherevar);
16371 +             set &indata;
16372 +               if &wherevar= &i;
16373 +                   %if &wherevar = _TSID_ %then %let newname = TSID_&i;
16374 +               %else %let newname = &wherevar_&i;
16375 +                rename  &targetvar= &newname;
16376 +                   label &targetvar ="&targetvar._&i";
16377 +           run;
16378 +       %end;
16379 +       %else %do;
16380 +        data _tmp_out(drop = &wherevar);
16381 +             set &indata;
16382 +               if &wherevar= &i;
16383 +                   %if &wherevar = _TSID_ %then %let newname = TSID_&i;
16384 +               %else %let newname = &wherevar_&i;
16385 +                rename  &targetvar= &newname;
16386 +                   label &targetvar ="&targetvar._&i";
16387 +           run;
16388 +             data &outdata;
16389 +                  merge &outdata  _tmp_out; by &timeid;
16390 +         run;
16391 +       %end;
16392 +%end;
16394 +%EM_TS_DELETE_DATA(lib=work, data=_tmp_out);
16396 +%mend EM_TS_CONVERT_LONG_TO_WIDE;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTSDM.TSUTILITY_MACROS.SOURCE.
16398 +/*
16399 +       MACRO: TS Utility macros
16401 +       PURPOSE: TS Utility macros
16402 +       SUPPORT: Taiyeong Lee and Ruiwen Zhang
16404 +       HISTORY:
16405 +       NOTE:
16407 +*/
16409 +/*
16410 +%macro  EM_TS_CreateTsMetaDs(data= , decdata= , decmeta= , cmeta=, crossid=, outfile=,
16411 +                          timeid=, timeformat=, timeinformat=);
16412 + %global m_data m_decdata m_decmeta  m_cmeta m_outfile m_crossid m_timeid m_timeformat m_timeinformat;
16414 +    %do;
16415 +    %let m_data      = &data;
16416 +    %let m_decdata   = &decdata;
16417 +    %let m_decmeta   = &decmeta;
16418 +    %let m_cmeta     = &cmeta;
16419 +    %let m_outfile   = &outfile;
16420 +    %let m_crossid   = &crossid;
16421 +    %let m_timeid    = &timeid;
16422 +    %let m_timeformat    = &timeformat;
16423 +    %let m_timeinformat    = &timeinformat;
16424 +    dm "afa c=sashelp.emtsdm.Createtsmetads.scl";
16425 +  %end;
16426 +%mend EM_TS_CreateTsMetaDs;
16427 +*/
16428 +%macro  EM_TS_CreateTSMetaData(indata=, timeid=, timeformat=,timeformattype=, timeinterval=, outds=);
16429 +proc sql;
16430 +      create table _tmp_inds
16431 +      as select distinct &timeid from  &indata;
16432 +quit;
16433 +run;
16434 +proc timeid data=_tmp_inds outinterval=_tmp_tsmeta;
16435 +  id &timeid
16436 +%if &timeinterval ne %then %do;
16437 +    %if &timeformattype eq DATE %then %do;
16438 +        interval=&timeinterval
16439 +    %end;
16440 +    %else %if &timeformattype eq DATETIME  %then %do;
16441 +        %let dttimeinterval= DT&timeinterval;
16442 +         interval=&dttimeinterval
16443 +    %end;
16444 +%end;
16445 +;
16446 +run;
16448 +data &outds;
16449 +     set _tmp_tsmeta;
16450 +     format START &timeformat;
16451 +     format END &timeformat;
16452 +     length APPLY_START_END $8;
16453 +     APPLY_START_END ="No";
16454 +     FORMAT = "&timeformat";
16455 +     ROLE ="TIMEID";
16456 +     rename TIMEID = NAME;
16457 +     rename SEASONALITY= LengthOfCycle;
16458 +     rename INTERVAL = TIMEINTERVAL ;
16459 +     rename FORMAT = TIMEFORMAT;
16460 +     output;
16461 +     Label  ROLE  = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_varrole, noquote))";
16462 +     Label  APPLY_START_END  = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_applystartend, noquote))";
16463 +     keep TIMEID ROLE START END INTERVAL SEASONALITY FORMAT APPLY_START_END;
16464 +run;
16466 +%EM_TS_DELETE_DATA(lib=work, dsname=_tmptsmeta);
16467 +%EM_TS_DELETE_DATA(lib=work, dsname=_tmp_inds);
16469 +%mend EM_TS_CreateTSMetaData;
16473 +%macro EM_TS_GETTSMETA(updated=, eminfodata=);
16475 +/* if updated = Y it will pass the TSMETA created by just the previous node */
16477 +%let _tsmetads = ;
16479 +%if &updated = Y %then %do;
16480 +%let _tsmetads = &EM_LIB..%sysfunc(strip(&EM_METASOURCE_NODEID))_TSMETA;
16481 +%if %sysfunc(exist(&_tsmetads)) %then %do;
16482 +%goto endline;
16483 +%end;
16484 +%end;
16486 +%if &eminfodata eq %then %do;
16487 +    %let dsid=%sysfunc(open(&EM_IMPORT_DATA_EMINFO));
16488 +    data &EM_DATA_EMINFO;
16489 +         set &EM_IMPORT_DATA_EMINFO;
16490 +    run;
16491 +%end;
16492 +%else %do;
16493 +    %let dsid=%sysfunc(open(&eminfodata));
16494 +    data &EM_DATA_EMINFO;
16495 +         set &eminfodata;
16496 +    run;
16497 +%end;
16498 +%if &dsid > 0 %then %do;
16499 +    %let vn_data =%sysfunc(varnum(&dsid, DATA));
16500 +    %let vn_key =%sysfunc(varnum(&dsid, KEY));
16501 +    %do %while(^ %sysfunc(fetch(&dsid)));
16502 +         %let _key  = %sysfunc(getvarc(&dsid, &vn_key));
16503 +         %if &_key eq TSMETA %then %do;
16504 +              %let _tsmetads  = %sysfunc(getvarc(&dsid, &vn_data));
16505 +         %end;
16506 +    %end;
16507 +    %let dsid = %sysfunc(close(&dsid));
16508 +%end; /* the end of %if &dsid > 0 %then %do; */
16510 +%endline:
16512 +%if &_tsmetads ne %then %do;
16513 +    %EM_REGISTER(KEY=TSMETA, TYPE=DATA);
16514 +    %EM_GETNAME(KEY=TSMETA, TYPE=DATA);
16515 +     %if %sysfunc(exist(&_tsmetads)) %then %do;
16516 +         data &EM_USER_TSMETA;
16517 +                   set &_tsmetads;
16518 +         run;
16519 +    %end;
16520 +%end;
16522 +*proc print data=&EM_DATA_EMINFO;
16523 +*proc print data=&EM_IMPORT_DATA_EMINFO;
16524 +*run;
16525 +%MEND EM_TS_GETTSMETA;
16528 +/*
16529 +%macro EM_GETTSMETAVARS(TimeInterval=);
16530 +%global &TimeInterval;
16531 +%let dsid=%sysfunc(open(&EM_USER_TSMETA));
16532 +%if &dsid > 0 %then %do;
16533 +%let vn_timeinterval =%sysfunc(varnum(&dsid, TIMEINTERVAL));
16534 +%let vn_role =%sysfunc(varnum(&dsid, ROLE));
16535 +%do %while(^ %sysfunc(fetch(&dsid)));
16536 +     %let _role  = %sysfunc(getvarc(&dsid, &vn_role));
16537 +     %if &_role eq TIMEID %then %do;
16538 +            %let &TimeInterval  = %sysfunc(getvarc(&dsid, &vn_timeinterval));
16539 +     %end;
16540 +%end;
16541 +%let dsid = %sysfunc(close(&dsid));
16542 +%end;
16543 +%MEND EM_GETTSMETAVARS;
16544 +*/
16545 +%macro EM_TS_GETTSMETAVARS(TimeInterval=, TimeId=, EndTime=);
16546 +%global &TimeInterval;
16547 +%global &TimeId;
16548 +%global &EndTime;
16549 +%let dsid=%sysfunc(open(&EM_USER_TSMETA));
16550 +proc print data=&EM_USER_TSMETA;
16551 +run;
16552 +%if &dsid > 0 %then %do;
16553 +%if &TimeInterval ne %then %do;
16554 +    %let vn_timeinterval =%sysfunc(varnum(&dsid, TIMEINTERVAL));
16555 +    %let vn_role =%sysfunc(varnum(&dsid, ROLE));
16556 +    %do %while(^ %sysfunc(fetch(&dsid)));
16557 +        %let _role  = %sysfunc(getvarc(&dsid, &vn_role));
16558 +        %if &_role eq TIMEID %then %do;
16559 +            %let &TimeInterval  = %sysfunc(getvarc(&dsid, &vn_timeinterval));
16560 +        %end;
16561 +     %end;
16562 +%end;
16563 +%if &TimeId ne %then %do;
16564 +    %let vn_varname =%sysfunc(varnum(&dsid, NAME));
16565 +    %let vn_role =%sysfunc(varnum(&dsid, ROLE));
16566 +    %do %while(^ %sysfunc(fetch(&dsid)));
16567 +        %let _role  = %sysfunc(getvarc(&dsid, &vn_role));
16568 +        %if &_role eq TIMEID %then %do;
16569 +            %let &TimeId  = %sysfunc(getvarc(&dsid, &vn_varname);
16570 +        %end;
16571 +    %end;
16572 +%end;
16574 +%if &EndTime ne %then %do;
16575 +    %let vn_end =%sysfunc(varnum(&dsid, END));
16576 +    %let vn_role =%sysfunc(varnum(&dsid, ROLE));
16577 +    %do %while(^ %sysfunc(fetch(&dsid)));
16578 +        %let _role  = %sysfunc(getvarc(&dsid, &vn_role));
16579 +        %if &_role eq TIMEID %then %do;
16580 +            %let &EndTime  = %sysfunc(getvarn(&dsid, &vn_end));
16581 +        %end;
16582 +     %end;
16583 +%end;
16584 +%let dsid = %sysfunc(close(&dsid));
16585 +%end;
16586 +%MEND EM_TS_GETTSMETAVARS;
16590 +/*------------------------------------------------------------------
16592 +      Macro EM_GETTSIDMAP
16594 +------------------------------------------------------------------+*/
16597 +%macro EM_TS_GETTSIDMAP(updated=);
16599 +%let _tsidmap = ;
16601 +%if &updated = Y %then %do;
16602 +%let _tsidmap = &EM_LIB..%sysfunc(strip(&EM_METASOURCE_NODEID))_TSIDMAP ;
16603 +%if %sysfunc(exist(&_tsidmap)) %then %do;
16604 +%goto endline;
16605 +%end;
16606 +%end;
16608 +%let dsid=%sysfunc(open(&EM_IMPORT_DATA_EMINFO));
16609 +%if &dsid > 0 %then %do;
16610 +%let vn_data =%sysfunc(varnum(&dsid, DATA));
16611 +%let vn_key =%sysfunc(varnum(&dsid, KEY));
16612 +%do %while(^ %sysfunc(fetch(&dsid)));
16613 +     %let _key  = %sysfunc(getvarc(&dsid, &vn_key));
16614 +     %if &_key eq TSIDMAP %then %do;
16615 +          %let _tsidmap  = %sysfunc(getvarc(&dsid, &vn_data));
16616 +     %end;
16617 +%end;
16619 +%let dsid = %sysfunc(close(&dsid));
16620 +%end;
16622 +%endline:
16624 +%if &_tsidmap ne %then %do;
16626 +%EM_REGISTER(KEY=TSIDMAP, TYPE=DATA);
16627 +%EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
16629 +%if %sysfunc(exist(&_tsidmap)) %then %do;
16630 +         data &EM_USER_TSIDMAP;
16631 +               set &_tsidmap;
16632 +         run;
16633 +    %end;
16634 +%end;
16635 +%MEND EM_TS_GETTSIDMAP;
16637 +/*------------------------------------------------------------------*/
16642 +%MACRO EM_TS_GET_STAT(data=, var=, stat=, value=);
16643 +%global &value;
16646 +%let dsid = %sysfunc(open(&data));
16647 +%if &dsid > 0 %then %do;
16648 +    %let vn_var =%sysfunc(varnum(&dsid, &var));
16649 +    %if &vn_var < 1 %then %do;
16650 +        %let &value = 0;
16651 +        %let dsid = %sysfunc(close(&dsid));
16652 +        %goto endline;
16653 +    %end;
16654 +%let dsid = %sysfunc(close(&dsid));
16655 +%end;
16657 +%let _tmp=_tmpDS;
16658 +proc means data=&data &stat;
16659 +     var &var;
16660 +     output out=&_tmp;
16661 +run;
16663 +%let dsid = %sysfunc(open(&_tmp));
16664 +%if &dsid > 0 %then %do;
16665 +     %let vn_var =%sysfunc(varnum(&dsid, &var));
16666 +     %let vn_stat =%sysfunc(varnum(&dsid, _STAT_));
16667 +     %do %while(^%sysfunc(fetch(&dsid)));
16668 +         %let _stat  = %sysfunc(getvarc(&dsid, &vn_stat));
16669 +         %if &_stat eq &stat %then %do;
16670 +            %let &value  = %sysfunc(getvarn(&dsid, &vn_var));
16671 +          %end;
16672 +      %end;
16673 +%let dsid = %sysfunc(close(&dsid));
16674 +%end;
16675 +proc datasets lib=work nolist;
16676 + delete &_tmp;
16677 +run;
16678 +%endline:
16679 +%MEND EM_TS_GET_STAT;
16682 +%MACRO EM_TS_GET_VAR_FORMAT(data=, var=, format=, informat=);
16683 +%global &format;
16684 +%global &informat;
16685 +%let dsid = %sysfunc(open(&data));
16686 +%if &dsid > 0 %then %do;
16687 +%let vn_var =%sysfunc(varnum(&dsid, &var));
16688 +%if &vn_var > 0 %then %do; /* may causing a problem at this %if */
16689 +   %let &format  = %sysfunc(varfmt(&dsid, &vn_var));
16690 +   %let &informat  = %sysfunc(varinfmt(&dsid, &vn_var));
16691 +%end;
16692 +%let dsid = %sysfunc(close(&dsid));
16693 +%end;
16694 +%MEND EM_TS_GET_VAR_FORMAT;
16696 +%Macro EM_TS_DELETE_DATA(lib=, dsname=);
16697 +      %if &lib eq %then %let lib=work;
16698 +       proc datasets lib=&lib nolist;
16699 +              delete &dsname;
16700 +       run;
16701 +%Mend  EM_TS_DELETE_DATA;
16704 +%macro EM_TS_GetNObs(inds=, nobs=);
16705 +    %global &nobs;
16706 +    %let &nobs=0;
16707 +    data _null_;
16708 +        set &inds end=eof;
16709 +        if eof then call symput("&nobs", _N_);
16710 +    run;
16711 +    quit;
16713 +    /*
16714 +    %let dsid=%sysfunc(open(&outdata));
16715 +    %if dsid > 0 %then %do;
16716 +        %let _extobs = %sysfunc(attrn(&dsid, NOBS));
16717 +        %let dsid = %sysfunc(close(&dsid));
16718 +     %end;
16719 +    */
16720 +%mend  EM_TS_GetNObs;
16723 +%MACRO EM_TS_GET_TIME_VALUES(data=, time1=, time2=, default=);
16724 +%global &time1;
16725 +%global &time2;
16726 +%if &default = Y %then %do;
16727 +   data _null_;
16728 +        set &data end=eof;
16729 +        if _N_ = 1 then  call symput("&time1", DATE);
16730 +        if eof then call symput("&time2", DATE);
16731 +    run;%end;
16732 +%else %do;
16733 +    %let dsid = %sysfunc(open(&data));
16734 +    %if &dsid > 0 %then %do;
16735 +        %let vn_date =%sysfunc(varnum(&dsid, DATE));
16736 +        %let vn_index =%sysfunc(varnum(&dsid, _INDEX_));
16737 +        %do %while(^%sysfunc(fetch(&dsid)));
16738 +             %let _index  = %sysfunc(getvarn(&dsid, &vn_index));
16739 +             %if &_index eq 1 %then %do;
16740 +                %let &time1  = %sysfunc(getvarn(&dsid, &vn_date));
16741 +             %end;
16742 +             %if &_index eq 2 %then %do;
16743 +                %let &time2  = %sysfunc(getvarn(&dsid, &vn_date));
16744 +             %end;
16745 +        %end;
16746 +    %let dsid = %sysfunc(close(&dsid));
16747 +    %end;
16748 +%end;
16750 +%MEND EM_TS_GET_TIME_VALUES;
16752 +%MACRO EM_TS_GET_VAR_EXIST(data=, var=, exist=);
16753 +%global &exist;
16754 + %let &exist = N;
16755 +%let dsid = %sysfunc(open(&data));
16756 +%if &dsid > 0 %then %do;
16757 +%let vn_var =%sysfunc(varnum(&dsid, &var));
16758 +%if &vn_var > 0 %then %do;
16759 +    %let &exist = Y;
16760 +%end;
16761 +%let dsid = %sysfunc(close(&dsid));
16762 +%end;
16763 +%MEND EM_TS_GET_VAR_EXIST;
16766 +%macro EM_TS_MakeConstellPlotData(intreedata=, outnode=, outlink=);
16767 +data  &outlink &outnode(keep=_NAME_ NodeType LinkID);
16768 +      set &intreedata;
16769 +        LENGTH NodeType $32;
16770 +      if _PARENT_ eq " " then delete;
16771 +        if _INPUT_ ne " " then NodeType = "VARIABLE";
16772 +        else NodeType = "CLUSTER";
16773 +        LinkID = _N_;
16774 +run;
16775 +%Mend EM_TS_MakeConstellPlotData;
16780 +%macro EM_TS_CreateIDMap(
16781 +/*-------------------------------------------------------------------------*/
16782 +/*---   Written by Xiangxiang Meng                                         */
16783 +/*-------------------------------------------------------------------------*/
16784 +inDS          =,      /* imported data set in TS data mining               */
16785 +outIDMap      =,      /* output data set of TS ID map                      */
16786 +outDS         =,      /* output data set of TS and TS ID merged            */
16787 +variableSet   =,      /* EM variable set                                   */
16788 +TSIDbyCrossID =Y,
16789 +inEM          =Y
16790 +/*-------------------------------------------------------------------------*/
16791 +);
16793 +%global EM_TS_ERR;
16794 +%let EM_TS_ERR = 0;
16796 +%if &inEM eq Y %then %do;
16797 +    %let num_crossIDVar = &EM_NUM_CROSSID;
16798 +    proc sql noprint;
16799 +        select name into :timeIDVar from &variableset where upcase(role) eq 'TIMEID';
16800 +    quit;
16801 +%end;
16802 +%else %do;
16803 +    proc sql noprint;
16804 +         select count(*) into :num_crossIDVar from &variableSet
16805 +             where upcase(role) eq "CROSSID" and upcase(use) in ('Y' 'D')
16806 +         ;
16807 +         select name into :timeIDVar from &variableset where upcase(role) eq 'TIMEID'
16808 +         ;
16809 +    quit;
16810 +    %let num_crossIDVar=&num_crossIDVar;
16811 +%end;
16813 +* see if _TSID_ exists;
16815 +proc contents data=&inDS noprint out=_emtscm_contents(keep=name);
16816 +run;
16818 +proc sql noprint;
16819 +    select count(*) into :has_TSID
16820 +        from _emtscm_contents
16821 +        where upcase(strip(name)) eq '_TSID_'
16822 +    ;
16823 +quit;
16825 +/*-------------------------------------------------------------------------*/
16826 +* Creating TSID map..;
16827 +/*-------------------------------------------------------------------------*/
16829 +%if (&num_crossIDVar gt 0) %then %do;
16831 +    data _emtscm_tmpIDMap;
16832 +        set &variableSet;
16833 +        where  (upcase(strip(level)) eq 'INTERVAL')
16834 +              and ( (upcase(strip(role)) eq 'INPUT' and upcase(strip(use)) in ('Y' 'D'))
16835 +                 or (upcase(strip(role)) eq 'REJECTED' and upcase(strip(use)) eq 'Y')
16836 +                 or (upcase(strip(role)) eq 'TARGET' and upcase(strip(use)) in ('Y' 'D'))
16837 +          );
16838 +        _emts_dummy=1;
16839 +        keep name label role _emts_dummy;
16840 +    run;
16842 +    proc sql noprint;
16843 +        * create a string of crossID variable like A,B,C,D..;
16844 +        select distinct name into :crossIDVar separated by ','
16845 +            from &variableSet
16846 +            where upcase(role) eq "CROSSID" and upcase(use) in ('Y' 'D')
16847 +            order by name
16848 +        ;
16849 +        select distinct name into :IDVar1-:IDVar&num_crossIDVar
16850 +            from &variableSet
16851 +            where upcase(role) eq "CROSSID" and upcase(use) in ('Y' 'D')
16852 +            order by name
16853 +        ;
16854 +        * create the TSID map data set;
16855 +        create table _emtscm_tmp1 as
16856 +            select distinct &crossIDVar, 1 as _emts_dummy from &inDS
16857 +        ;
16858 +        * create a level list of cross ID variables and time series variables;
16859 +        create table &outIDMap as
16860 +            select distinct a.name as _NAMEID_ format=$32., a.role as _role_, a.label as _LABELID_ format=$200., &crossIDVar
16861 +            from _emtscm_tmpIDMap as a, _emtscm_tmp1 as b
16862 +            where a._emts_dummy eq b._emts_dummy
16863 +            order by a.name, &crossIDVar
16864 +        ;
16865 +    quit;
16867 +    %if &TSIDbyCrossID = Y %then %do;
16868 +        * create unique TSID only by Cross ID;
16869 +        data &outIDMap;
16870 +            length _TSID_ 8;
16871 +            set &outIDMap;
16872 +            by _NAMEID_;
16873 +            if first._NAMEID_
16874 +                then _TSID_=1;
16875 +                else _TSID_+1;
16876 +        run;
16877 +        %if "&outDS" ne "" %then %do;
16878 +            * merge TSID into &inDS;
16879 +            proc sql noprint;
16880 +                create table &outDS as
16881 +                    select a.*, b._TSID_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_tsid, noquote))"
16882 +                    from &inDS%if &has_TSID gt 0 %then %do;(drop=_TSID_)%end;   as a,
16883 +                        (select distinct _TSID_, &crossIDVar from &outIDMap)    as b
16884 +                        where %do i = 1 %to &num_crossIDVar;
16885 +                                 (a.&&&IDVar&i eq b.&&&IDVar&i) and
16886 +                              %end;
16887 +                             b._TSID_ is not missing
16888 +                    order by b._TSID_, a.&timeIDVar
16889 +                ;
16890 +            quit;
16891 +        %end;
16892 +    %end;
16893 +    %else %do;
16894 +        * create unique TSID by Cross ID and _NAMEID_;
16895 +        data &outIDMap;
16896 +            length _TSID_ 8;
16897 +            set &outIDMap;
16898 +            _TSID_=_n_;
16899 +        run;
16900 +        %if "&outDS" ne "" %then %do;
16901 +            *no merge in this output;
16902 +            data &outDS;
16903 +                set &inDS;
16904 +            run;
16905 +        %end;
16906 +    %end;
16908 +    proc sort data=&outIDMap;
16909 +        by _NAMEID_ _TSID_;
16910 +    data &outIDMap(rename=(_NAMEID2_=_NAMEID_));
16911 +        format _TSID_ best12. _NAMEID2_ $40.;
16912 +        set &outIDMap;
16913 +        by _NAMEID_;
16914 +        if first._NAMEID_
16915 +            then _emts_ind=1;
16916 +            else _emts_ind+1;
16917 +        drop _emts_ind;
16918 +        rename _NAMEID_=_VARNAME_;
16919 +        _NAMEID2_=catx('_',_NAMEID_,_emts_ind);
16920 +        if _labelID_ eq ' '
16921 +            then _labelID_ = catx(' ',_NAMEID_,_emts_ind);
16922 +            else _labelID_ = catx(' ',_labelID_,_emts_ind);
16923 +    run;
16925 +    %EM_TS_DELETE_DATA(lib=work, dsname=_emtscm:);
16927 +%end;
16928 +%else %do; /* if no crossid's the nameid needs to be created */
16930 +    data &outIDMap(keep=_NAMEID_ _ROLE_ _TSID_ _LABELID_);
16931 +        length _TSID_ 8;
16932 +        set &variableSet;
16933 +        where  (upcase(strip(level)) eq 'INTERVAL')
16934 +            and ( (upcase(strip(role)) eq 'INPUT' and upcase(strip(use)) in ('Y' 'D'))
16935 +                 or (upcase(strip(role)) eq 'REJECTED' and upcase(strip(use)) eq 'Y')
16936 +                 or (upcase(strip(role)) eq 'TARGET' and upcase(strip(use)) in ('Y' 'D'))
16937 +          );
16938 +        format _NAMEID_ $40. _VARNAME_ $32. _LABELID_ $200.;
16939 +        rename ROLE = _ROLE_;
16940 +        _NAMEID_=strip(name);
16941 +        _VARNAME_=strip(name);
16942 +        if label eq ' '
16943 +            then _LABELID_ = strip(name);
16944 +            else _LABELID_ = strip(label);
16945 +        _TSID_=_n_;
16946 +    run;
16948 +    %if "&outDS" ne "" %then %do;
16949 +        *no merge in this output;
16950 +        data &outDS;
16951 +            set &inDS;
16952 +        run;
16953 +    %end;
16954 +%end;
16956 +data &outIDMap;
16957 +    set &outIDMap;
16958 +    label _tsid_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_tsid, noquote))";
16959 +    label _nameID_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_nameid, noquote))";
16960 +    label _labelID_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_labelid, noquote))";
16961 +    label _varname_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_tsvarname, noquote))";
16962 +run;
16964 +proc datasets lib=work nolist;
16965 +    delete _emtscm_:;
16966 +run; quit;
16968 +%mend EM_TS_createIDMap;
16970 +%macro EM_TS_CreateMetaData(
16971 +/*-------------------------------------------------------------------------*/
16972 +  inDS          =,      /* imported data set in TS data mining             */
16973 +  outDS         =,      /* output data set of TS metadata                  */
16974 +  variableSet   =,      /* EM variable set                                 */
16975 +  timeInterval  =,      /* time interval                                   */
16976 +  rc            =       /* return code                                     */
16977 +/*-------------------------------------------------------------------------*/
16978 +);
16980 +%if %eval(
16981 +      &EM_NUM_BINARY_INPUT   +
16982 +      &EM_NUM_ORDINAL_INPUT  +
16983 +      &EM_NUM_NOMINAL_INPUT  +
16984 +      &EM_NUM_BINARY_REJECTED   +
16985 +      &EM_NUM_ORDINAL_REJECTED  +
16986 +      &EM_NUM_NOMINAL_REJECTED  +
16987 +      &EM_NUM_ORDINAL_TARGET  +
16988 +      &EM_NUM_NOMINAL_TARGET +
16989 +      &EM_NUM_BINARY_TARGET
16990 +      ) > 0
16991 +%then %do;
16992 +        %let  EMEXCEPTIONSTRING = exception.server.tsdm.useonlyintervalinputtarget;
16993 +        %put &em_codebar;
16994 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,TSDM.USEONLYINTERVALINPUTTARGET_ERR , NOQUOTE));
16995 +        %put &errormsg;
16996 +        %put &em_codebar;
16997 +        %goto ENDLINE;
16998 +%end;
17000 +%global EM_TS_ERR;
17001 +%let EM_TS_ERR = 0;
17003 +%if &timeInterval eq AUTO
17004 +    %then %let timeInterval  = ;
17005 +    %else %let timeInterval  = %upcase(&timeInterval);
17007 +/*-------------------------------------------------------------------------*/
17008 +* check time ID variable;
17009 +/*-------------------------------------------------------------------------*/
17011 +* number of variables in the Variableset with ROLE=TIMEID;
17012 +proc sql noprint;
17013 +    select count(*) into :num_timeID from &variableset
17014 +        where upcase(role) eq 'TIMEID';
17015 +quit;
17017 +/*-------------------------------------------------------------------------*/
17018 +* process only when there is one Time ID, otherwise exception message;
17019 +/*-------------------------------------------------------------------------*/
17021 +%if &num_timeID eq 0 %then %do;
17023 +    %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1TIMEID;
17024 +    %let EM_TS_ERR = 11;
17025 +    %put &em_codebar;
17026 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.USE1TIMEID_ERR, NOQUOTE));
17027 +    %put &errormsg;
17028 +    %put &em_codebar;
17029 +    %goto tscm_endline;
17031 +%end;
17032 +%else %if &num_timeID gt 1 %then %do;
17034 +    %let EMEXCEPTIONSTRING = exception.server.tsdm.useonlyonetimeid ;
17035 +    %let EM_TS_ERR = 12;
17036 +    %put &em_codebar;
17037 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.USEONLYONETIMEID_ERR, NOQUOTE));
17038 +    %put &errormsg;
17039 +    %put &em_codebar;
17040 +    %goto tscm_endline;
17042 +%end;
17043 +%else %do;
17044 +    *** proceed when there is one Time ID;
17046 +    data _null_;
17047 +        set &variableset(where=(upcase(role)='TIMEID'));
17048 +        call symput('timeIDFormat',     strip(format));
17049 +        call symput('timeID',           strip(upcase(name)      ));
17050 +        call symput('timeIDLevel',      strip(upcase(level))     );
17051 +        call symput('timeIDFormatType', strip(upcase(formattype)));
17052 +    run;
17054 +    *** exception message if the time ID is not an interval variable;
17055 +    %if &timeIDLevel ne INTERVAL %then %do;
17056 +        %let EMEXCEPTIONSTRING = exception.server.tsdm.useintervaltimeid;
17057 +        %let EM_TS_ERR = 13;
17058 +        %put &em_codebar;
17059 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.USEINTERVALTIMEID_ERR, NOQUOTE));
17060 +        %put &errormsg;
17061 +        %put &em_codebar;
17062 +        %goto tscm_endline;
17063 +    %end;
17065 +    %if (&timeIDFormatType ne DATETIME) and
17066 +        (&timeIDFormatType ne DATE) and
17067 +        (&timeIDFormatType ne TIME) and
17068 +        (&timeIDFormatType ne USER)
17069 +    %then %do;
17070 +        *** sequential format-type of time ID;
17072 +        %let timeInterval = DAY;
17073 +        %let timeIDFormatType = SEQ;
17075 +        proc sql noprint;
17076 +            create table _emtscm_inds as
17077 +                 select distinct &timeID from &inDS(keep=&timeID)
17078 +                 where &timeID is not missing;
17079 +            select count(*) into :num_nonInteger from _emtscm_inds
17080 +                where &timeID ne int(&timeID);
17081 +        quit;
17083 +        %if &num_nonInteger gt 0 %then %do;
17084 +            %let EMEXCEPTIONSTRING = exception.server.tsdm.useonlyintegerforseqtimeID;
17085 +            %let EM_TS_ERR = 14;
17086 +            %put &em_codebar;
17087 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.USEONLYINTEGERFORSEQTIMEID_ERR, NOQUOTE));
17088 +            %put &errormsg;
17089 +            %put &em_codebar;
17090 +            %goto tscm_endline;
17091 +        %end;
17092 +    %end;
17093 +    %else %do;
17094 +        *** date, datetime, time format-type of time ID;
17096 +        *** must have a format;
17097 +        %if ( &timeIDFormat = ) or  ( &timeIDFormat = .) %then %do;
17098 +            %let  EMEXCEPTIONSTRING = exception.server.tsdm.invalidtimeidformat;
17099 +            %let EM_TS_ERR = 15;
17100 +            %put &em_codebar;
17101 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.INVALIDTIMEIDFORMAT_ERR, NOQUOTE));
17102 +            %put &errormsg;
17103 +            %put &em_codebar;
17104 +            %goto tscm_endline;
17105 +        %end;
17107 +         *** time intervals that are shorter than DAY cannot be used for a DATE timeID variable;
17108 +        %if (&timeIDFormatType eq DATE) and (&timeInterval ne ) %then %do;
17109 +            %if (&timeInterval eq HOUR) or (&timeInterval eq MINUTE) or (&timeInterval eq SECOND) %then %do;
17110 +                %let  EMEXCEPTIONSTRING = exception.server.tsdm.invalidtimeintervalfordate;
17111 +                %let EM_TS_ERR = 16;
17112 +                %put &em_codebar;
17113 +                %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.INVALIDTIMEINTERVALFORDATE_ERR, NOQUOTE));
17114 +                %put &errormsg;
17115 +                %put &em_codebar;
17116 +                %goto tscm_endline;
17117 +            %end;
17118 +        %end;
17120 +        *** time intervals that are longer than HOUR cannot be used for a TIME timeID variable;
17121 +        %if (&timeIDFormatType eq TIME) and (&timeInterval ne ) %then %do;
17122 +            %if (&timeInterval ne HOUR) and (&timeInterval ne MINUTE) and (&timeInterval ne SECOND) %then %do;
17123 +                %let  EMEXCEPTIONSTRING = exception.server.tsdm.invalidtimeintervalfortime;
17124 +                %let EM_TS_ERR = 17;
17125 +                %put &em_codebar;
17126 +                %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.INVALIDTIMEINTERVALFORTIME_ERR, NOQUOTE));
17127 +                %put &errormsg;
17128 +                %put &em_codebar;
17129 +                %goto tscm_endline;
17130 +            %end;
17131 +        %end;
17133 +        *** the AUTO function is currently turned off for TIME timeID variable;
17134 +        %if (&timeIDFormatType eq TIME) and (&timeInterval eq ) %then %do;
17135 +            %let  EMEXCEPTIONSTRING = exception.server.tsdm.noautointervalfortime;
17136 +            %let EM_TS_ERR = 18;
17137 +            %put &em_codebar;
17138 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.NOAUTOINTERVALFORTIME_ERR, NOQUOTE));
17139 +            %put &errormsg;
17140 +            %put &em_codebar;
17141 +            %goto tscm_endline;
17142 +        %end;
17144 +        %if (&timeInterval ne ) and (&timeIDFormatType eq DATETIME)
17145 +            %then %let timeInterval =DT&timeInterval;
17147 +        proc sql noprint;
17148 +            create table _emtscm_inds as select distinct &timeID from &inDS(keep=&timeID)
17149 +                where &timeID is not missing;
17150 +        quit;
17151 +    %end;
17153 +    proc timeid data=_emtscm_inds outinterval=_emtscm_meta;
17154 +        id &timeID %if &timeInterval ne %then %do; interval=&timeinterval %end;;
17155 +    run;
17157 +    %let hasValidInterval = 0;
17158 +    %let hasLengthOne     = 0;
17160 +    proc sql noprint;
17161 +        create table _emtscm_label as
17162 +            select name,label
17163 +            from dictionary.columns
17164 +            where libname eq "WORK" and memname eq "_EMTSCM_INDS"
17165 +        ;
17166 +        create table _emtscm_meta2 as
17167 +            select a.*, b.label
17168 +            from _emtscm_meta as a, _emtscm_label as b
17169 +            where upcase(a.timeID) eq upcase(b.name)
17170 +        ;
17171 +    quit;
17173 +    data &outDS;
17174 +        set _emtscm_meta2;
17175 +        format
17176 +            timeformat      $30.
17177 +            role            $10.
17178 +            start           &timeIDformat
17179 +            end             &timeIDformat
17180 +            apply_start_end $8.
17181 +        ;
17182 +        rename
17183 +            timeID      = name
17184 +            seasonality = lengthOfCycle
17185 +            interval    = timeinterval
17186 +        ;
17187 +        keep timeID role seasonality interval timeformat start end apply_start_end timeformattype label;
17189 +        role            = "TIMEID";
17190 +        apply_start_end = 'N';
17191 +        timeformat      = symget('timeIDformat');
17192 +        timeformattype  = symget('timeIDformatType');
17194 +        label  timeID           = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_name,       noquote))";
17195 +        label  role             = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_varrole,       noquote))";
17196 +        label  seasonality      = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_lengthOfCycle, noquote))";
17197 +        label  interval         = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_timeinterval,  noquote))";
17198 +        label  timeformat       = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_timeformat,    noquote))";
17199 +        label  start            = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_timestart,     noquote))";
17200 +        label  end              = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_timeend,       noquote))";
17201 +        label  apply_start_end  = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_applystartend, noquote))";
17202 +        label  timeformattype   = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_timeformatype, noquote))";
17203 +        label  label            = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,      noquote))";
17205 +        if timeformattype eq 'SEQ' then do;
17206 +            timeformat='BEST12.';
17207 +            seasonality=1;
17208 +        end;
17210 +        call symput('_tinterval',interval);
17212 +        *** add SEMIMON WEEKDAY17W DTSEMIMON DTWEEKDAY17W 05092012;
17214 +        if upcase(timeformattype) eq 'DATE' and
17215 +           upcase(interval) in ('YEAR' 'SEMIYEAR' 'QTR' 'MONTH' 'SEMIMONTH' 'TENDAY' 'WEEK' 'WEEKDAY' 'DAY' 'SEMIMON' 'WEEKDAY17W')
17216 +            then call symput('hasValidInterval',1);
17218 +        if upcase(timeformattype) eq 'DATETIME' and
17219 +           upcase(interval) in ('DTYEAR' 'DTSEMIYEAR' 'DTQTR' 'DTMONTH' 'DTSEMIMONTH' 'DTTENDAY'
17220 +                              'DTWEEK' 'DTWEEKDAY' 'DTDAY' 'DTHOUR' 'DTMINUTE' 'DTSECOND' 'DTSEMIMON' 'DTWEEKDAY17W')
17221 +            then call symput('hasValidInterval',1);
17223 +        if upcase(timeformattype) eq 'TIME' and
17224 +           upcase(interval) in ('HOUR' 'MINUTE' 'SECOND')
17225 +            then call symput('hasValidInterval',1);
17227 +        if upcase(timeformattype) eq 'SEQ'
17228 +            then call symput('hasValidInterval',1);
17230 +        if upcase(timeformattype) eq 'USER'
17231 +            then call symput('hasValidInterval',1);
17233 +        if start eq end
17234 +            then call symput('hasLengthOne',1);
17235 +    run;
17237 +    %EM_TS_DELETE_DATA(lib=work, dsname=_em_tscm: );
17239 +    *** detect any missing time interval after running PROC TIMEID;
17240 +    %if &_tinterval eq %then %do;
17241 +        %let EMEXCEPTIONSTRING = exception.server.TIMESERIES.INVALIDTIMEINTERVAL;
17242 +        %let EM_TS_ERR = 19;
17243 +        %put &em_codebar;
17244 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.INVALIDTIMEINTERVAL_ERR, NOQUOTE));
17245 +        %put &errormsg;
17246 +        %put &em_codebar;
17247 +        %goto tscm_endline;
17248 +    %end;
17250 +    *** detect any missing time interval after running PROC TIMEID;
17251 +    %if &hasValidInterval eq 0 %then %do;
17252 +        %let EMEXCEPTIONSTRING = exception.server.TIMESERIES.CANNOTAUTODETECTTIMEINTERVAL;
17253 +        %let EM_TS_ERR = 20;
17254 +        %put &em_codebar;
17255 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.CANNOTAUTODETECTTIMEINTERVAL_ERR, NOQUOTE));
17256 +        %put &errormsg;
17257 +        %put &em_codebar;
17258 +        %goto tscm_endline;
17259 +    %end;
17261 +    %if &hasLengthOne eq 1 %then %do;
17262 +        %let EMEXCEPTIONSTRING = exception.server.TIMESERIES.TIMESERIESTOOSHORT;
17263 +        %let EM_TS_ERR = 21;
17264 +        %put &em_codebar;
17265 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.TIMESERIESTOOSHORT_ERR, NOQUOTE));
17266 +        %put &errormsg;
17267 +        %put &em_codebar;
17268 +        %goto tscm_endline;
17269 +    %end;
17271 +%end;
17273 +%tscm_endline:;
17275 +%mend EM_TS_CreateMetaData;
17278 +%macro EM_TS_Time2Seq(inDS=,tsmeta=);
17280 +data _null_;
17281 +    set &tsmeta;
17282 +    call symput('_timeidFormatType', timeformattype);
17283 +    call symput('_timeid', strip(name));
17284 +    call symput('_seqstartnum',strip(put(start,best12.)));
17285 +run;
17287 +proc contents data=&inDS noprint
17288 +    out=_emts_tmpp1(keep=name label where=(upcase(name) eq "%upcase(&_timeID)"));
17289 +run; quit;
17291 +data _null_;
17292 +    set _emts_tmpp1;
17293 +    call symput('_timeIDlabel',label);
17294 +run;
17296 +%if &_timeidFormatType eq SEQ
17297 +%then %do;
17298 +    proc sql noprint;
17299 +        select min(&_timeid) format=date9. into :_dummystarttime from &inDS;
17300 +    quit;
17301 +    %let _dummystarttime=&_dummystarttime;
17303 +    data &inDS(rename=(_tsdp_tmpID=&_timeid));
17304 +        set &inDS;
17305 +        _tsdp_tmpID = intck('DAY',"&_dummystarttime"d,&_timeid)+&_seqstartnum;
17306 +        drop &_timeid;
17307 +        label _tsdp_tmpID = "&_timeIDlabel";
17309 +    run;
17310 +%end;
17312 +%mend;
17314 +%macro EM_TS_Datetime2Time(inDS=,tsmeta=);
17316 +data _null_;
17317 +    set &tsmeta;
17318 +    call symput('_timeidFormatType', timeformattype);
17319 +    call symput('_timeidFormat', timeformat);
17320 +    call symput('_timeid', strip(name));
17321 +    call symput('_timeinterval',strip(upcase(timeinterval)));
17322 +run;
17324 +/* manually change time ID format to a longer enough time format */
17325 +/* because proc timeid returns time5. for second time interval */
17326 +/* which is not long enough for transpose with time unit as seconds */
17327 +%if &_timeinterval eq SECOND
17328 +%then %do;
17329 +    %let _timeIDformat = %str(time8.);
17330 +%end;
17332 +proc contents data=&inDS noprint
17333 +    out=_emts_tmpp1(keep=name label where=(upcase(name) eq "%upcase(&_timeID)"));
17334 +run; quit;
17336 +data _null_;
17337 +    set _emts_tmpp1;
17338 +    call symput('_timeIDlabel',label);
17339 +run;
17341 +%if &_timeidFormatType eq TIME
17342 +%then %do;
17343 +    data &inDS(rename=(_tsdp_tmpID=&_timeid));
17344 +        set &inDS;
17345 +        _tsdp_tmpID = timepart(&_timeID);
17346 +        format _tsdp_tmpID &_timeidFormat;
17347 +        label  _tsdp_tmpID = "&_timeIDlabel";
17348 +        drop &_timeid;
17349 +    run;
17350 +%end;
17352 +%mend;
17354 +%macro EM_TS_CreateTimeStartAndEnd(inDS=, outDS=, timeIDVar=, compare=N);
17356 + proc sql noprint;
17357 +     create table _tmptimetable as
17358 +         select distinct &timeidvar as DATE from &inDS
17359 +         where &timeIDVar is not missing
17360 +         order by &timeIDVar;
17361 + quit;
17363 +%if &compare eq Y %then %do;
17364 +    * compare with the existing time table;
17365 +    proc compare data=&EM_USER_TIMESTARTANDEND(keep=DATE)
17366 +        compare=_tmptimetable(keep=DATE) out=_tmpdiff outdif outnoequal noprint;
17367 +    run;
17369 +    %EM_TS_GetNObs(inds=_tmpdiff, nobs=_diffobs);
17371 +    %if &_diffobs > 0 %then %do; /* create it again */
17372 +        data &outDS(keep=DATE _INDEX_);
17373 +            set _tmptimetable end = _eof_;
17374 +            if _N_ = 1
17375 +                then _INDEX_ = 1;
17376 +                else _INDEX_ = 0;
17377 +            if _eof_ then _INDEX_= 2;
17378 +        run;
17379 +    %end;
17381 +    %EM_TS_DELETE_DATA(lib=work, dsname=_tmpdiff);
17382 +    %EM_TS_DELETE_DATA(lib=work, dsname=_tmptimetable);
17383 +%end;
17384 +%else %do;
17385 +    * create a new time table directly;
17386 +    data &outDS(keep=DATE _INDEX_);
17387 +        set _tmptimetable end = _eof_;
17388 +        if _N_ = 1
17389 +            then _INDEX_ = 1;
17390 +            else _INDEX_ = 0;
17391 +        if _eof_ then _INDEX_= 2;
17392 +    run;
17394 +    %EM_TS_DELETE_DATA(lib=work, dsname=_tmptimetable);
17395 +%end;
17397 +* assign a defult format BEST12. for sequential time ID;
17399 +proc contents data=&outDS noprint out=_tmpcontents(keep=name format);
17401 +%let _nodatefmt=N;
17403 +data _null_;
17404 +    set _tmpcontents;
17405 +    where upcase(name) eq 'DATE';
17406 +    if strip(format) eq ' ' then call symput('_nodatefmt','Y');
17407 +run;
17409 +%if "&_nodatefmt" eq "Y" %then %do;
17410 +    data &outDS;
17411 +        set &outDS;
17412 +        format date best12.;
17413 +    run;
17414 +%end;
17416 +%EM_TS_DELETE_DATA(lib=work, dsname=_tmpcontents);
17418 +%mend;
17422 +%macro EM_TS_Transpose(
17423 +/*-------------------------------------------------------------------------*/
17424 +  inDS          =,      /* imported data set in TS data mining             */
17425 +  inIDMap       =,      /* input TS ID map                                 */
17426 +  variableSet   =,      /* variable set                                    */
17427 +  transposeBy   =,      /* byTSID or byTimeID                              */
17428 +  outDS         =,      /* output transposed data set                      */
17429 +  outIDMap      =,      /* output TS ID map for the new transposed data set*/
17430 +  inEM          =Y,
17431 +  timePrefix    =_T
17432 +/*-------------------------------------------------------------------------*/
17433 +);
17435 +%let timePrefix = &timePrefix;
17437 +%if  &EM_NUM_CROSSID > 0 %then %do;
17439 +data _emtstp_map0(rename=(_VARNAME_=_NAMEID_));
17440 +    set &inIDMap;
17441 +    drop _NAMEID_;
17442 +    run;
17443 +%let inIDMap=_emtstp_map0;
17445 +%end;
17447 +proc sql noprint;
17448 +    * number of TS Variables to be transposed;
17449 +    select count(distinct _NAMEID_) into :num_TSVar from &inIDMap
17450 +    ;
17451 +    * number of TS Variables to be transposed;
17452 +    select max(_TSID_) into :num_TSID from &inIDMap
17453 +    ;
17454 +    * name list of TS Variables;
17455 +    select distinct _NAMEID_ into :TSVar1-:TSVar%left(&num_TSVar)
17456 +        from &inIDMap
17457 +        order by _NAMEID_
17458 +    ;
17459 +    * total number of time series =max(_TSID_)*&num_TSVar;
17460 +    * and the number of digits of this variable is &num_digits;
17461 +    select ceil(log(max(_TSID_)*&num_TSVar+1)/log(10)) into :num_digits
17462 +        from &inIDMap
17463 +    ;
17464 +      * Time ID variable;
17465 +    select name into:timeIDVar from &variableset
17466 +        where upcase(role) eq 'TIMEID'
17467 +    ;
17468 +quit;
17469 +%let num_digits = &num_digits;
17470 +%let num_TS     = %eval(&num_TSVar*&num_TSID);
17472 +/*-------------------------------------------------------------------------*/
17474 +* get number of cross IDs and also the TIME ID variable name;
17475 +%if &inEM eq Y %then %do;
17476 +    %let num_crossIDVar = &EM_NUM_CROSSID;
17477 +    %let crossIDVar     = %EM_CROSSID;
17478 +%end;
17479 +%else %do;
17480 +    proc sql noprint;
17481 +        * number of cross ID;
17482 +        select count(*) into :num_crossIDVar
17483 +            from &variableSet
17484 +            where upcase(role) eq "CROSSID" and upcase(use) in ('Y' 'D')
17485 +        ;
17486 +        * create a string of crossID variable like A B C D..;
17487 +        select distinct name into :crossIDVar separated by ' '
17488 +            from &variableSet
17489 +            where upcase(role) eq "CROSSID" and upcase(use) in ('Y' 'D')
17490 +            order by name
17491 +        ;
17492 +    quit;
17493 +    %let num_crossIDVar=&num_crossIDVar;
17494 +%end;
17496 +/*-------------------------------------------------------------------------*/
17498 +%if (&num_crossIDVar gt 0) %then %do;
17500 +    data _emtstp_tmpDat;
17501 +        set &inDS(keep=%do i=1 %to &num_TSVar; &&&TSVar&i %end; &crossIDVar &timeIDVar _TSID_);
17502 +        _NAMEID_ = cats("_TS_",_TSID_);
17503 +        label %do i=1 %to &num_TSVar; &&&TSVar&i=" " %end; ;
17504 +    run;
17506 +    %if %upcase(&transposeBy) eq BYTSID %then %do;
17508 +        * update the ID maps;
17509 +        proc sort data=&inIDMap out=_emtstp_tmpmap;
17510 +            by _NAMEID_ _TSID_;
17511 +        data &outIDMap;
17512 +            set _emtstp_tmpmap;
17513 +            *_LABELID_ = catx(' ',_LABELID_,_TSID_);
17514 +            _NAMEID_  = cats("_TS_",put(_N_,z&num_digits..));
17515 +        run;
17517 +        * get the names for the new variables;
17518 +        proc sql noprint;
17519 +            select strip(_NAMEID_) into :tsname1-:tsname%left(&num_TS) from &outIDMap
17520 +            ;
17521 +            select strip(_LABELID_) into :tslabel1-:tslabel%left(&num_TS) from &outIDMap
17522 +            ;
17523 +        quit;
17525 +        * data must be sorted before transposed;
17526 +        proc sort data=_emtstp_tmpDat;
17527 +            by &timeIDvar;
17528 +        run;
17530 +        %do i = 1 %to &num_TSVar;
17531 +            %let i = &i;
17532 +            * transpose one cross-type time series data by TSID;
17533 +            proc transpose data=_emtstp_tmpDat out=_emtstp_td&i(drop=_name_) prefix=_V_&i;
17534 +                id _NAMEID_;
17535 +                by &timeIDVar;
17536 +                var &&&TSVar&i;
17537 +            run;
17538 +        %end;
17540 +        * merge all vertical time series, rename and label them;
17541 +        data &outDS;
17542 +            merge %do i=1 %to &num_TSVar; _emtstp_td&i %end;;
17543 +            by &timeIDVar;
17544 +            rename
17545 +                %do i = 1 %to &num_TSVar;
17546 +                    %do j = 1 %to &num_TSID;
17547 +                        %let num1 = %eval((&i-1)*&num_TSID+&j);
17548 +                        /* %put &i &j &num1 &num_TSID; */
17549 +                        _V_&i._TS_&j = &&&tsname&num1
17550 +                    %end;
17551 +                %end;
17552 +            ;
17553 +            label
17554 +                %do i = 1 %to &num_TSVar;
17555 +                    %do j = 1 %to &num_TSID;
17556 +                        %let num1 = %eval((&i-1)*&num_TSID+&j);
17557 +                        /* %put &i &j &num1 &num_TSID; */
17558 +                        _V_&i._TS_&j = "%nrbquote(&&&tslabel&num1)"
17559 +                    %end;
17560 +                %end;
17561 +            ;
17562 +        run;
17563 +    %end;
17564 +    %else %do;
17566 +        * update the ID maps;
17567 +        proc sort data=&inIDMap out=_emtstp_tmpmap;
17568 +            by _NAMEID_ _TSID_;
17569 +        data &outIDMap;
17570 +            set _emtstp_tmpmap;
17571 +            *_LABELID_ = catx(' ',_LABELID_,_TSID_);
17572 +            _NAMEID_  = cats("_TS_",put(_N_,z&num_digits..));
17573 +        run;
17575 +        proc sql noprint;
17576 +            * get the roles for the new variables;
17577 +            select distinct _role_ into :TSRole1-:TSRole%left(&num_TSVar)
17578 +                from &inIDMap
17579 +                order by _NAMEID_
17580 +            ;
17581 +            * get the length of the time series;
17582 +            select count(distinct &timeIDvar) into :num_T
17583 +                from _emtstp_tmpDat
17584 +            ;
17585 +        quit;
17587 +        * data must be sorted before transposed;
17588 +        proc sort data=_emtstp_tmpDat;
17589 +            by _TSID_ &crossIDVar &timeIDvar;
17590 +        run;
17592 +        %do i = 1 %to &num_TSVar;
17593 +            %let i = &i;
17594 +            * transpose one cross-type time series data by TIMEID;
17595 +            proc transpose data=_emtstp_tmpDat out=_emtstp_td&i(drop=_name_) prefix=&timePrefix;
17596 +                by _TSID_ &crossIDVar;
17597 +                var &&&TSVar&i;
17598 +            run;
17599 +        %end;
17601 +        * stack all horizontal time series;
17602 +        data &outDS;
17603 +            format _TSID_ best12. _NAMEID_ $32. _ROLE_ $32.;
17604 +            length %do t=1 %to &num_T; &timePrefix.&t 8 %end;;
17605 +            set %do i=1 %to &num_TSVar; _emtstp_td&i(in=in&i) %end;;
17606 +            %do i=1 %to &num_TSVar;
17607 +                if in&i then do;
17608 +                    _NAMEID_ ="&&&TSVar&i";
17609 +                    _ROLE_   ="&&&TSRole&i";
17610 +                end;
17611 +            %end;
17612 +            label _tsid_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_tsid, noquote))"   ;
17613 +            label _nameID_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_nameid, noquote))" ;
17614 +            label  role    = "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_varrole, noquote))";
17615 +        run;
17616 +    %end;
17617 +%end;
17618 +%else %do;
17620 +    proc sql noprint;
17621 +        select _NAMEID_ into :panelTSVar separated by ' ' from &inIDMap
17622 +            order by _NAMEID_
17623 +        ;
17624 +    quit;
17626 +    %if %upcase(&transposeBy) eq BYTSID %then %do;
17627 +        * transpose the panel-type time series data by TSID;
17628 +        proc sort data=&inDS out=_emtstp_tmpDat;
17629 +            by &timeIDvar;
17630 +        proc transpose data=_emtstp_tmpDat
17631 +            out=_emtstp_tmpDat2(keep=&timeIDvar _name_ col1 rename=(_name_=_ts_tmpname_ col1=_TSVALUE_));
17632 +            by &timeIDVar;
17633 +            var &panelTSVar;
17634 +        run;
17635 +        proc datasets lib=work nolist;
17636 +            modify _emtstp_tmpDat2;
17637 +            label _TSVALUE_= "%sysfunc(sasmsg(sashelp.dmine, rpt_tsdm_tsvalue, noquote))";
17638 +            run; quit;
17639 +    %end;
17640 +    %else %do;
17641 +        * transpose the panel-type time series data by TIMEID;
17642 +        proc sort data=&inDS out=_emtstp_tmpDat;
17643 +            by &timeIDvar;
17644 +        data _emtstp_tmpDat;
17645 +            set _emtstp_tmpDat;
17646 +            _tmp_ind=_n_;
17647 +        proc transpose data=_emtstp_tmpDat prefix=&timePrefix
17648 +            out=_emtstp_tmpDat2(keep=_name_ &timePrefix: rename=(_name_=_ts_tmpname_));
17649 +            ID _tmp_ind;
17650 +            var &panelTSVar;
17651 +        run;
17652 +    %end;
17654 +      * merge ID maps to the transpose data set;
17655 +      proc sql noprint;
17656 +          create table &outDS(drop=_ts_tmpname_ _role_ _LABELID_ /*_TSID_*/ rename=(_NAMEID_=_TSNAME_)) as
17657 +              select a.*, b.* from &inIDMap as a, _emtstp_tmpDat2 as b
17658 +              where upcase(a._NAMEID_) eq upcase(b._ts_tmpname_)
17659 +          ;
17660 +      quit;
17662 +      * update the TS ID map;
17663 +      data &outIDMap;
17664 +          set &inIDMap;
17665 +      run;
17666 +%end;
17668 +proc datasets lib=work nolist;
17669 +    delete _emtstp:;
17670 +run; quit;
17672 +%mend EM_TS_Transpose;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTSDM.TSESM_TRAIN.SOURCE.
17674 +/*----------------------------------------------------------------------------------+
17675 + |
17676 + |   Title :  TS ESM Forecasting Node
17677 + |
17678 + |
17679 + |   SUPPORT: Taiyeong Lee (taiyeong.lee@sas.com)
17680 + |
17681 + +-----------------------------------------------------------------------------------*/
17683 +%macro EM_TSESM_TRAIN;
17685 +   /*---------- Check and assign the input data set --------------------------*/
17687 +    %let _IMPORT_DATA  = ;
17688 +    %let _IMPORT_CMETA = ;
17689 +    %let _DATA_EMINFO  = ;
17690 +    %let _EXPORT_DATA  = ;
17691 +    %let _FILE_CDELTA  = ;
17693 +    %if &EM_IMPORT_DATA ne  %then %do;
17694 +           %let _IMPORT_DATA   = &EM_IMPORT_DATA;
17695 +           %let _IMPORT_CMETA  = &EM_IMPORT_DATA_CMETA;
17696 +           %let _DATA_EMINFO   = &EM_IMPORT_DATA_EMINFO;
17697 +           %let _EXPORT_DATA   = &EM_EXPORT_TRAIN;
17698 +           %let _FILE_CDELTA  =  &EM_FILE_CDELTA_TRAIN;
17700 +    %end;
17701 +    %else %if &EM_IMPORT_TRANSACTION ne  %then %do;
17702 +           %let _IMPORT_DATA   = &EM_IMPORT_TRANSACTION;
17703 +           %let _IMPORT_CMETA  = &EM_IMPORT_TRANSACTION_CMETA;
17704 +           %let _DATA_EMINFO   = &EM_IMPORT_TRANSACTION_EMINFO;
17705 +           %let _EXPORT_DATA  =  &EM_EXPORT_TRANSACTION;
17706 +           %let _FILE_CDELTA  =  &EM_FILE_CDELTA_TRANSACTION;
17707 +    %end;
17708 +    %else %do;
17709 +           %let  EMEXCEPTIONSTRING = exception.server.tsdm.noinputdata;
17710 +           %goto ENDLINE;
17711 +    %end;
17712 +/*-------------  check time id variable -----------------------------*/
17713 +%local _numTimeIDs;
17714 +%let _numTimeIDs=0;
17716 +proc sql noprint;
17717 +    select count(*) into :_numTimeIDs
17718 +    from &EM_DATA_VARIABLESET
17719 +    where upcase(role) eq 'TIMEID' and upcase(strip(level)) eq 'INTERVAL' and upcase(strip(use)) in ('Y' 'D');
17720 +quit;
17722 +%if &_numTimeIDs eq 0 %then %do;
17724 +    %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1TIMEID;
17725 +    %put &em_codebar;
17726 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.USE1TIMEID_ERR, NOQUOTE));
17727 +    %put &errormsg;
17728 +    %put &em_codebar;
17729 +    %goto ENDLINE;
17731 +%end;
17732 +%else %if &_numTimeIDs gt 1 %then %do;
17734 +    %let EMEXCEPTIONSTRING = exception.server.tsdm.useonlyonetimeid ;
17735 +    %put &em_codebar;
17736 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, TSDM.USEONLYONETIMEID_ERR, NOQUOTE));
17737 +    %put &errormsg;
17738 +    %put &em_codebar;
17739 +    %goto ENDLINE;
17741 +%end;
17743 +   %let _nivars = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17744 +   %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
17745 +        %if &_nivars < 1 %then %do;
17746 +              %put &em_codebar;
17747 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, tsdm.need1intervalrejectinput_ERR , NOQUOTE));
17748 +              %put &errormsg;
17749 +              %put &em_codebar;
17750 +              %let  EMEXCEPTIONSTRING = exception.server.tsdm.need1intervalrejectinput;
17751 +              %goto ENDLINE;
17752 +         %end;
17754 +   %end;
17755 +   %else %do;
17757 +        /* will forecast a target variable (with crossids) or variables (panel) */
17759 +        %if &EM_NUM_INTERVAL_TARGET < 1 %then %do;
17760 +             %put &em_codebar;
17761 +             %let errormsg = %sysfunc(sasmsg(sashelp.dmine, tsdm.USE1INTERVALTARGET_ERR , NOQUOTE));
17762 +             %put &errormsg;
17763 +             %put &em_codebar;
17764 +             %let EMEXCEPTIONSTRING = exception.server.tsdm.USE1INTERVALTARGET;
17765 +             %goto ENDLINE;
17766 +        %end;
17768 +        %if (&EM_NUM_CROSSID > 0) and (&EM_NUM_INTERVAL_TARGET > 1) %then %do;
17770 +             %put &em_codebar;
17771 +             %let errormsg = %sysfunc(sasmsg(sashelp.dmine, tsdm.csidonly1inttarget_err , NOQUOTE));
17772 +             %put &errormsg;
17773 +             %put &em_codebar;
17774 +             %let EMEXCEPTIONSTRING = exception.server.tsdm.csidonly1inttarget;
17775 +             %goto ENDLINE;
17776 +        %end;
17778 +    %end;
17780 +    %if  &EM_PROPERTY_STARTSUM > &EM_PROPERTY_FCLEAD %then %do;
17782 +             %put &em_codebar;
17783 +             %let errormsg = %sysfunc(sasmsg(sashelp.dmine, tsdm.startsumlessflead_err , NOQUOTE));
17784 +             %put &errormsg;
17785 +             %put &em_codebar;
17786 +             %let  EMEXCEPTIONSTRING =exception.server.tsdm.startsumlessflead;
17787 +             %goto ENDLINE;
17788 +    %end;
17790 +   /* Check strictly positive seq for &EM_PROPERTY_FCMETHOD eq WINTERS or MULTSEASONAL */
17792 +%macro TSESM_input_varlist(varlist);
17793 +   %local outlist i;
17794 +   %let i = 2;
17795 +   %let outlist = %scan(&varlist, 1, ' ' );
17797 +   %do %while (%scan(&varlist, &i, ' ' ) ne );
17799 +      %let outlist = &outlist  %str(,) %scan(&varlist, &i, ' ' );
17800 +      %let i  = %eval(&i+1);
17801 +   %end;
17803 +   &outlist
17804 +%mend TSESM_input_varlist;
17806 +    %if  &EM_PROPERTY_FCMETHOD eq WINTERS or &EM_PROPERTY_FCMETHOD eq MULTSEASONAL %then %do;
17807 +       %let _tsseq_flag = 0;
17809 +       %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
17810 +          proc sql noprint;
17811 +             select min(min( %TSESM_input_varlist(%EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED)),100 )  into :_tsseq_min from &_IMPORT_DATA;
17812 +          quit;
17813 +          %if %sysfunc(floor(&_tsseq_min))  < 0 %then  %let  _tsseq_flag = 1;
17814 +       %end;
17815 +       %else %do;
17816 +         proc sql noprint;
17817 +            select min(min( %TSESM_input_varlist(%EM_TARGET)),100 ) into :_tsseq_min from &_IMPORT_DATA;
17818 +         quit;
17819 +         %if %sysfunc(floor(&_tsseq_min))  < 0 %then  %let  _tsseq_flag = 1;
17820 +       %end;
17821 +       %if &_tsseq_flag = 1 %then %do;
17822 +             %put &em_codebar;
17823 +             %let errormsg = %sysfunc(sasmsg(sashelp.dmine, tsdm.strictpositive_err , NOQUOTE));
17824 +             %put &errormsg;
17825 +             %put &em_codebar;
17826 +             %let  EMEXCEPTIONSTRING =exception.server.tsdm.strictpositive;
17827 +             %goto ENDLINE;
17828 +       %end;
17829 +    %end;
17833 +   /* When Forecast Input Time Series is Yes, Output Data Type is always Default */
17834 +   %let _EXPORTDATA = &EM_PROPERTY_EXPORTDATA;
17835 +   %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
17836 +      %let _EXPORTDATA = DEFAULT   ;
17837 +      %let EM_PROPERTY_EXPORTDATA  = DEFAULT   ;
17839 +   %end;
17841 +    %EM_GETNAME(KEY=TSMETA, TYPE=DATA);
17842 +    %EM_GETNAME(KEY=TSIDMAP, TYPE=DATA);
17844 +    /*---- EM_TS_CreateMetadata do validation of Time ID and return EM_TS_ERR   ----------------------------*/
17846 +    %EM_TS_CreateMetadata(inDS=&_IMPORT_DATA, outDS =&EM_USER_TSMETA, variableSet =&EM_DATA_VARIABLESET, timeInterval=&EM_PROPERTY_TIMEINTERVAL, rc=);
17848 +    %if &EM_TS_ERR > 0 %then  %do;
17850 +       %let EM_TS_ERR = 0;
17851 +       %goto ENDLINE;
17852 +    %end;
17854 +    /*----- Get time interval ---------------------------*/
17856 +    %EM_TS_GETTSMETAVARS(TimeInterval=_timeinterval);
17858 +    /*--- _EXPORT_DATA will be used as an input data becuase  _TSID_  is needed to run TS ESM Node */
17860 +    %EM_TS_CreateIDMap(inDS=&_IMPORT_DATA, outIDMap =&EM_USER_TSIDMAP, outDS =&_EXPORT_DATA, variableSet =&EM_DATA_VARIABLESET, TSIDbyCrossID =Y);
17862 +    /*----------- Modify TSID MAP --------------------------------*/
17864 +    %if (&EM_NUM_CROSSID > 0) %then %do;
17865 +         %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
17866 +             data &EM_USER_TSIDMAP;
17867 +                  set &EM_USER_TSIDMAP;
17868 +                  if upcase(strip(_ROLE_)) ="INPUT" then output;
17869 +             run;
17870 +         %end;
17871 +         %else %do;
17872 +             data &EM_USER_TSIDMAP;
17873 +                  set &EM_USER_TSIDMAP;
17874 +                  if upcase(strip(_ROLE_)) ="TARGET" then output;
17875 +             run;
17876 +         %end;
17877 +    %end;
17878 +    %else %do;
17879 +         %if &_EXPORTDATA ne DEFAULT  %then %do;
17881 +             %if &EM_PROPERTY_EXTINPUT eq Y %then %do;
17882 +                 data &EM_USER_TSIDMAP;
17883 +                      set &EM_USER_TSIDMAP; retain _tmptsid 0;
17884 +                      if upcase(strip(_ROLE_)) ="INPUT" then do; _tmptsid=_tmptsid+1; _TSID_=_tmptsid;output;end;
17885 +                      drop _tmptsid;
17886 +                 run;
17887 +             %end;
17888 +             %else %do;
17889 +                 data &EM_USER_TSIDMAP;
17890 +                      set &EM_USER_TSIDMAP; retain _tmptsid 0;
17891 +                      if upcase(strip(_ROLE_)) ="TARGET" then do; _tmptsid=_tmptsid+1; _TSID_=_tmptsid;output;end;
17892 +                      drop _tmptsid;
17893 +                 run;
17895 +             %end;
17896 +         %end;
17897 +    %end;
17902 +    %let _tsidVar = ;
17903 +    %let _existsgmtvar = N;
17905 +    %if %EM_CROSSID ne %then %do;
17906 +        %let _tsidVar =_TSID_ ;
17907 +        /*---------  check Segmentvar : may not need implement, will decided at the next version -----------
17908 +                     So the _segment_ related codes have not been removed in other source codes
17909 +         ---------------------------------------------------------------------------------------------------
17910 +        %let j=1;
17911 +        %do %while(%scan(%EM_CROSSID, &j) ne );
17912 +            %let _csvar=%scan(%EM_CROSSID, &j);
17913 +            %if &_csvar = _SEGMENT_ %then %let _existsgmtvar =Y;
17914 +            %let j=%eval(&j+1);
17915 +        %end;
17916 +        %if &_existsgmtvar = Y %then %let _tsidVar = _SEGMENT_;
17917 +        +-------------------------------------------*/
17918 +    %end;
17920 +    /*----------- Forecasting ----------------------------------*/
17922 +    %EM_GETNAME(KEY=OUTEST, TYPE=DATA);
17923 +    %EM_GETNAME(KEY=OUTDATA, TYPE=DATA);
17924 +    %EM_GETNAME(KEY=OUTFORCST, TYPE=DATA);
17925 +    %EM_GETNAME(KEY=OUTSTAT, TYPE=DATA);
17926 +    %EM_GETNAME(KEY=OUTSUM, TYPE=DATA);
17927 +    %EM_GETNAME(KEY=OUTCLUS, TYPE=DATA);
17928 +    %EM_GETNAME(KEY=OUTLIER, TYPE=DATA);
17929 +    %EM_GETNAME(KEY=OUTPRED, TYPE=DATA);
17930 +    %EM_GETNAME(KEY=OUTKLD, TYPE=DATA);
17931 +    %EM_GETNAME(KEY=OUTLIERDS, TYPE=DATA);
17934 +    %if &EM_PROPERTY_FCMETHOD ne BEST %then %do;
17936 +       %if &EM_PROPERTY_SEASONALITY eq DEFAULT %then %do;
17937 +           %if ( &_timeinterval eq YEAR ) or ( &_timeinterval eq DTYEAR ) %then %do;
17938 +               %if (&EM_PROPERTY_FCMETHOD eq ADDSEASONAL ) or (&EM_PROPERTY_FCMETHOD eq MULTSEASONAL)
17939 +                   or (&EM_PROPERTY_FCMETHOD eq ADDWINTERS) or (&EM_PROPERTY_FCMETHOD eq WINTERS) %then %do;
17940 +                   %let  EMEXCEPTIONSTRING =exception.server.tsdm.requirenonseasonalmodel;
17941 +                   %goto ENDLINE;
17942 +               %end;
17943 +           %end;
17944 +       %end;
17946 +       %EM_TSESM_Forecast(indata=&_EXPORT_DATA,
17947 +                          method=&EM_PROPERTY_FCMETHOD,
17948 +                          timeinterval=&_timeinterval,
17949 +                          timeid=%EM_TIMEID ,
17950 +                          target=%EM_TARGET ,
17951 +                          tsidvar = &_tsidVar,
17952 +                          lead=&EM_PROPERTY_FCLEAD,
17953 +                          back=&EM_PROPERTY_FCBACK,
17954 +                          startsum=&EM_PROPERTY_STARTSUM,
17955 +                          seasonality=&EM_PROPERTY_SEASONALITY,
17956 +                          alpha=&EM_PROPERTY_ALPHA,
17957 +                          accumulate=&EM_PROPERTY_ACCUMULATE,
17958 +                          extendedvalue = &EM_PROPERTY_EXTENDEDVALUE,
17959 +                          outest=&EM_USER_OUTEST,
17960 +                          outdata=&EM_USER_OUTDATA,
17961 +                          outfor =&EM_USER_OUTFORCST ,
17962 +                          outstat = &EM_USER_OUTSTAT ,
17963 +                          outsum=&EM_USER_OUTSUM
17964 +                          );
17965 +    %end;
17966 +    %else %do;
17967 +           %let n_model = 0;
17968 +           %if &EM_PROPERTY_SIMPLE eq Y %then %let n_model = %eval(&n_model+1);
17969 +           %if &EM_PROPERTY_DOUBLE eq Y %then %let n_model = %eval(&n_model+1);
17970 +           %if &EM_PROPERTY_LINEAR eq Y %then %let n_model = %eval(&n_model+1);
17971 +           %if &EM_PROPERTY_DAMPTREND eq Y %then %let n_model = %eval(&n_model+1);
17972 +           %if (&_timeinterval ne YEAR ) and ( &_timeinterval ne DTYEAR ) %then %do;
17973 +               %if (&EM_PROPERTY_ADDSEASONAL eq Y) %then  %let n_model = %eval(&n_model+1);
17974 +               %if (&EM_PROPERTY_MULTSEASONAL eq Y) %then %let n_model = %eval(&n_model+1);
17975 +               %if (&EM_PROPERTY_ADDWINTERS eq Y) %then   %let n_model = %eval(&n_model+1);
17976 +               %if (&EM_PROPERTY_WINTERS eq Y) %then      %let n_model = %eval(&n_model+1);
17977 +           %end;
17978 +           %if &n_model eq 0 %then %do;
17979 +                %let  EMEXCEPTIONSTRING =exception.server.tsdm.zerocandidatemodel;
17980 +                %GOTO ENDLINE;
17981 +           %end;
17983 +       %EM_TSESM_Best_Forecast(indata=&_EXPORT_DATA,
17984 +                          method=&EM_PROPERTY_FCMETHOD,
17985 +                          criterion=&EM_PROPERTY_BESTCRIT,
17986 +                          timeinterval=&_timeinterval,
17987 +                          timeid=%EM_TIMEID ,
17988 +                          target=%EM_TARGET ,
17989 +                          tsidvar = &_tsidVar,
17990 +                          lead=&EM_PROPERTY_FCLEAD,
17991 +                          back=&EM_PROPERTY_FCBACK,
17992 +                          startsum=&EM_PROPERTY_STARTSUM,
17993 +                          seasonality=&EM_PROPERTY_SEASONALITY,
17994 +                          alpha=&EM_PROPERTY_ALPHA,
17995 +                          accumulate=&EM_PROPERTY_ACCUMULATE,
17996 +                          extendedvalue = &EM_PROPERTY_EXTENDEDVALUE,
17997 +                          outest=&EM_USER_OUTEST,
17998 +                          outdata=&EM_USER_OUTDATA,
17999 +                          outfor =&EM_USER_OUTFORCST ,
18000 +                          outstat = &EM_USER_OUTSTAT ,
18001 +                          outsum=&EM_USER_OUTSUM
18002 +                         );
18003 +    %end;
18005 +    %EM_TS_Time2Seq(inDS=&EM_USER_OUTFORCST,tsmeta=&EM_USER_TSMETA);
18006 +    %EM_TS_Time2Seq(inDS=&EM_USER_OUTDATA,tsmeta=&EM_USER_TSMETA);
18007 +    %EM_TS_Time2Seq(inDS=&_EXPORT_DATA,tsmeta=&EM_USER_TSMETA);
18010 +    %EM_TSESM_MakeOutlierIndex(indata=&EM_USER_OUTFORCST,
18011 +                               timeid=%EM_TIMEID,
18012 +                               outoutlier=&EM_USER_OUTLIER,
18013 +                               outlierds=&EM_USER_OUTLIERDS,
18014 +                               outdata=&EM_USER_OUTFORCST
18015 +                               );
18017 +    %EM_TSESM_MakeOutPred(indata=&EM_USER_OUTFORCST,
18018 +                          target=%EM_TARGET,
18019 +                          timeid=%EM_TIMEID,
18020 +                          outdata=&EM_USER_OUTPRED
18021 +                         );
18024 +    %ENDLINE:
18025 +%mend EM_TSESM_TRAIN;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_VARIABLESET.
      WHERE UPCASE(role)='TIMEID';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._EMTSCM_INDS created, with 100 rows and 1 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Number of time vectors processed: 1
NOTE: There were 100 observations read from the data set WORK._EMTSCM_INDS.
NOTE: The data set WORK._EMTSCM_META has 1 observations and 24 variables.
NOTE: PROCEDURE TIMEID used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK._EMTSCM_LABEL created, with 1 rows and 2 columns.

NOTE: Table WORK._EMTSCM_META2 created, with 1 rows and 25 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      379:48    399:62    415:122   425:137   435:136   445:152   
NOTE: There were 1 observations read from the data set WORK._EMTSCM_META2.
NOTE: The data set EMWS5.TSESM4_TSMETA has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: The file WORK._EM_TSCM: (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_TSMETA.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK._EMTSCM_CONTENTS has 6 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set EMWS5.TSESM4_VARIABLESET.
      WHERE (UPCASE(STRIP(level))='INTERVAL') and (((UPCASE(STRIP(role))='INPUT') and UPCASE(STRIP(use)) in ('D', 'Y')) or ((UPCASE(STRIP(role))='REJECTED') and (UPCASE(STRIP(use))='Y')) or ((UPCASE(STRIP(role))='TARGET') and UPCASE(STRIP(use)) in ('D', 
      'Y')));
NOTE: The data set EMWS5.TSESM4_TSIDMAP has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSDP4_TRAIN.
NOTE: The data set EMWS5.TSESM4_TRAIN has 100 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Variable _varname_ is uninitialized.
NOTE: There were 5 observations read from the data set EMWS5.TSESM4_TSIDMAP.
NOTE: The data set EMWS5.TSESM4_TSIDMAP has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._EMTSCM_CONTENTS (memtype=DATA).
NOTE: Deleting WORK._EMTSCM_INDS (memtype=DATA).
NOTE: Deleting WORK._EMTSCM_LABEL (memtype=DATA).
NOTE: Deleting WORK._EMTSCM_META (memtype=DATA).
NOTE: Deleting WORK._EMTSCM_META2 (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT1 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST1 has 1 observations and 8 variables.
NOTE: The data set WORK._OUTFOR1 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT1 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM1 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT2 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST2 has 1 observations and 8 variables.
NOTE: The data set WORK._OUTFOR2 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT2 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM2 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT3 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST3 has 2 observations and 8 variables.
NOTE: The data set WORK._OUTFOR3 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT3 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM3 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT4 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST4 has 3 observations and 8 variables.
NOTE: The data set WORK._OUTFOR4 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT4 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM4 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT5 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST5 has 3 observations and 8 variables.
NOTE: The data set WORK._OUTFOR5 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT5 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM5 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT6 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST6 has 2 observations and 8 variables.
NOTE: The data set WORK._OUTFOR6 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT6 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM6 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT7 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST7 has 2 observations and 8 variables.
NOTE: The data set WORK._OUTFOR7 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT7 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM7 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_TRAIN.
NOTE: The data set WORK._TMPDATA has 100 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Number of series processed: 5
NOTE: Number of forecasts requested: 1
NOTE: Number of forecasts failed: 0
NOTE: There were 100 observations read from the data set WORK._TMPDATA.
NOTE: The data set WORK._OUT8 has 106 observations and 6 variables.
NOTE: The data set WORK._OUTEST8 has 3 observations and 8 variables.
NOTE: The data set WORK._OUTFOR8 has 106 observations and 8 variables.
NOTE: The data set WORK._OUTSTAT8 has 1 observations and 57 variables.
NOTE: The data set WORK._OUTSUM8 has 5 observations and 19 variables.
NOTE: PROCEDURE ESM used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Table WORK.TSSTAT created, with 8 rows and 58 columns.

NOTE: Table WORK.TSEST created, with 17 rows and 9 columns.

NOTE: Table WORK.TSFOR created, with 848 rows and 9 columns.

NOTE: Table WORK.TSOUT created, with 848 rows and 7 columns.

NOTE: Table WORK.TSSUM created, with 40 rows and 20 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 8 observations read from the data set WORK.TSSTAT.
NOTE: The data set WORK.BESTMDL has 8 observations and 58 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.BESTMDL.
NOTE: The data set WORK.BESTMDL has 1 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Table WORK.BESTID created, with 1 rows and 4 columns.

NOTE: Table EMWS5.TSESM4_OUTFORCST created, with 106 rows and 11 columns.

NOTE: Table EMWS5.TSESM4_OUTSTAT created, with 1 rows and 59 columns.

NOTE: Table EMWS5.TSESM4_OUTEST created, with 2 rows and 10 columns.

NOTE: Table EMWS5.TSESM4_OUTSUM created, with 1 rows and 22 columns.

NOTE: PROC SQL statements are executed immediately; The RUN statement has no effect.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set WORK.BESTMDL.
NOTE: The data set WORK._TMPDS1 has 0 observations and 58 variables.
NOTE: The data set WORK._TMPDS2 has 0 observations and 58 variables.
NOTE: The data set WORK._TMPDS3 has 0 observations and 58 variables.
NOTE: The data set WORK._TMPDS4 has 0 observations and 58 variables.
NOTE: The data set WORK._TMPDS5 has 0 observations and 58 variables.
NOTE: The data set WORK._TMPDS6 has 1 observations and 58 variables.
NOTE: The data set WORK._TMPDS7 has 0 observations and 58 variables.
NOTE: The data set WORK._TMPDS8 has 0 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set WORK._OUT1.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT1.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT2.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT3.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT4.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT5.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT6.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT7.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: There were 106 observations read from the data set WORK._OUT8.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable mdlID in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _MODEL_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable MSE in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTDATA.
NOTE: The data set EMWS5.TSESM4_OUTDATA has 106 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS5.TSESM4_OUTEST.
NOTE: The data set EMWS5.TSESM4_OUTEST has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTFORCST.
NOTE: The data set EMWS5.TSESM4_OUTFORCST has 106 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_OUTSTAT.
NOTE: The data set EMWS5.TSESM4_OUTSTAT has 1 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_OUTSUM.
NOTE: The data set EMWS5.TSESM4_OUTSUM has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_TSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK._EMTS_TMPP1 has 1 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK._EMTS_TMPP1.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_TSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK._EMTS_TMPP1 has 1 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK._EMTS_TMPP1.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TSESM4_TSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK._EMTS_TMPP1 has 1 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK._EMTS_TMPP1.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTFORCST.
NOTE: The data set EMWS5.TSESM4_OUTFORCST has 106 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


WARNING: The variable _TSID_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _SEGMENT_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _NAMEID_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTFORCST.
NOTE: The data set EMWS5.TSESM4_OUTLIER has 100 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 100 observations read from the data set EMWS5.TSESM4_OUTLIER.
NOTE: The data set EMWS5.TSESM4_OUTLIERDS has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable _TSID_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 106 observations read from the data set EMWS5.TSESM4_OUTFORCST.
NOTE: The data set EMWS5.TSESM4_OUTPRED has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

18029  
18030  
18031  *------------------------------------------------------------*;
18032  * End TRAIN: TSESM4;
18033  *------------------------------------------------------------*;

18034  *------------------------------------------------------------*;
18035  * Close any missing semi colons;
18036  *------------------------------------------------------------*;
18037  ;
18038  ;
18039  ;
18040  ;
18041  quit;
18042  *------------------------------------------------------------*;
18043  * Close any unbalanced quotes;
18044  *------------------------------------------------------------*;
18045  /*; *"; *'; */
18046  ;
18047  run;
18048  quit;
18049  /* Reset EM Options */
18050  options formchar="|----|+|---+=|-/\<>*";
18051  options nocenter ls=256 ps=10000;
18052  goptions reset=all device=GIF NODISPLAY;

