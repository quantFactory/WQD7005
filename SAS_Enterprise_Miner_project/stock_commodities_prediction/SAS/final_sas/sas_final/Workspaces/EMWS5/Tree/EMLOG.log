*------------------------------------------------------------*
User:                ali
Date:                December 19, 2019
Time:                16:53:05
Site:                12601940
Platform:            W32_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 19, 2019
Time:                16:52:59
*------------------------------------------------------------*
14718  proc freq data=EMWS5.Tree_VariableSet noprint;
14719  table ROLE*LEVEL/out=WORK.TreeMETA;
14720  run;
 
NOTE: There were 33 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14721  proc print data=WORK.TreeMETA label noobs;
14722  var ROLE LEVEL COUNT;
14723  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14724  title9 ' ';
14725  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14726  run;
 
NOTE: There were 3 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14727  title10;
 
14728  %let EMNORLEN = %DMNORLEN;
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
>>>>>>>>>>>>>> TARGET(   NAME='Attrition'
                         ROLE='TARGET'
                         LEVEL='BINARY'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         REPORT='N'
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST1.0'
                         INFORMAT='BEST1.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                         USE='Y'
                      )[11985]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
14813  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14814  length ORDER $20;
14815  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14816     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14817  set EMWS5.TREE_ATTRITION_DM( where=(_TYPE_="TARGET"));
14818  NumLevels=2;
14819  select(upcase(ORDER));
14820  when('DESC') ORDER = 'Descending';
14821  when('ASC') ORDER = 'Ascending';
14822  when('FMTDESC') ORDER = 'Formatted Descending';
14823  when('FMTASC') ORDER = 'Formatted Ascending';
14824  otherwise ORDER = 'Descending';
14825  end;
14826  output;
14827  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14828  title9 ' ';
14829  proc print data=WORK.Tree_EVENT noobs label;
14830  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14831  title9 ' ';
14832  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14833  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14834  title10;
 
"No decisions defined for target "Attrition"."
14835  proc print data = EMWS5.Tree_Attrition_DM noobs label;
14836  var _type_ variable label;
14837  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14838  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14839  title9 ' ';
14840  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14841  run;
 
NOTE: There were 7 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14842  title10;
 
14843  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15384  *------------------------------------------------------------*;
15385  * Tree: Generation of macros and macro variables;
15386  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15387  *------------------------------------------------------------*;
 
15388  %let EMEXCEPTIONSTRING=;
15389  *------------------------------------------------------------*;
15390  * TRAIN: Tree;
15391  *------------------------------------------------------------*;
15392  %let EM_ACTION = TRAIN;
15393  %let syscc = 0;
15394  %macro main;
15395
15396    %if %upcase(&EM_ACTION) = CREATE %then %do;
15397      filename temp catalog 'sashelp.emmodl.tree_create.source';
15398      %include temp;
15399      filename temp;
15400
15401      %em_tree_create;
15402    %end;
15403
15404     %else
15405     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15406
15407         filename temp catalog 'sashelp.emmodl.tree_train.source';
15408         %include temp;
15409         filename temp;
15410         %em_tree_train;
15411     %end;
15412
15413    %else
15414    %if %upcase(&EM_ACTION) = SCORE %then %do;
15415      filename temp catalog 'sashelp.emmodl.tree_score.source';
15416      %include temp;
15417      filename temp;
15418
15419      %em_tree_score;
15420
15421    %end;
15422
15423    %else
15424    %if %upcase(&EM_ACTION) = REPORT %then %do;
15425
15426         filename temp catalog 'sashelp.emmodl.tree_report.source';
15427         %include temp;
15428         filename temp;
15429
15430         %em_tree_report;
15431     %end;
15432
15433    %else
15434    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15435
15436         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15437         %include temp;
15438         filename temp;
15439         %EM_TREE_OPENTREEVIEWER;
15440
15441     %end;
15442
15443    %else
15444    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15445
15446         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15447         %include temp;
15448         filename temp;
15449         %EM_TREE_CLOSETREEVIEWER;
15450
15451     %end;
15452
15453
15454     %doendm:
15455  %mend main;
15456
15457  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15459 +%macro em_tree_train;
15461 +   %if &EM_IMPORT_DATA eq %then %do;
15462 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15463 +       %put &em_codebar;
15464 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15465 +       %put &errormsg;
15466 +       %put &em_codebar;
15467 +       %goto doendm;
15468 +   %end;
15469 +   %else
15470 +       %let EMEXCEPTIONSTRING =;
15472 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15473 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15474 +        %put &em_codebar;
15475 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15476 +        %put &errormsg;
15477 +        %put &em_codebar;
15478 +        %goto doendm;
15479 +   %end;
15481 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15482 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15483 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15484 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15485 +        %put &em_codebar;
15486 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15487 +        %put &errormsg;
15488 +        %put &em_codebar;
15489 +        %goto doendm;
15490 +   %end;
15492 +   /* Initialize property macro variables */
15493 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15494 +   %include temp;
15495 +   filename temp;
15497 +   %EM_SetProperties;
15499 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15500 +   %EM_GETNAME(key=EMTREE, type=DATA);
15501 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15502 +     /* if import eq Y and no importtable defined, throw an exception */
15503 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15504 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15505 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15506 +         %put &em_codebar;
15507 +         %put &errmsg;
15508 +         %put &em_codebar;
15509 +         %goto doendm;
15510 +      %end;
15511 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15512 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15513 +         %put &em_codebar;
15514 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15515 +         %put &errormsg;
15516 +         %put &em_codebar;
15517 +         %goto doendm;
15518 +      %end;
15519 +      %else %do;
15520 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15521 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15522 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15523 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15524 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15525 +         %let dsid = %sysfunc(close(&dsid));
15526 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15527 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15528 +            %put &em_codebar;
15529 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15530 +            %put &errormsg;
15531 +            %put &em_codebar;
15532 +            %goto doendm;
15533 +         %end;
15534 +      %end;
15535 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15536 +         proc delete data=&EM_USER_EMTREE;
15537 +         run;
15538 +      %end;
15539 +   %end;
15540 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15541 +      proc delete data=&EM_USER_EMTREE;
15542 +      run;
15543 +   %end;
15545 +   /* load tree macros */
15546 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15547 +   %include temp;
15548 +   filename temp;
15550 +   /* data sets */
15551 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15552 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15553 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15555 +   /* files */
15556 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15558 +   /* check actual num of target levels */
15559 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15560 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15561 +                              nLevel=_nTargetLevel );
15562 +      %if &_nTargetLevel  > 2 %then %do;
15563 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15564 +        %put &em_codebar;
15565 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15566 +        %put &errormsg;
15567 +        %put &em_codebar;
15568 +        %goto doendm;
15569 +      %end;
15570 +   %end;
15572 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15573 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15574 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15575 +        %let costflag=0;
15576 +        data _null_;
15577 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15578 +          if eof then call symput("costflag", _N_);
15579 +        run;
15580 +        %if &costflag gt 0 %then %do;
15581 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15582 +          %put &em_codebar;
15583 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15584 +          %put &errormsg;
15585 +          %put &em_codebar;
15586 +          %goto doendm;
15587 +       %end;
15588 +     %end;
15589 +   %end;
15591 +   /* determine if multiple targets will be processed */
15592 +   %let em_tree_multipleTargets=N;
15593 +   %let em_tree_numTarget = 1;
15594 +   %let em_tree_targetVars=;
15596 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15597 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15598 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15599 +         %let em_tree_multipleTargets=N;
15600 +      %end;
15601 +      %else %do;
15602 +         /* create macro array of targets  */
15603 +         data _null_;
15604 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15605 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15606 +           if eof then
15607 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15608 +        run;
15610 +        %if &em_tree_numTarget gt 1 %then %do;
15611 +           %let em_tree_multipleTargets=Y;
15612 +        %end;
15613 +      %end;
15614 +   %end;
15616 +   /* create view of only necessary variable for performance reasons */
15617 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15618 +   data &tempData / view=&tempData;
15619 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15620 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15621 +       %EM_TARGET
15622 +     %end;
15623 +     %else %do;
15624 +       %if &em_tree_numTarget ne 0 %then %do;
15625 +         %do i=1 %to &em_tree_numTarget;
15626 +            &&em_tree_targetVars&i
15627 +         %end;
15628 +       %end;
15629 +     %end;
15630 +     );
15631 +   run;
15633 +   /* run Tree procedure */
15634 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15636 +   /* Check return code and throw exception if error is detected */
15637 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15638 +   %if &syserr %then %do;
15639 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15640 +     %goto doendm;
15641 +   %end;
15643 +   /* add decision score code if multiple targets are processed */
15644 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15645 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15646 +   %end;
15648 +   /* create outfit dataset if multiple score statements have been executed */
15649 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15651 +   /* create English Rules */
15652 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15653 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15654 +       %em_tree_makeEnglishRules;
15656 +       /* English Rules */
15657 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15659 +     %end;
15660 +   filename x;
15662 +   %doendm:
15663 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15664 +%macro EM_SetProperties;
15666 +   /* train properties */
15667 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15690 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15691 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15692 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15693 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15694 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15695 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15696 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15697 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15698 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15699 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15700 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15701 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15702 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15703 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15704 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15705 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15706 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15707 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15709 +   /* properties for interactive sample */
15710 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15711 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15712 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15713 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15715 +   /* report properties */
15716 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15717 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15718 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15719 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15720 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15721 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15722 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15723 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15724 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15725 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15726 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15727 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15728 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15730 +   /* score properties */
15731 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15732 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15734 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS5.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15736 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15737 +  %global &nLevel;
15738 +  proc dmdb batch data=&indata
15739 +    classout=_tmp_dmdbout;
15740 +    class &target;
15741 +  run;
15742 +  data _tmp_dmdbout;
15743 +    set _tmp_dmdbout;
15744 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15745 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15746 +  run;
15747 +  data _null_;
15748 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15749 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15750 +    %let dsid = %sysfunc(close(&dsid));
15751 +     call symput("&nLevel", put(&_obs, Best12.));
15752 +  run;
15754 +  proc datasets lib=work nolist;
15755 +     delete _tmp_dmdbout;
15756 +  run;
15757 +  quit;
15758 +%Mend EM_CheckBinaryTargetLevel;
15761 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15763 +  /* determine the number of obs in training data */
15764 +  proc sql;
15765 +    reset noprint;
15766 +    select count(*) into :em_nobs from &indata;
15767 +  quit;
15769 +  /* determine the number of input variables */
15770 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15771 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15773 +  /* retrieve targetEvent from decmeta */
15774 +  %let targetEvent=;
15775 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15776 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15777 +      data _null_;
15778 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15779 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15780 +      run;
15781 +    %end;
15782 +  %end;
15784 +  /* create targetTable if multipleTar eq Y */
15785 +  data temptarget;
15786 +    set &EM_DATA_VARIABLESET;
15787 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15788 +  run;
15790 + /* data sets */
15791 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15792 + %EM_GETNAME(key=EMTREE,        type=DATA);
15793 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15794 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15795 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15796 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15797 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15798 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15799 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15800 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15802 + /* files */
15803 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15804 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15806 + /* turn on pmml if requested */
15807 + %let nnpmml=0;
15808 + %if %symexist(EM_PMML) %then %do;
15809 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15810 +       %let nnpmml=1;
15812 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15813 +%end;
15815 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15817 + %if &nnpmml or &numClassTarget %then %do;
15819 +       /* create dmdb needed for pmml generation */
15820 +       %let tree_maxlevel = 512;
15821 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15822 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15823 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15824 +         %end;
15825 +       %end;
15826 +       %if &tree_maxlevel gt 0 %then %do;
15827 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15828 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15829 +       %end;
15831 +       %let targetOrderString =;
15832 +       %let targetString = ;
15833 +       data _null_;
15834 +          length orderString nameString $10000;
15835 +          retain orderString nameString;
15836 +          set &em_data_variableset end=eof;
15837 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15838 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15839 +          %end;
15840 +          %else %do;
15841 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15842 +          %end;          select(order);
15843 +            when('')        order ='DESC';
15844 +            when('FMTASC')  order='ASCFMT';
15845 +            when('FMTDESC') order='DESFMT';
15846 +            otherwise;
15847 +          end;
15848 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15849 +          nameString = trim(nameString)!!' '!!trim(NAME);
15851 +          if eof then do;
15852 +             call symput('targetOrderString', trim(orderString));
15853 +             call symput('targetString', trim(nameString));
15854 +          end;
15855 +       run;
15857 +       %let arborkluge= "work._treeDMDB";
15859 +       proc dmdb batch data=&indata
15860 +       %if &nnpmml %then %do;
15861 +           PMML
15862 +       %end;
15863 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15866 +   %if &nnpmml %then %do;
15867 +        %if "%EM_ID" ne "" %then %do;
15868 +          id %EM_ID;
15869 +        %end;
15870 +        %if &EM_NUM_CLASS gt 0 %then %do;
15871 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15872 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15873 +               &targetOrderString;
15874 +        %end;
15875 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15876 +          var %EM_INTERVAL;
15877 +        %end;
15878 +        target &targetString %EM_INTERVAL_TARGET;
15879 +        %if "%EM_FREQ" ne "" %then %do;
15880 +          freq %EM_FREQ;
15881 +        %end;
15882 +  %end;
15883 +  %else %do;
15884 +      class  &targetOrderString;
15885 +      target &targetString %EM_INTERVAL_TARGET;
15886 +  %end;
15887 +       run;
15888 +       quit;
15890 +       proc datasets lib=work nolist;
15891 +          delete classout varout;
15892 +       run;
15893 +       quit;
15895 +    %end;
15896 + %end;
15898 + /* run Arbor procedure */
15899 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15900 +  proc arbor data=&INDATA
15902 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15903 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15904 +  %end;
15906 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15907 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15908 +  %end;
15910 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15911 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15912 +  %end;
15914 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15915 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15916 +  %end;
15918 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15919 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15920 +  %end;
15922 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15923 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15924 +  %end;
15925 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15926 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15927 +  %end;
15928 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15929 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15930 +  %end;
15932 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15933 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15934 +      alpha = &EM_PROPERTY_SIGLEVEL
15935 +    %end;
15936 +  %end;
15938 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15939 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15940 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15941 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15942 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15944 +        padjust =
15945 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15946 +          &chaid
15947 +        %end;
15948 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15949 +          DEPTH
15950 +        %end;
15951 +      %end;
15952 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15953 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15954 +         pvars = &num_inputs
15955 +      %end;
15956 +    %end;
15957 +  %end;
15958 +  %else %do;
15959 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15960 +         padjust = NONE
15961 +      %end;
15962 +  %end;
15964 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15965 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15966 +    Maxrules = &num_nrules
15967 +  %end;
15969 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15970 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15971 +    Maxsurrs = &num_nsurrs
15972 +  %end;
15974 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15975 +     Missing=&EM_PROPERTY_MISSINGVALUE
15976 +  %end;
15978 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15979 +     USEVARONCE
15980 +  %end;
15982 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15983 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15984 +  %end;
15987 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15988 +    event = "&targetEvent"
15989 +  %end;
15991 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15992 +     DECSEARCH
15993 +  %end;
15995 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15996 +     PRIORSSEARCH
15997 +  %end;
15999 +  %if &arbor_1 ne %then %do;
16000 +    &arbor_1
16001 +  %end;
16003 +  %if &em_arbor ne %then %do;
16004 +     &em_arbor
16005 +  %end;
16006 +  ;
16007 + %end;
16008 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16009 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16010 +       interact;
16011 + %end;
16012 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16013 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16014 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16015 +    %put &em_codebar;
16016 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16017 +    %put &errormsg;
16018 +    %put &em_codebar;
16019 +    %goto doendm;
16020 +   %end;
16021 +   %else %do;
16022 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16023 +       interact;
16024 +   %end;
16025 + %end;
16027 + %else %do;
16028 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16029 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16030 +    %put &em_codebar;
16031 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16032 +    %put &errormsg;
16033 +    %put &em_codebar;
16034 +    %goto doendm;
16035 +   %end;
16036 +   %else %do;
16037 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16038 +        interact;
16039 +   %end;
16040 + %end;
16042 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16043 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16044 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16045 +    %end;
16047 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16048 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16049 +    %end;
16051 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16052 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16053 +    %end;
16055 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16056 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16057 +    %end;
16059 +    %if "%EM_FREQ" ne "" %then %do;
16060 +       freq %EM_FREQ;
16061 +    %end;
16063 +    %if "&multipleTar" eq "Y" %then %do;
16064 +       /* cycle through all target vars in variableset */
16065 +       %let tdsid = %sysfunc(open(temptarget));
16066 +       %if &tdsid %then %do;
16067 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16068 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16069 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16070 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16071 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16072 +             target &var / level = &lvl
16073 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16074 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16075 +             %end;
16076 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16077 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16078 +             %end;
16079 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16080 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16081 +             %end;
16082 +          %end;
16083 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16084 +       %end;
16085 +       useTarget variable = %EM_TARGET;
16086 +    %end;
16087 +    %else %do;
16088 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16089 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16090 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16091 +      %end;
16092 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16093 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16094 +      %end;
16095 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16096 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16097 +      %end;
16098 +    %end;
16100 +    %if "&multipleTar" eq "N" %then %do;
16101 +      &EM_DEC_STATEMENT;
16102 +    %end;
16104 +    Performance &EM_PROPERTY_PERFORMANCE
16105 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16106 +      nodesize=&EM_PROPERTY_NODESAMPLE
16107 +    %end;
16108 +    ;
16110 +    %if "&intFlag" eq "Y" %then %do;
16111 +       INTERACT Largest;
16112 +       Train maxnewdepth=0;
16113 +    %end;
16115 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16116 +         Assess
16117 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16118 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16119 +              %put &em_codebar;
16120 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16121 +              %put &errormsg;
16122 +              %put &em_codebar;
16123 +            %end;
16124 +            %else %do;
16125 +               Validata=&EM_IMPORT_VALIDATE
16126 +            %end;
16127 +         %end;
16128 +         %else %do;
16129 +           NoValidata
16130 +         %end;
16131 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16132 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16133 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16134 +               %if &dsid %then %do;
16135 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16136 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16137 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16138 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16139 +                   %else %do;
16140 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16141 +                      %else %let measure= MISC;
16142 +                   %end;
16143 +                 %end;
16144 +               %end;
16145 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16146 +            %end;
16147 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16148 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16149 +                 %let measure=ASE;
16150 +              %end;
16151 +              %else %do;
16152 +                 %let measure=MISC;
16153 +              %end;
16154 +            %end;
16155 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16156 +              %let measure=ASE;
16157 +            %end;
16158 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16159 +               %let measure = LIFT;
16160 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16161 +               %if &dsid %then %do;
16162 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16163 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16164 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16165 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16166 +                 %end;
16167 +               %end;
16168 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16169 +            %end;
16170 +            measure=&measure
16171 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16172 +               event = "&targetEvent"
16173 +            %end;
16174 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16175 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16176 +            %end;
16177 +         %end;
16178 +         %if "&multipleTar" eq "N" %then %do;
16179 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16180 +               CV
16181 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16182 +                 CVNITer = &EM_PROPERTY_CVNITER
16183 +               %end;
16184 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16185 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16186 +               %end;
16187 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16188 +                 CVSeed = &EM_PROPERTY_CVSEED
16189 +               %end;
16190 +            %end;
16191 +         %end;
16192 +       %end;
16193 +      ;
16195 +      %if "&intFlag" ne "Y" %then %do;
16196 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16197 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16198 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16199 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16201 +          SUBTREE &subtree
16202 +          %if "&subtree" eq "NLEAVES" %then %do;
16203 +            =&EM_PROPERTY_NSUBTREE
16204 +          %end;
16205 +          ;
16206 +        %end;
16208 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16209 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16210 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16211 +          %end;
16212 +       %end;
16213 +      %end;
16214 + %end;
16217 + MakeMacro nleaves = nleaves;
16218 + save
16219 + %if "&EM_USER_EMTREE" ne "" %then %do;
16220 +   MODEL=&EM_USER_EMTREE
16221 + %end;
16222 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16223 +   SEQUENCE=&EM_USER_OUTSEQ
16224 + %end;
16225 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16226 +   IMPORTANCE=&EM_USER_OUTIMPORT
16227 + %end;
16228 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16229 +   NODESTAT=&EM_USER_OUTNODES
16230 + %end;
16231 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16232 +   SUMMARY=&EM_USER_OUTSUMMARY
16233 + %end;
16234 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16235 +   STATSBYNODE=&EM_USER_OUTSTATS
16236 + %end;
16237 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16238 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16239 + %end;
16240 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16241 +   Pathlistnonmissing=&EM_USER_OUTPATH
16242 + %end;
16243 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16244 +   RULES = &EM_USER_OUTRULES
16245 + %end;
16246 + ;
16248 + %if "&intFlag" ne "Y" %then %do;
16250 +   %let lookupString = ;
16251 +   %if ^%symexist(EM_OPTION) %then
16252 +      %let EM_OPTION=;
16254 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16255 +      %let lookupString = LOOKUP=SELECT;
16256 +   %end;
16258 +   %let codetext=;
16259 +   %let norescodetxt=;
16261 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16262 +     %let codetext=&codetext DUMMY;
16263 +     %let norescodetxt=&norescodetxt DUMMY;
16264 +   %end;
16265 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16266 +     %let codetext=&codetext NOLEAFID;
16267 +     %let norescodetxt=&norescodetxt NOLEAFID;
16268 +   %end;
16269 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16270 +     %let norescodetxt=&norescodetxt NOPRED;
16271 +   %end;
16273 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16274 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16276 +   %if &nnpmml %then %do;
16277 +     code pmml;
16278 +   %end;
16280 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16281 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16282 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16283 +   %end;
16284 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16285 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16286 +   %end;
16287 + %end;
16289 + run;
16290 + quit;
16292 + /*%em_checkerror(); */
16293 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16294 +   /* Delete DMDB catalog */
16295 +   proc datasets lib=work nolist;
16296 +       delete _treeDMDB / mt=cat;
16297 +  run;
16298 +  %end;
16300 + %if &nnpmml %then %do;
16301 +    ods pmml close;
16302 + %end;
16304 +  %doendm:
16306 +%mend em_tree_runTreeProcedure;
16308 +%macro em_tree_createFitStats( multipleTar= );
16311 +  /* create targetTable is multipleTar eq Y */
16312 +  data temptarget;
16313 +    set &EM_DATA_VARIABLESET;
16314 +    where ROLE="TARGET";
16315 +  run;
16317 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16318 +   data &EM_USER_EMOUTFIT;
16319 +     length target $32;
16320 +     merge work.fit_train
16321 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16322 +       work.fit_valid
16323 +     %end;
16324 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16325 +       work.fit_test
16326 +     %end;
16327 +     ;
16328 +     %if "&multipleTar" eq "N" %then %do;
16329 +       target="%EM_TARGET";
16330 +     %end;
16331 +     %else %do;
16332 +       target = _TARGET_;
16333 +     %end;
16334 +     drop _NW_ _SUMW_
16335 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16336 +        _VSUMW_
16337 +     %end;
16338 +     ;
16339 +   run;
16341 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16342 +     proc datasets library=work nolist;
16343 +       delete fit_valid;
16344 +     run;
16345 +   %end;
16346 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16347 +     proc datasets library=work nolist;
16348 +       delete fit_test;
16349 +     run;
16350 +   %end;
16352 +%mend em_tree_createFitStats;
16355 +%macro em_tree_makeEnglishRules;
16357 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16358 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16360 +  /* verify that necessary tables exist and if not, skip processing */
16361 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16362 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16363 +    %goto doendm;
16364 +  %end;
16365 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16366 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16367 +    %goto doendm;
16368 +  %end;
16370 +  /* determine length of variable in outpath dataset */
16371 +  %let vlength= ;
16372 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16373 +  %if &dsid ne %then %do;
16374 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16375 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16376 +  %end;
16377 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16379 +  data tempoutpath;
16380 +    length varname $&vlength;
16381 +    retain varname;
16382 +    set &EM_USER_OUTPATH;
16384 +    if ^missing(variable) then varname=variable;
16385 +    else if ^missing(var_name) then varname=var_name;
16386 +    output;
16387 +  run;
16389 +  /* create an array of generated predicted variable names */
16390 +  %let tree_pred_vars = ;
16391 +  %let tree_pred_label = ;
16392 +  %let numpred= 0;
16393 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16395 +    data _null_;
16396 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16397 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16398 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16399 +     if eof then
16400 +       call symput('numpred', strip(put(_N_, BEST.)));
16401 +    run;
16402 +  %end;
16404 +  /* determine if NPRIORS exists in outnodes  */
16405 +  %local nprior_flag;
16406 +  data _null_;
16407 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16408 +    if eof then do;
16409 +      call symput('nprior_flag', strip(put(npriors, best.)));
16410 +    end;
16411 +  run;
16413 +  proc sort data=tempoutpath; by node; run;
16414 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16416 +  data tempoutpath;
16417 +    merge tempoutpath(in=_a) outnodes(keep= node
16418 +    %if "&nprior_flag" ne "." %then %do;
16419 +      NPRIORS
16420 +    %end;
16421 +    %else %do;
16422 +      N
16423 +    %end;
16424 +    %if &numpred gt 0 %then %do;
16425 +      %do i=1 %to &numpred;
16426 +        &&tree_pred_vars&i
16427 +      %end;
16428 +    %end;
16429 +    );
16430 +    by node;
16431 +    if _a;
16432 +  run;
16434 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16436 +  data _null_;
16437 +    file x;
16438 +    set tempoutpath;
16439 +    by node descending varname;
16440 +    retain origvar oldnode string;
16441 +    length origvar $32 oldnode 8 string $200;
16443 +    if _N_ = 1 then do;
16444 +      origvar = varname;
16445 +      oldnode = node;
16446 +    end;
16448 +    if first.node then do;
16449 +       put "&EM_CODEBAR";
16450 +       put " Node = " node;
16451 +       put "&EM_CODEBAR";
16452 +    end;
16454 +      if first.varname then do;
16455 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16456 +            if MISSING(CHARACTER_VALUE) then do;
16457 +             if NUMERIC_VALUE ne .  then do;
16458 +              if ^first.node then do;
16459 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16460 +              end;
16461 +              else do;
16462 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16463 +              end;
16464 +             end;
16465 +            end;
16466 +            else do;
16467 +              if ^first.node then do;
16468 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16469 +              end;
16470 +              else do;
16471 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16472 +              end;
16473 +             end;
16474 +         end;
16475 +         else if RELATION in ("=") then do;
16476 +            if ^first.node then do;
16477 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16478 +            end;
16479 +            else do;
16480 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16481 +            end;
16482 +         end;
16483 +         else if RELATION in ("ISMISSING") then do;
16484 +            if ^first.node then do;
16485 +              string = " AND "|| strip(varname) || " equals Missing";
16486 +            end;
16487 +            else do;
16488 +              string = "if "|| strip(varname) ||" equals Missing";
16489 +            end;
16490 +         end;
16491 +         else if RELATION in ("ISNOTMISSING") then do;
16492 +            if ^first.node then do;
16493 +              string = " AND "|| strip(varname) || " equals All Values";
16494 +            end;
16495 +            else do;
16496 +              string = "if "|| strip(varname) ||" equals All Values";
16497 +            end;
16498 +         end;
16499 +         if ^missing(varname) then origvar = varname;
16500 +         oldnode=node;
16502 +      end;
16503 +      else do;
16504 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16505 +          if MISSING(CHARACTER_VALUE) then do;
16506 +           if  NUMERIC_VALUE ne .  then do;
16507 +            if ^MISSING(string) then
16508 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16509 +            else
16510 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16511 +           end;
16512 +          end;
16513 +          else do;
16514 +            if ^MISSING(string) then
16515 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16516 +            else
16517 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16518 +          end;
16520 +         end;
16521 +         else if RELATION in ("=") then do;
16522 +           string = strip(string)||", "||strip(character_value);
16523 +         end;
16524 +         else if RELATION in ("ISMISSING") then do;
16526 +         end;
16527 +         if ^missing(varname) then origvar = varname;
16528 +         oldnode=node;
16529 +      end;
16530 +      if last.varname then do;
16531 +         if RELATION in ("ISMISSING") then do;
16532 +           if ^first.varname then do;
16533 +             string = strip(string) || " or MISSING";
16534 +           end;
16535 +         end;
16536 +         put string;
16537 +         if ^missing(varname) then origvar = varname;
16538 +         oldnode=node;
16539 +      end;
16541 +      if last.node then do;
16542 +         put "then ";
16543 +         put " Tree Node Identifier   = " node;
16545 +         %if "&nprior_flag" ne "." %then %do;
16546 +           put " Number of Observations = " NPRIORS;
16547 +         %end;
16548 +         %else %do;
16549 +           put " Number of Observations = " N;
16550 +         %end;
16552 +         %if &numpred gt 0 %then %do;
16553 +           %do i=1 %to &numpred;
16554 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16555 +           %end;
16556 +         %end;
16558 +         put " ";
16559 +         if ^missing(varname) then origvar = varname;
16560 +         oldnode=node;
16561 +      end;
16563 +  run;
16565 +  proc datasets lib=work nolist;
16566 +    delete tempoutpath outnodes;
16567 +  run;
16569 +  %doendm:
16570 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 791   Memory used = 511K.
NOTE: There were 791 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 791 observations read from the data set EMWS5.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 791   Memory used = 511K.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 791 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 791 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1600997 kilobytes of physical memory.
NOTE: Will use 791 out of 791 training cases.
NOTE: Using memory pool with 236964864 bytes.
NOTE: Passed training data 11 times.
NOTE: Training used 663808 bytes of work memory.
NOTE: The subtree sequence contains 12 subtrees. The largest has 23 nodes and 12 leaves.
NOTE: Using subtree with 5 nodes and 3 leaves.
NOTE: Using subtree with 5 nodes and 3 leaves.
NOTE: Created macro variable NLEAVES equal to 3.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 31 observations and 6 variables.
NOTE: The data set EMWS5.TREE_EMTREE has 854 observations and 4 variables.
NOTE: The data set EMWS5.TREE_OUTNODES has 5 observations and 24 variables.
NOTE: The data set EMWS5.TREE_OUTPATH has 12 observations and 7 variables.
NOTE: The data set EMWS5.TREE_OUTRULES has 67 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTSEQ has 12 observations and 20 variables.
NOTE: The data set EMWS5.TREE_OUTSTATS has 35 observations and 5 variables.
NOTE: The data set EMWS5.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTTOPOLOGY has 5 observations and 5 variables.
NOTE: External file F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\TREEFLOW.sas opened.
NOTE: External file F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 791 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
NOTE: There were 791 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 791 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.19 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 5 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 5 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=19Dec2019:16:53:00,
      Create Time=19Dec2019:16:53:00
 
NOTE: 32 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16572
16573  *------------------------------------------------------------*;
16574  * End TRAIN: Tree;
16575  *------------------------------------------------------------*;
 
16576  *------------------------------------------------------------*;
16577  * Close any missing semi colons;
16578  *------------------------------------------------------------*;
16579  ;
16580  ;
16581  ;
16582  ;
16583  quit;
16584  *------------------------------------------------------------*;
16585  * Close any unbalanced quotes;
16586  *------------------------------------------------------------*;
16587  /*; *"; *'; */
16588  ;
16589  run;
16590  quit;
16591  /* Reset EM Options */
16592  options formchar="|----|+|---+=|-/\<>*";
16593  options nocenter ls=256 ps=10000;
16594  goptions reset=all device=GIF NODISPLAY;
 
16595  proc sort data=WORK.EM_USER_REPORT;
16596  by ID VIEW;
16597  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 19, 2019
Time:                16:53:01
*------------------------------------------------------------*
16699  %let EMEXCEPTIONSTRING=;
16700  *------------------------------------------------------------*;
16701  * SCORE: Tree;
16702  *------------------------------------------------------------*;
16703  %let EM_ACTION = SCORE;
16704  %let syscc = 0;
16705  %macro main;
16706
16707    %if %upcase(&EM_ACTION) = CREATE %then %do;
16708      filename temp catalog 'sashelp.emmodl.tree_create.source';
16709      %include temp;
16710      filename temp;
16711
16712      %em_tree_create;
16713    %end;
16714
16715     %else
16716     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16717
16718         filename temp catalog 'sashelp.emmodl.tree_train.source';
16719         %include temp;
16720         filename temp;
16721         %em_tree_train;
16722     %end;
16723
16724    %else
16725    %if %upcase(&EM_ACTION) = SCORE %then %do;
16726      filename temp catalog 'sashelp.emmodl.tree_score.source';
16727      %include temp;
16728      filename temp;
16729
16730      %em_tree_score;
16731
16732    %end;
16733
16734    %else
16735    %if %upcase(&EM_ACTION) = REPORT %then %do;
16736
16737         filename temp catalog 'sashelp.emmodl.tree_report.source';
16738         %include temp;
16739         filename temp;
16740
16741         %em_tree_report;
16742     %end;
16743
16744    %else
16745    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16746
16747         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16748         %include temp;
16749         filename temp;
16750         %EM_TREE_OPENTREEVIEWER;
16751
16752     %end;
16753
16754    %else
16755    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16756
16757         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16758         %include temp;
16759         filename temp;
16760         %EM_TREE_CLOSETREEVIEWER;
16761
16762     %end;
16763
16764
16765     %doendm:
16766  %mend main;
16767
16768  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16770 +%macro em_tree_score;
16772 +   /* determine if multiple targets will be processed */
16773 +   %let em_tree_multipleTargets=N;
16774 +   %let em_tree_numTarget=1;
16775 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16776 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16777 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16778 +         %let em_tree_multipleTargets=N;
16779 +      %end;
16780 +      %else %do;
16781 +         /* create macro array of targets  */
16782 +         data _null_;
16783 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16784 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16785 +           if eof then
16786 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16787 +        run;
16789 +        %if &em_tree_numTarget gt 1 %then %do;
16790 +           %let em_tree_multipleTargets=Y;
16791 +        %end;
16792 +      %end;
16793 +   %end;
16795 +   /* build flow and publish scoring code */
16796 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16797 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16799 +   filename treeflow "&EM_USER_TREEFLOW";
16800 +   filename treepub "&EM_USER_TREEPUBLISH";
16802 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16803 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16805 +   %em_copyfile(infref=treeflow, outfref=flowref);
16806 +   %em_copyfile(infref=treepub, outfref=pubref);
16808 +   filename treeflow;
16809 +   filename treepub;
16811 +   /* if priors are used, add code to generate unadjusted residuals in export */
16812 +   %let useAdjPriors = N;
16813 +   data _null_;
16814 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16815 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16816 +   run;
16817 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16818 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16819 +      %include temp;
16820 +      filename temp;
16822 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16823 +      filename adjref "&EM_USER_adjResidualCode";
16824 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16826 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16828 +      filename adjref;
16829 +   %end;
16831 +   /* LEAF */
16832 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16833 +      data _null_;
16834 +        file flowref mod;
16835 +        put 'drop _LEAF_;';
16836 +      run;
16838 +      data _null_;
16839 +        file pubref mod;
16840 +        put 'drop _LEAF_;';
16841 +      run;
16843 +   %end;
16845 +   filename flowref;
16846 +   filename pubref;
16848 +   /* em_metachange code */
16849 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16850 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16851 +   %end;
16853 +   /* variable selection based on importance stat    */
16854 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16855 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16856 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16857 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16858 +     %let obs = %sysfunc(fetch(&dsid));
16859 +     %do %while(&obs=0);
16860 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16861 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16862 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16863 +       %let obs = %sysfunc(fetch(&dsid));
16864 +     %end;
16865 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16866 +   %end;
16868 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16869 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16870 +    %let tree_pred_vars = ;
16871 +    %let tree_pred_lvl =;
16872 +    %let numpred= 0;
16874 +    data _null_;
16875 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16876 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16877 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16878 +     if eof then
16879 +       call symput('numpred', strip(put(_N_, BEST.)));
16880 +    run;
16881 +   %end;
16883 +   %if &numpred ne 0 %then %do;
16884 +    %do i=1 %to &numpred;
16885 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16886 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16887 +    %end;
16888 +   %end;
16890 +   /* determine if multiple targets will be processed */
16891 +   %let em_tree_multipleTargets=N;
16892 +   %let em_tree_numTarget=1;
16893 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16894 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16895 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16896 +         %let em_tree_multipleTargets=N;
16897 +      %end;
16898 +      %else %do;
16899 +        data _null_;
16900 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16901 +          if eof then
16902 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16903 +        run;
16905 +        %if &em_tree_numTarget gt 1 %then %do;
16906 +           %let em_tree_multipleTargets=Y;
16907 +        %end;
16908 +     %end;
16909 +   %end;
16911 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16912 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16914 +      /* variable importance */
16915 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16916 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16918 +         %let validexist=0;
16919 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16920 +           %let validexist=1;
16921 +         %end;
16923 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16924 +         /* and the columns may not be generated                                                                                 */
16925 +         %let em_tree_cvexists=;
16926 +         %let em_tree_surrexists=.;
16927 +         data _null_;
16928 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16929 +            if eof then do ;
16930 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16931 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16932 +            end;
16933 +         run;
16935 +         data &EM_USER_OUTIMPORT;
16936 +            set &EM_USER_OUTIMPORT;
16938 +            /* format columns based on Precison value specified */
16939 +            format importance 15.&EM_PROPERTY_PRECISION
16940 +                 %if &validexist %then %do;
16941 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16942 +                 %end;
16943 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16944 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16945 +                 %end;
16946 +            ;
16947 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16948 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16949 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16950 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16951 +                 %if "&em_tree_surrexists" ne "" %then %do;
16952 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16953 +                 %end;
16954 +                 %if &validexist %then %do;
16955 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16956 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16957 +                 %end;
16958 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16959 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16960 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16961 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16962 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16963 +                 %end;
16964 +            ;
16965 +         run;
16967 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16968 +      %end;
16969 +   %end;
16971 +   %doendm:
16972 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Dec2019:16:53:00,
      Create Time=19Dec2019:16:53:00
 
NOTE: 95 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Dec2019:16:53:00,
      Create Time=19Dec2019:16:53:00
 
NOTE: 73 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3402,
      Last Modified=19Dec2019:16:53:00,
      Create Time=19Dec2019:16:53:00
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2732,
      Last Modified=19Dec2019:16:53:00,
      Create Time=19Dec2019:16:53:00
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 31 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 31 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
16973
16974  *------------------------------------------------------------*;
16975  * End SCORE: Tree;
16976  *------------------------------------------------------------*;
 
16977  proc sort data=WORK.EM_METACHANGE;
16978  by key uname;
16979  run;
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16980  filename x "F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
16981  data _null_;
16982  file x;
16983  put 'if upcase(NAME) = "AGE" then do;';
16984  put 'ROLE = "REJECTED";';
16985  put 'end;';
16986  put 'else ';
16987  put 'if upcase(NAME) = "BUSINESSTRAVEL" then do;';
16988  put 'ROLE = "REJECTED";';
16989  put 'end;';
16990  put 'else ';
16991  put 'if upcase(NAME) = "DAILYRATE" then do;';
16992  put 'ROLE = "REJECTED";';
16993  put 'end;';
16994  put 'else ';
16995  put 'if upcase(NAME) = "DEPARTMENT" then do;';
16996  put 'ROLE = "REJECTED";';
16997  put 'end;';
16998  put 'else ';
16999  put 'if upcase(NAME) = "DISTANCEFROMHOME" then do;';
17000  put 'ROLE = "REJECTED";';
17001  put 'end;';
17002  put 'else ';
17003  put 'if upcase(NAME) = "EDUCATION" then do;';
17004  put 'ROLE = "REJECTED";';
17005  put 'end;';
17006  put 'else ';
17007  put 'if upcase(NAME) = "EDUCATIONFILED" then do;';
17008  put 'ROLE = "REJECTED";';
17009  put 'end;';
17010  put 'else ';
17011  put 'if upcase(NAME) = "EMPLOYEENUMBER" then do;';
17012  put 'ROLE = "REJECTED";';
17013  put 'end;';
17014  put 'else ';
17015  put 'if upcase(NAME) = "ENVIRONMENTSATISFACTION" then do;';
17016  put 'ROLE = "REJECTED";';
17017  put 'end;';
17018  put 'else ';
17019  put 'if upcase(NAME) = "GENDER" then do;';
17020  put 'ROLE = "REJECTED";';
17021  put 'end;';
17022  put 'else ';
17023  put 'if upcase(NAME) = "HOURLYRATE" then do;';
17024  put 'ROLE = "REJECTED";';
17025  put 'end;';
17026  put 'else ';
17027  put 'if upcase(NAME) = "JOBINVOLVEMENT" then do;';
17028  put 'ROLE = "REJECTED";';
17029  put 'end;';
17030  put 'else ';
17031  put 'if upcase(NAME) = "JOBLEVEL" then do;';
17032  put 'ROLE = "REJECTED";';
17033  put 'end;';
17034  put 'else ';
17035  put 'if upcase(NAME) = "JOBROLE" then do;';
17036  put 'ROLE = "REJECTED";';
17037  put 'end;';
17038  put 'else ';
17039  put 'if upcase(NAME) = "JOBSATISFACTION" then do;';
17040  put 'ROLE = "REJECTED";';
17041  put 'end;';
17042  put 'else ';
17043  put 'if upcase(NAME) = "MARTIALSTATUS" then do;';
17044  put 'ROLE = "REJECTED";';
17045  put 'end;';
17046  put 'else ';
17047  put 'if upcase(NAME) = "MONTHLYINCOME" then do;';
17048  put 'ROLE = "REJECTED";';
17049  put 'end;';
17050  put 'else ';
17051  put 'if upcase(NAME) = "MONTHLYRATE" then do;';
17052  put 'ROLE = "REJECTED";';
17053  put 'end;';
17054  put 'else ';
17055  put 'if upcase(NAME) = "NUMCOMPANIESWORKED" then do;';
17056  put 'ROLE = "REJECTED";';
17057  put 'end;';
17058  put 'else ';
17059  put 'if upcase(NAME) = "PERCENTSALARYHIKE" then do;';
17060  put 'ROLE = "REJECTED";';
17061  put 'end;';
17062  put 'else ';
17063  put 'if upcase(NAME) = "PERFORMANCERATING" then do;';
17064  put 'ROLE = "REJECTED";';
17065  put 'end;';
17066  put 'else ';
17067  put 'if upcase(NAME) = "Q_ATTRITION0" then do;';
17068  put 'ROLE = "ASSESS";';
17069  put 'end;';
17070  put 'else ';
17071  put 'if upcase(NAME) = "Q_ATTRITION1" then do;';
17072  put 'ROLE = "ASSESS";';
17073  put 'end;';
17074  put 'else ';
17075  put 'if upcase(NAME) = "RELATIONSHIPSATISFACTION" then do;';
17076  put 'ROLE = "REJECTED";';
17077  put 'end;';
17078  put 'else ';
17079  put 'if upcase(NAME) = "STOCKOPTIONLEVEL" then do;';
17080  put 'ROLE = "REJECTED";';
17081  put 'end;';
17082  put 'else ';
17083  put 'if upcase(NAME) = "TRAININGTIMESLASTYEAR" then do;';
17084  put 'ROLE = "REJECTED";';
17085  put 'end;';
17086  put 'else ';
17087  put 'if upcase(NAME) = "WORKLIFEBALANCE" then do;';
17088  put 'ROLE = "REJECTED";';
17089  put 'end;';
17090  put 'else ';
17091  put 'if upcase(NAME) = "YEARSATCOMPANY" then do;';
17092  put 'ROLE = "REJECTED";';
17093  put 'end;';
17094  put 'else ';
17095  put 'if upcase(NAME) = "YEARSINCURRENTROLE" then do;';
17096  put 'ROLE = "REJECTED";';
17097  put 'end;';
17098  put 'else ';
17099  put 'if upcase(NAME) = "YEARSSINCELASTPROMOTION" then do;';
17100  put 'ROLE = "REJECTED";';
17101  put 'end;';
17102  put 'else ';
17103  put 'if upcase(NAME) = "YEARSWITHCURRMANAGER" then do;';
17104  put 'ROLE = "REJECTED";';
17105  put 'end;';
17106  put 'else ';
17107  put 'if upcase(NAME) = "_NODE_" then do;';
17108  put 'ROLE = "SEGMENT";';
17109  put 'LEVEL = "NOMINAL";';
17110  put 'end;';
17111  run;
 
NOTE: The file X is:
      Filename=F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Dec2019:16:53:01,
      Create Time=19Dec2019:16:13:43
 
NOTE: 128 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17112  filename x;
NOTE: Fileref X has been deassigned.
 
17113  filename emflow "F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17114  *------------------------------------------------------------*;
17115  * Tree: Scoring DATA data;
17116  *------------------------------------------------------------*;
17117  data EMWS5.Tree_TRAIN
17118  / view=EMWS5.Tree_TRAIN
17119  ;
17120  set EMWS5.Part_TRAIN
17121  ;
17122  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17123 +****************************************************************;
17124 +******             DECISION TREE SCORING CODE             ******;
17125 +****************************************************************;
17126 +
17127 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17128 +LENGTH F_Attrition  $    1;
17129 +LENGTH I_Attrition  $    1;
17130 +LENGTH _WARN_  $    4;
17131 +
17132 +******              LABELS FOR NEW VARIABLES              ******;
17133 +label _NODE_ = 'Node' ;
17134 +label _LEAF_ = 'Leaf' ;
17135 +label P_Attrition1 = 'Predicted: Attrition=1' ;
17136 +label P_Attrition0 = 'Predicted: Attrition=0' ;
17137 +label Q_Attrition1 = 'Unadjusted P: Attrition=1' ;
17138 +label Q_Attrition0 = 'Unadjusted P: Attrition=0' ;
17139 +label V_Attrition1 = 'Validated: Attrition=1' ;
17140 +label V_Attrition0 = 'Validated: Attrition=0' ;
17141 +label R_Attrition1 = 'Residual: Attrition=1' ;
17142 +label R_Attrition0 = 'Residual: Attrition=0' ;
17143 +label F_Attrition = 'From: Attrition' ;
17144 +label I_Attrition = 'Into: Attrition' ;
17145 +label U_Attrition = 'Unnormalized Into: Attrition' ;
17146 +label _WARN_ = 'Warnings' ;
17147 +
17148 +
17149 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17150 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17151 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17152 +
17153 +
17154 +_ARBFMT_1 = PUT( Attrition , BEST1.);
17155 + %DMNORMCP( _ARBFMT_1, F_Attrition );
17156 +
17157 +******             ASSIGN OBSERVATION TO NODE             ******;
17158 +IF  NOT MISSING(TotalWorkingYears ) AND
17159 +  TotalWorkingYears  <                  1.5 THEN DO;
17160 +  IF  NOT MISSING(OverTime ) AND
17161 +    OverTime  <                  0.5 THEN DO;
17162 +    _NODE_  =                    4;
17163 +    _LEAF_  =                    1;
17164 +    P_Attrition1  =     0.84615384615384;
17165 +    P_Attrition0  =     0.15384615384615;
17166 +    Q_Attrition1  =     0.84615384615384;
17167 +    Q_Attrition0  =     0.15384615384615;
17168 +    V_Attrition1  =     0.66666666666666;
17169 +    V_Attrition0  =     0.33333333333333;
17170 +    I_Attrition  = '1' ;
17171 +    U_Attrition  =                    1;
17172 +    END;
17173 +  ELSE DO;
17174 +    _NODE_  =                    5;
17175 +    _LEAF_  =                    2;
17176 +    P_Attrition1  =     0.46666666666666;
17177 +    P_Attrition0  =     0.53333333333333;
17178 +    Q_Attrition1  =     0.46666666666666;
17179 +    Q_Attrition0  =     0.53333333333333;
17180 +    V_Attrition1  =                  0.2;
17181 +    V_Attrition0  =                  0.8;
17182 +    I_Attrition  = '0' ;
17183 +    U_Attrition  =                    0;
17184 +    END;
17185 +  END;
17186 +ELSE DO;
17187 +  _NODE_  =                    3;
17188 +  _LEAF_  =                    3;
17189 +  P_Attrition1  =     0.13770053475935;
17190 +  P_Attrition0  =     0.86229946524064;
17191 +  Q_Attrition1  =     0.13770053475935;
17192 +  Q_Attrition0  =     0.86229946524064;
17193 +  V_Attrition1  =     0.14779874213836;
17194 +  V_Attrition0  =     0.85220125786163;
17195 +  I_Attrition  = '0' ;
17196 +  U_Attrition  =                    0;
17197 +  END;
17198 +
17199 +*****  RESIDUALS R_ *************;
17200 +IF  F_Attrition  NE '1'
17201 +AND F_Attrition  NE '0'  THEN DO;
17202 +        R_Attrition1  = .;
17203 +        R_Attrition0  = .;
17204 + END;
17205 + ELSE DO;
17206 +       R_Attrition1  =  -P_Attrition1 ;
17207 +       R_Attrition0  =  -P_Attrition0 ;
17208 +       SELECT( F_Attrition  );
17209 +          WHEN( '1'  ) R_Attrition1  = R_Attrition1  +1;
17210 +          WHEN( '0'  ) R_Attrition0  = R_Attrition0  +1;
17211 +       END;
17212 + END;
17213 +
17214 +****************************************************************;
17215 +******          END OF DECISION TREE SCORING CODE         ******;
17216 +****************************************************************;
17217 +
17218 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17219  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17220  quit;
17221  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17222  filename emflow "F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17223  *------------------------------------------------------------*;
17224  * Tree: Scoring VALIDATE data;
17225  *------------------------------------------------------------*;
17226  data EMWS5.Tree_VALIDATE
17227  / view=EMWS5.Tree_VALIDATE
17228  ;
17229  set EMWS5.Part_VALIDATE
17230  ;
17231  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17232 +****************************************************************;
17233 +******             DECISION TREE SCORING CODE             ******;
17234 +****************************************************************;
17235 +
17236 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17237 +LENGTH F_Attrition  $    1;
17238 +LENGTH I_Attrition  $    1;
17239 +LENGTH _WARN_  $    4;
17240 +
17241 +******              LABELS FOR NEW VARIABLES              ******;
17242 +label _NODE_ = 'Node' ;
17243 +label _LEAF_ = 'Leaf' ;
17244 +label P_Attrition1 = 'Predicted: Attrition=1' ;
17245 +label P_Attrition0 = 'Predicted: Attrition=0' ;
17246 +label Q_Attrition1 = 'Unadjusted P: Attrition=1' ;
17247 +label Q_Attrition0 = 'Unadjusted P: Attrition=0' ;
17248 +label V_Attrition1 = 'Validated: Attrition=1' ;
17249 +label V_Attrition0 = 'Validated: Attrition=0' ;
17250 +label R_Attrition1 = 'Residual: Attrition=1' ;
17251 +label R_Attrition0 = 'Residual: Attrition=0' ;
17252 +label F_Attrition = 'From: Attrition' ;
17253 +label I_Attrition = 'Into: Attrition' ;
17254 +label U_Attrition = 'Unnormalized Into: Attrition' ;
17255 +label _WARN_ = 'Warnings' ;
17256 +
17257 +
17258 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17259 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17260 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17261 +
17262 +
17263 +_ARBFMT_1 = PUT( Attrition , BEST1.);
17264 + %DMNORMCP( _ARBFMT_1, F_Attrition );
17265 +
17266 +******             ASSIGN OBSERVATION TO NODE             ******;
17267 +IF  NOT MISSING(TotalWorkingYears ) AND
17268 +  TotalWorkingYears  <                  1.5 THEN DO;
17269 +  IF  NOT MISSING(OverTime ) AND
17270 +    OverTime  <                  0.5 THEN DO;
17271 +    _NODE_  =                    4;
17272 +    _LEAF_  =                    1;
17273 +    P_Attrition1  =     0.84615384615384;
17274 +    P_Attrition0  =     0.15384615384615;
17275 +    Q_Attrition1  =     0.84615384615384;
17276 +    Q_Attrition0  =     0.15384615384615;
17277 +    V_Attrition1  =     0.66666666666666;
17278 +    V_Attrition0  =     0.33333333333333;
17279 +    I_Attrition  = '1' ;
17280 +    U_Attrition  =                    1;
17281 +    END;
17282 +  ELSE DO;
17283 +    _NODE_  =                    5;
17284 +    _LEAF_  =                    2;
17285 +    P_Attrition1  =     0.46666666666666;
17286 +    P_Attrition0  =     0.53333333333333;
17287 +    Q_Attrition1  =     0.46666666666666;
17288 +    Q_Attrition0  =     0.53333333333333;
17289 +    V_Attrition1  =                  0.2;
17290 +    V_Attrition0  =                  0.8;
17291 +    I_Attrition  = '0' ;
17292 +    U_Attrition  =                    0;
17293 +    END;
17294 +  END;
17295 +ELSE DO;
17296 +  _NODE_  =                    3;
17297 +  _LEAF_  =                    3;
17298 +  P_Attrition1  =     0.13770053475935;
17299 +  P_Attrition0  =     0.86229946524064;
17300 +  Q_Attrition1  =     0.13770053475935;
17301 +  Q_Attrition0  =     0.86229946524064;
17302 +  V_Attrition1  =     0.14779874213836;
17303 +  V_Attrition0  =     0.85220125786163;
17304 +  I_Attrition  = '0' ;
17305 +  U_Attrition  =                    0;
17306 +  END;
17307 +
17308 +*****  RESIDUALS R_ *************;
17309 +IF  F_Attrition  NE '1'
17310 +AND F_Attrition  NE '0'  THEN DO;
17311 +        R_Attrition1  = .;
17312 +        R_Attrition0  = .;
17313 + END;
17314 + ELSE DO;
17315 +       R_Attrition1  =  -P_Attrition1 ;
17316 +       R_Attrition0  =  -P_Attrition0 ;
17317 +       SELECT( F_Attrition  );
17318 +          WHEN( '1'  ) R_Attrition1  = R_Attrition1  +1;
17319 +          WHEN( '0'  ) R_Attrition0  = R_Attrition0  +1;
17320 +       END;
17321 + END;
17322 +
17323 +****************************************************************;
17324 +******          END OF DECISION TREE SCORING CODE         ******;
17325 +****************************************************************;
17326 +
17327 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17328  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17329  quit;
17330  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17331  filename emflow "F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17332  *------------------------------------------------------------*;
17333  * Tree: Scoring TEST data;
17334  *------------------------------------------------------------*;
17335  data EMWS5.Tree_TEST
17336  / view=EMWS5.Tree_TEST
17337  ;
17338  set EMWS5.Part_TEST
17339  ;
17340  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file F:\WQD7005\MalaysiaStockPrediction-master\SAS\Mildstone5\Milestone5-Insight\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17341 +****************************************************************;
17342 +******             DECISION TREE SCORING CODE             ******;
17343 +****************************************************************;
17344 +
17345 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17346 +LENGTH F_Attrition  $    1;
17347 +LENGTH I_Attrition  $    1;
17348 +LENGTH _WARN_  $    4;
17349 +
17350 +******              LABELS FOR NEW VARIABLES              ******;
17351 +label _NODE_ = 'Node' ;
17352 +label _LEAF_ = 'Leaf' ;
17353 +label P_Attrition1 = 'Predicted: Attrition=1' ;
17354 +label P_Attrition0 = 'Predicted: Attrition=0' ;
17355 +label Q_Attrition1 = 'Unadjusted P: Attrition=1' ;
17356 +label Q_Attrition0 = 'Unadjusted P: Attrition=0' ;
17357 +label V_Attrition1 = 'Validated: Attrition=1' ;
17358 +label V_Attrition0 = 'Validated: Attrition=0' ;
17359 +label R_Attrition1 = 'Residual: Attrition=1' ;
17360 +label R_Attrition0 = 'Residual: Attrition=0' ;
17361 +label F_Attrition = 'From: Attrition' ;
17362 +label I_Attrition = 'Into: Attrition' ;
17363 +label U_Attrition = 'Unnormalized Into: Attrition' ;
17364 +label _WARN_ = 'Warnings' ;
17365 +
17366 +
17367 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17368 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17369 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17370 +
17371 +
17372 +_ARBFMT_1 = PUT( Attrition , BEST1.);
17373 + %DMNORMCP( _ARBFMT_1, F_Attrition );
17374 +
17375 +******             ASSIGN OBSERVATION TO NODE             ******;
17376 +IF  NOT MISSING(TotalWorkingYears ) AND
17377 +  TotalWorkingYears  <                  1.5 THEN DO;
17378 +  IF  NOT MISSING(OverTime ) AND
17379 +    OverTime  <                  0.5 THEN DO;
17380 +    _NODE_  =                    4;
17381 +    _LEAF_  =                    1;
17382 +    P_Attrition1  =     0.84615384615384;
17383 +    P_Attrition0  =     0.15384615384615;
17384 +    Q_Attrition1  =     0.84615384615384;
17385 +    Q_Attrition0  =     0.15384615384615;
17386 +    V_Attrition1  =     0.66666666666666;
17387 +    V_Attrition0  =     0.33333333333333;
17388 +    I_Attrition  = '1' ;
17389 +    U_Attrition  =                    1;
17390 +    END;
17391 +  ELSE DO;
17392 +    _NODE_  =                    5;
17393 +    _LEAF_  =                    2;
17394 +    P_Attrition1  =     0.46666666666666;
17395 +    P_Attrition0  =     0.53333333333333;
17396 +    Q_Attrition1  =     0.46666666666666;
17397 +    Q_Attrition0  =     0.53333333333333;
17398 +    V_Attrition1  =                  0.2;
17399 +    V_Attrition0  =                  0.8;
17400 +    I_Attrition  = '0' ;
17401 +    U_Attrition  =                    0;
17402 +    END;
17403 +  END;
17404 +ELSE DO;
17405 +  _NODE_  =                    3;
17406 +  _LEAF_  =                    3;
17407 +  P_Attrition1  =     0.13770053475935;
17408 +  P_Attrition0  =     0.86229946524064;
17409 +  Q_Attrition1  =     0.13770053475935;
17410 +  Q_Attrition0  =     0.86229946524064;
17411 +  V_Attrition1  =     0.14779874213836;
17412 +  V_Attrition0  =     0.85220125786163;
17413 +  I_Attrition  = '0' ;
17414 +  U_Attrition  =                    0;
17415 +  END;
17416 +
17417 +*****  RESIDUALS R_ *************;
17418 +IF  F_Attrition  NE '1'
17419 +AND F_Attrition  NE '0'  THEN DO;
17420 +        R_Attrition1  = .;
17421 +        R_Attrition0  = .;
17422 + END;
17423 + ELSE DO;
17424 +       R_Attrition1  =  -P_Attrition1 ;
17425 +       R_Attrition0  =  -P_Attrition0 ;
17426 +       SELECT( F_Attrition  );
17427 +          WHEN( '1'  ) R_Attrition1  = R_Attrition1  +1;
17428 +          WHEN( '0'  ) R_Attrition0  = R_Attrition0  +1;
17429 +       END;
17430 + END;
17431 +
17432 +****************************************************************;
17433 +******          END OF DECISION TREE SCORING CODE         ******;
17434 +****************************************************************;
17435 +
17436 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17437  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17438  quit;
17439  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
17441  proc sort data=WORK.EM_USER_REPORT;
17442  by ID VIEW;
17443  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17444  *------------------------------------------------------------*;
17445  * Tree: Computing metadata for TRAIN data;
17446  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
17920  data WORK.MODELTEMP_INFO;
17921  set EMWS5.Tree_EMINFO;
17922  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17923  run;
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17924  data EMWS5.Tree_EMINFO;
17925  length TARGET KEY $32 DATA $43;
17926  input TARGET KEY DATA $;
17927  cards;
 
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17931  run;
17932  data EMWS5.Tree_EMINFO;
17933  set EMWS5.Tree_EMINFO WORK.MODELTEMP_INFO;
17934  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17935  proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
17936  by TARGET KEY;
17937  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17938  proc sort data = EMWS5.Ids7_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
17939  by TARGET KEY;
17940  run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS7_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17941  proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
17942  by TARGET KEY;
17943  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17944  data EMWS5.Tree_EMINFO;
17945  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
17946  by TARGET KEY;
17947  run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17948  proc datasets lib=work nolist;
17949  delete TEMP_INFO SORTEDEMINFO;
17950  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
17951  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS5.TREE_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 19, 2019
Time:                16:53:02
*------------------------------------------------------------*
17975  data EMWS5.Tree_EMOUTFIT;
17976  set EMWS5.Tree_EMOUTFIT;
17977  length TargetLabel $200;
17978  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17979  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17980  proc sort data=EMWS5.Tree_EMREPORTFIT nothreads;
17981  by TARGET;
17982  run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The data set EMWS5.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17983  %let _EMwarndup = 0;
17984  %let _EMtargetdup =;
17985  %let _EMASEtargetdup =;
17986  data _null_;
17987  set EMWS5.Tree_EMOUTFIT;
17988  if .<_ASE_<0.000001 then do;
17989  call symput('_EMwarndup', '1');
17990  call symput('_EMtargetdup', target);
17991  call symput('_EMASEtargetdup', put(_ASE_, best.));
17992  end;
17993  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17994  %let EMEXCEPTIONSTRING=;
17995  *------------------------------------------------------------*;
17996  * REPORT: Tree;
17997  *------------------------------------------------------------*;
17998  %let EM_ACTION = REPORT;
17999  %let syscc = 0;
18000  %macro main;
18001
18002    %if %upcase(&EM_ACTION) = CREATE %then %do;
18003      filename temp catalog 'sashelp.emmodl.tree_create.source';
18004      %include temp;
18005      filename temp;
18006
18007      %em_tree_create;
18008    %end;
18009
18010     %else
18011     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18012
18013         filename temp catalog 'sashelp.emmodl.tree_train.source';
18014         %include temp;
18015         filename temp;
18016         %em_tree_train;
18017     %end;
18018
18019    %else
18020    %if %upcase(&EM_ACTION) = SCORE %then %do;
18021      filename temp catalog 'sashelp.emmodl.tree_score.source';
18022      %include temp;
18023      filename temp;
18024
18025      %em_tree_score;
18026
18027    %end;
18028
18029    %else
18030    %if %upcase(&EM_ACTION) = REPORT %then %do;
18031
18032         filename temp catalog 'sashelp.emmodl.tree_report.source';
18033         %include temp;
18034         filename temp;
18035
18036         %em_tree_report;
18037     %end;
18038
18039    %else
18040    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18041
18042         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18043         %include temp;
18044         filename temp;
18045         %EM_TREE_OPENTREEVIEWER;
18046
18047     %end;
18048
18049    %else
18050    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18051
18052         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18053         %include temp;
18054         filename temp;
18055         %EM_TREE_CLOSETREEVIEWER;
18056
18057     %end;
18058
18059
18060     %doendm:
18061  %mend main;
18062
18063  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18065 +%macro em_tree_makePlotDs( multipleTar= );
18067 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18068 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18069 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18070 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18072 +  /* determine if validation statistics will be displayed */
18073 +  %let validflag=N;
18074 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18075 +    /* determine if validation data exists */
18076 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18077 +      %let validflag=Y;
18078 +    %end;
18079 +  %end;
18081 +   /* retrieve name of decmeta even in presence of multiple targets */
18082 +   %let decmeta = ;
18083 +   %if &EM_DEC_DECMETA eq %then %do;
18084 +     data _Target;
18085 +       set &em_data_variableset;
18086 +       where ROLE='TARGET' and USE in('D', 'Y');
18087 +       keep NAME;
18088 +     run;
18089 +     proc sort data=_Target;
18090 +       by NAME;
18091 +     run;
18092 +     proc sort data=EM_TARGETDECINFO;
18093 +       by TARGET;
18094 +     run;
18095 +     data _Target;
18096 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18097 +       by NAME;
18098 +       if _a then do;
18099 +         call symput('decmeta', trim(DECMETA));
18100 +       end;
18101 +     run;
18102 +     proc delete data=_Target;run;
18103 +   %end;
18104 +   %else %let decmeta = &EM_DEC_DECMETA;
18107 +  /* retrieve targetEvent from decmeta */
18108 +  %let targetEvent=;
18109 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18110 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18111 +      data _null_;
18112 +       set &DECMETA(where=(_TYPE_="TARGET"));
18113 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18114 +      run;
18115 +    %end;
18116 +  %end;
18118 +  /* retrieve predicted var for targetEvent from decmeta */
18119 +  %let predTarget=;
18120 +  %let predLvl=;
18121 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18122 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18123 +      data _null_;
18124 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18125 +       call symput('predTarget', strip(VARIABLE));
18126 +       call symput('predLvl', strip(LEVEL));
18127 +      run;
18128 +    %end;
18129 +  %end;
18130 +  %else %do;
18131 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18132 +      data _null_;
18133 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18134 +       call symput('predTarget', strip(VARIABLE));
18135 +      run;
18136 +    %end;
18137 +  %end;
18139 +  /* create BelowText value */
18140 +  data belowtext;
18141 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18142 +    keep node belowtext;
18143 +  run;
18145 +  /* relace belowtext with variable label if it exists */
18146 +  data belowtext2;
18147 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18148 +    keep node belowtextlbl;
18149 +  run;
18151 +  proc sort data=belowtext; by node; run;
18152 +  proc sort data=belowtext2; by node; run;
18154 +  data belowtext;
18155 +    merge belowtext belowtext2(in=_a);
18156 +    by node;
18157 +    if _a then belowtext=belowtextlbl;
18158 +    keep node belowtext;
18159 +  run;
18161 +  /* create AboveText value */
18162 +  data abovetext;
18163 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18164 +  run;
18165 +  proc sort data=abovetext; by node numeric_value; run;
18167 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18168 +  data abovetext;
18169 +    set abovetext(rename=(node=parent));
18170 +    by parent numeric_value;
18171 +    retain abovetext tempstring flag branch origval origchar ;
18172 +    length abovetext $256;
18173 +    length tempstring origchar $64;
18175 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18176 +      if first.parent then do;
18177 +        if missing(character_value) then do;
18178 +          numeric_value = round(numeric_value, &sp_precision);
18179 +          abovetext = "< "||strip(NUMERIC_VALUE);
18180 +          branch = 1;
18181 +          origval = numeric_value;
18182 +          output;
18183 +        end;
18184 +        else do;
18185 +          abovetext = "< "||strip(CHARACTER_VALUE);
18186 +          branch = 1;
18187 +          origchar = character_value;
18188 +          output;
18189 +        end;
18191 +        if first.parent AND last.parent then do;
18192 +          if missing(character_value) then do;
18193 +            numeric_value = round(numeric_value, &sp_precision);
18194 +            branch = branch + 1;
18195 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18196 +            output;
18197 +          end;
18198 +          else do;
18199 +            branch = branch + 1;
18200 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18201 +            output;
18202 +          end;
18203 +        end;
18204 +      end;
18205 +      else if last.parent then do;
18206 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18207 +          if missing(character_value) then do;
18208 +            numeric_value = round(numeric_value, &sp_precision);
18209 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18210 +          end;
18211 +          else do;
18212 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18213 +          end;
18214 +          branch = branch + 1;
18215 +          output;
18217 +          if missing(character_value) then do;
18218 +            numeric_value = round(numeric_value, &sp_precision);
18219 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18220 +          end;
18221 +          else do;
18222 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18223 +          end;
18224 +          branch = branch + 1;
18225 +          output;
18226 +        end;
18227 +        else do;
18228 +          if missing(character_value) then do;
18229 +            numeric_value = round(numeric_value, &sp_precision);
18230 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18231 +          end;
18232 +          else do;
18233 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18234 +          end;
18235 +          branch = branch + 1;
18236 +          output;
18237 +        end;
18238 +      end;
18239 +      else do;
18240 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18241 +          if missing(character_value) then do;
18242 +            numeric_value = round(numeric_value,&sp_precision);
18243 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18244 +            origval = numeric_value;
18245 +          end;
18246 +          else do;
18247 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18248 +            origchar = character_value;
18249 +          end;
18250 +          branch = branch + 1;
18251 +          output;
18253 +        end;
18254 +        else do;
18255 +          if missing(character_value) then do;
18256 +            numeric_value = round(numeric_value, &sp_precision);
18257 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18258 +            origval = numeric_value;
18259 +          end;
18260 +          else do;
18261 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18262 +            origval = character_value;
18263 +          end;
18264 +          branch = branch + 1;
18265 +          output;
18266 +        end;
18267 +      end;
18268 +    end;
18269 +    else do;
18270 +       if first.numeric_value then do;
18271 +         flag = 0;
18272 +         abovetext = strip(CHARACTER_VALUE);
18273 +         branch = numeric_value;
18274 +         if first.numeric_value AND last.numeric_value then do;
18275 +           output;
18276 +         end;
18277 +       end;
18278 +       else if last.numeric_value then do;
18279 +         if flag=0 then do;
18280 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18281 +           length = length(strip(tempstring));
18282 +           if length < 32 then do;
18283 +             abovetext = strip(tempstring);
18284 +           end;
18285 +           else do;
18286 +             abovetext = strip(abovetext)||", ...";
18287 +             flag = 1;
18288 +           end;
18289 +         end;
18290 +         branch = numeric_value;
18291 +         output;
18292 +       end;
18293 +       else do;
18294 +         if flag=0 then do;
18295 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18296 +           length = length(strip(tempstring));
18297 +           if length < 32 then do;
18298 +             abovetext = strip(tempstring);
18299 +           end;
18300 +           else do;
18301 +             abovetext = strip(abovetext)||", ...";
18302 +             flag=1;
18303 +           end;
18304 +         end;
18305 +         branch = numeric_value;
18306 +       end;
18307 +    end;
18308 +    keep parent branch abovetext;
18309 +  run;
18311 +  /* MIssing value to abovetext */
18312 +  data tempmissing;
18313 +    set &EM_USER_OUTRULES;
18314 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18315 +    rename node=parent numeric_value=branch character_value=misschar;
18316 +  run;
18319 +  proc sort data=abovetext; by parent branch; run;
18320 +  proc sort data=tempmissing; by parent branch; run;
18321 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18323 +  data tempoutnodes;
18324 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18325 +    by parent branch;
18326 +    length traintotal validtotal 8;
18327 +    retain traintotal validtotal;
18329 +    if _a then do;
18330 +      if ^MISSING(abovetext) then do;
18331 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18332 +      end;
18333 +      else do;
18334 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18335 +      end;
18336 +    end;
18337 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18339 +    if node=1 then do;
18340 +      traintotal = N;
18341 +      validtotal=VN;
18342 +    end;
18344 +    drop role rank stat misschar belowtext;
18345 +  run;
18346 +  proc sort data=tempoutnodes; by node; run;
18347 +  proc sort data=belowtext; by node; run;
18349 +  data tempoutnodes;
18350 +    merge tempoutnodes belowtext;
18351 +    by node;
18353 +  run;
18355 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18356 +  %let adjusted = N;
18357 +  %let npriors = 0;
18358 +  data _null_ ;
18359 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18360 +    if eof then do ;
18361 +      call symput("npriors" , strip(put(_N_,best.))) ;
18362 +    end;
18363 +  run;
18364 +  %if &npriors gt 0 %then %let adjusted=Y;
18367 +  /* create a table with targetUsed and targetLevel columns for each node */
18368 +  data temptarmeta;
18369 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18370 +    %if &multipleTar eq N %then %do;
18371 +      AND USE in ('D', 'Y')
18372 +    %end;
18373 +    ));
18374 +    length TARGET $32;
18375 +    Target=name;
18376 +    keep target level;
18377 +  run;
18379 +  %if &multipleTar eq Y %then %do;
18380 +    data temptargetused;
18381 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18382 +      keep node target;
18383 +    run;
18384 +    proc sort data=temptargetused; by target; run;
18385 +    proc sort data=temptarmeta; by target; run;
18386 +    data temptargetused;
18387 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18388 +      by target;
18389 +      if _a and _b;
18390 +    run;
18391 +  %end;
18392 +  %else %do;
18393 +    data temptargetused;
18394 +      set &EM_USER_OUTSTATS;
18395 +      length target $32 tarlevel $10;
18396 +      target="%EM_TARGET";
18397 +      tarlevel="%EM_TARGET_LEVEL";
18398 +      keep node target tarlevel;
18399 +    run;
18400 +    proc sort data=temptargetused nodupkey; by node; run;
18401 +  %end;
18403 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18404 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18405 +  proc sort data=temptargetused; by node; run;
18408 +  /* create tables for all interval targets as well as all class targets */
18409 +  data tempinterval tempclass;
18410 +    merge tempoutstats temptargetused( rename=(target=targetused));
18411 +    by node;
18412 +    %if "&multipleTar" eq "Y" %then %do;
18413 +      if ((missing(Target)) OR (target=targetused ));
18414 +    %end;
18416 +    if tarlevel="INTERVAL" then output tempinterval;
18417 +    else output tempclass;
18418 +  run;
18420 +  /* iniitalize intTarget and classTarget flags */
18421 +  %let em_intNobs =0;
18422 +  %let em_classNobs = 0;
18423 +  %let em_intTarget= N;
18424 +  %let em_classTarget= N;
18426 +  proc sql;
18427 +    reset noprint;
18428 +    select count(*) into :em_intNobs from tempinterval;
18429 +  quit;
18430 +  proc sql;
18431 +    reset noprint;
18432 +    select count(*) into :em_classNobs from tempclass;
18433 +  quit;
18435 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18436 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18438 +  /* retrieve all information for interval targets */
18439 +  %if &em_intTarget eq Y %then %do;
18441 +    /* determine if leaf variable exists */
18442 +    %let dsid=%sysfunc(open(tempinterval,i));
18443 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18444 +    %let rc=%sysfunc(close(&dsid));
18446 +    proc transpose data=tempinterval
18447 +      %if &leafexists %then %do;
18448 +        (drop=leaf)
18449 +      %end;
18450 +      %if &validexist %then %do;
18451 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18452 +      %end;
18453 +      %else %do;
18454 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18455 +      %end;
18456 +      by node;
18457 +      id statname;
18458 +    run;
18459 +    data tempinterval;
18460 +      set tempinterval;
18461 +      if missing(N) then delete;
18462 +    run;
18463 +  %end;
18465 +  /* retrieve all information for class targets */
18466 +  %if &em_classTarget eq Y %then %do;
18467 +    proc sort data=tempclass; by node category; run;
18468 +    %if &validflag eq N %then %do;
18469 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18470 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18471 +    %end;
18472 +    %else %do;
18473 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18474 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18475 +    %end;
18476 +      set tempclass;
18478 +      %if &validflag eq N %then %do;
18479 +        %if "&adjusted" eq "N" %then %do;
18480 +          if statname="N" then output tempn;
18481 +        %end;
18482 +        %else %do;
18483 +          if statname="NPRIORS" then output tempn;
18484 +        %end;
18485 +        else if statname="PREDICTION" then output temppredict;
18486 +        else if statname="PROBABILITY" then output tempprob;
18487 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18488 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18489 +      %end;
18490 +      %else %do;
18491 +        %if "&adjusted" eq "N" %then %do;
18492 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18493 +        %end;
18494 +        %else %do;
18495 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18496 +        %end;
18497 +        else if statname="PREDICTION" then output temppredict;
18498 +        else if statname="PROBABILITY" then output tempprob;
18499 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18500 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18501 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18502 +      %end;
18503 +    run;
18506 +    /* determine if profit/loss exists in tempprofit */
18507 +    %let em_profitflag=0;
18508 +    %let em_lossflag=0;
18509 +    proc sql;
18510 +      reset noprint;
18511 +      select count(*) into :em_profitflag from tempprofit;
18512 +    quit;
18513 +    proc sql;
18514 +      reset noprint;
18515 +      select count(*) into :em_lossflag from temploss;
18516 +    quit;
18518 +    %if &validFlag eq Y %then %do;
18519 +      proc transpose data=tempn
18520 +        %if "&adjusted" eq "N" %then %do;
18521 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18522 +        %end;
18523 +        %else %do;
18524 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18525 +        %end;
18526 +        by node;
18527 +        id statname;
18528 +      run;
18529 +      %if &em_profitflag ne 0 %then %do;
18530 +        proc transpose data=tempprofit out=tempprofit;
18531 +          by node category;
18532 +          id statname ;
18533 +        run;
18534 +      %end;
18535 +      %if &em_lossflag ne 0 %then %do;
18536 +        proc transpose data=temploss out=temploss;
18537 +          by node category;
18538 +          id statname ;
18539 +        run;
18540 +      %end;
18541 +      data tempprob;
18542 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18543 +        by node
18544 +        %if &multipleTar eq Y %then %do;
18545 +          target
18546 +        %end;
18547 +        category;
18548 +      run;
18549 +    %end;
18551 +    /* store percentcorrect value */
18552 +    data temppredict;
18553 +      merge tempprob temppredict(in=_a);
18554 +      by node category;
18555 +      if _a then do;
18556 +        percentCorrect = statvalue;
18557 +        %if &validFlag eq Y %then %do;
18558 +          vpercentCorrect= vstatvalue;
18559 +        %end;
18560 +      end;
18561 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18562 +      %if &validFlag eq Y %then %do;
18563 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18564 +      %end;
18565 +      ;
18566 +      if missing(percentCorrect) then delete;
18567 +      drop target;
18568 +    run;
18570 +    /* build profittext */
18571 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18572 +      data tempprofittext(keep= node profittext profitloss);
18573 +        length profittext $800 profitloss 8.;
18574 +        retain profittext profitloss;
18576 +        merge tempprob
18577 +        %if &em_profitflag ne 0 %then %do;
18578 +          tempprofit
18579 +        %end;
18580 +        %else %if &em_lossflag ne 0 %then %do;
18581 +          temploss
18582 +        %end;
18583 +        ;
18584 +        by node category;
18586 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18587 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18588 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18589 +          %let profittype = ALL;
18590 +        %end;
18592 +        /* create the profitloss variable for nodecolor if selected */
18593 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18595 +        %if "&profittype" eq "ALL" %then %do;
18596 +          if strip(CATEGORY)="&targetEvent" then do;
18597 +            profitloss=statvalue;
18598 +          end;
18599 +          if first.node then do;
18600 +            %if &validFlag eq N %then %do;
18601 +             %if &em_profitflag ne 0 %then %do;
18602 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18603 +             %end;
18604 +             %if &em_lossflag ne 0 %then %do;
18605 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18606 +             %end;
18607 +            %end;
18608 +            %else %do;
18609 +             %if &em_profitflag ne 0 %then %do;
18610 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18610!+;
18611 +             %end;
18612 +             %if &em_lossflag ne 0 %then %do;
18613 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18614 +             %end;
18615 +            %end;
18616 +          end;
18617 +          else if last.node then do;
18618 +            %if &validFlag eq N %then %do;
18619 +             %if &em_profitflag ne 0 %then %do;
18620 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18621 +             %end;
18622 +             %if &em_lossflag ne 0 %then %do;
18623 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18624 +             %end;
18625 +             /*if CATEGORY="&targetEvent" then do;
18626 +               profitloss=statvalue;
18627 +             end;*/
18628 +            %end;
18629 +            %else %do;
18630 +             %if &em_profitflag ne 0 %then %do;
18631 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18631!+14.&EM_PROPERTY_SPLITPRECISION);
18632 +                if CATEGORY="&targetEvent" then do;
18633 +                 profitloss=ALTERNATIVE_PROFIT;
18634 +                end;
18635 +             %end;
18636 +             %if &em_lossflag ne 0 %then %do;
18637 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18637!+14.&EM_PROPERTY_SPLITPRECISION);
18638 +                if CATEGORY="&targetEvent" then do;
18639 +                  profitloss=ALTERNATIVE_LOSS;
18640 +                end;
18641 +             %end;
18642 +            %end;
18643 +            output;
18644 +          end;
18645 +          else do;
18646 +            %if &validFlag eq N %then %do;
18647 +             %if &em_profitflag ne 0 %then %do;
18648 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18649 +             %end;
18650 +             %if &em_lossflag ne 0 %then %do;
18651 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18652 +             %end;
18653 +            %end;
18654 +            %else %do;
18655 +             %if &em_profitflag ne 0 %then %do;
18656 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18656!+14.&EM_PROPERTY_SPLITPRECISION);
18657 +             %end;
18658 +             %if &em_lossflag ne 0 %then %do;
18659 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18659!+14.&EM_PROPERTY_SPLITPRECISION);
18660 +             %end;
18661 +            %end;
18662 +          end;
18663 +        %end;
18664 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18665 +          if strip(CATEGORY) = "&targetevent" then do;
18666 +            %if &validFlag eq N %then %do;
18667 +             %if &em_profitflag ne 0 %then %do;
18668 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18669 +             %end;
18670 +             %if &em_lossflag ne 0 %then %do;
18671 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18672 +             %end;
18673 +             profitloss=statvalue;
18674 +            %end;
18675 +            %else %do;
18676 +             %if &em_profitflag ne 0 %then %do;
18677 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18677!+;
18678 +                profitloss=ALTERNATIVE_PROFIT;
18679 +             %end;
18680 +             %if &em_lossflag ne 0 %then %do;
18681 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18682 +                profitloss=ALTERNATIVE_LOSS;
18683 +             %end;
18684 +            %end;
18685 +            output;
18686 +          end;
18687 +        %end;
18688 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18689 +          if strip(CATEGORY) = "&targetevent" then do;
18690 +            %if &validFlag eq N %then %do;
18691 +             profitloss=statvalue;
18692 +            %end;
18693 +            %else %do;
18694 +             %if &em_profitflag ne 0 %then %do;
18695 +                profitloss=ALTERNATIVE_PROFIT;
18696 +             %end;
18697 +             %if &em_lossflag ne 0 %then %do;
18698 +                profitloss=ALTERNATIVE_LOSS;
18699 +             %end;
18700 +            %end;
18701 +            output;
18702 +          end;
18703 +        %end;
18704 +      run;
18705 +    %end;
18707 +    data tempprob(keep= node probtext);
18708 +      length probtext $800;
18709 +      retain probtext;
18710 +      set tempprob ;
18711 +      by node;
18713 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18714 +      %let probtype = &EM_PROPERTY_TARGET;
18715 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18716 +        %let probtype = ALL;
18717 +      %end;
18719 +      %if "&probtype" eq "ALL" %then %do;
18720 +        if first.node then do;
18721 +          %if &validFlag eq N %then %do;
18722 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18723 +          %end;
18724 +          %else %do;
18725 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18726 +          %end;
18727 +        end;
18728 +        else if last.node then do;
18729 +          %if &validFlag eq N %then %do;
18730 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18731 +          %end;
18732 +          %else %do;
18733 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18734 +          %end;
18735 +          output;
18736 +        end;
18737 +        else do;
18738 +          %if &validFlag eq N %then %do;
18739 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18740 +          %end;
18741 +          %else %do;
18742 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18743 +          %end;
18744 +        end;
18745 +      %end;
18746 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18747 +        if strip(CATEGORY) = "&targetevent" then do;
18748 +          %if &validFlag eq N %then %do;
18749 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18750 +          %end;
18751 +          %else %do;
18752 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18753 +          %end;
18754 +          output;
18755 +        end;
18756 +      %end;
18757 +      %else %if "&probtype" eq "NONE" %then %do;
18758 +        if last.node then do;
18759 +          output;
18760 +        end;
18761 +      %end;
18762 +    run;
18763 +  %end;
18765 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18767 +  %let oldexists=0;
18768 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18769 +     data old_tree_plot;
18770 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18771 +        rename nodecolor=oldnodecolor;
18772 +     run;
18774 +     proc sort data=old_tree_plot;
18775 +        by node;
18776 +     run;
18778 +     %let oldexists=1;
18779 +  %end;
18781 +  data &EM_USER_TREE_PLOT;
18782 +    length textall $800;
18783 +    merge tempoutnodes temptargetused
18785 +    %if &em_intTarget eq Y %then %do;
18786 +      tempinterval
18787 +    %end;
18789 +    %if &em_classTarget eq Y %then %do;
18791 +      %if &validFlag eq N %then %do;
18792 +        tempn(rename=(statvalue=N))
18793 +      %end;
18794 +      %else %do;
18795 +        tempn
18796 +      %end;
18798 +      temppredict tempprob
18800 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18801 +        tempprofittext
18802 +      %end;
18803 +    %end;
18804 +    ;
18805 +    by node;
18807 +    /* build nodetext based on user selection */
18808 +    textall="";
18810 +    %if &em_intTarget eq Y %then %do;
18811 +    if tarlevel="INTERVAL" then do;
18812 +      /* Nodeid */
18813 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18814 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18815 +      %end;
18817 +      /* Target identifier if multiple targets are used */
18818 +      %if "&multipleTar" eq "Y" %then %do;
18819 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18820 +      %end;
18822 +      %if &validFlag eq Y %then %do;
18823 +         /* Column labels displayed in validflag eq Y only */
18824 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18825 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18825!+noquote ))";
18826 +         %end;
18828 +         /* Average values */
18829 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18830 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18831 +         %end;
18833 +         /* RASE */
18834 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18835 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18836 +         %end;
18838 +         /* Count */
18839 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18840 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18841 +         %end;
18842 +      %end;
18843 +      %else %do;
18844 +         /* Average values */
18845 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18846 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18847 +         %end;
18849 +         /* RASE */
18850 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18851 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18852 +         %end;
18854 +         /* Count */
18855 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18856 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18857 +         %end;
18858 +      %end;
18860 +      /* nodecolor */
18861 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18862 +        nodecolor=PREDICTION;
18863 +      %end;
18864 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18865 +        nodecolor=RASE;
18866 +      %end;
18867 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18868 +        nodecolor=1;
18869 +      %end;
18871 +    end;
18872 +    %end;
18873 +    %if &em_classTarget eq Y %then %do;
18874 +    if tarlevel^="INTERVAL" then  do;
18876 +      /* Nodeid */
18877 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18878 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18879 +      %end;
18880 +      /* Target identifier if multiple targets are used */
18881 +      %if "&multipleTar" eq "Y" %then %do;
18882 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18883 +      %end;
18885 +      /* Predicted values */
18886 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18887 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18888 +      %end;
18890 +      /* Column labels displayed in validflag eq Y only */
18891 +      %if "&ValidFlag" eq "Y" %then %do;
18892 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18893 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18893!+noquote ))";
18894 +        %end;
18895 +      %end;
18897 +      /* Target Values */
18898 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18899 +        textall=strip(textall)||"0A"x||strip(probtext);
18900 +      %end;
18902 +      /* include profit or loss for all target levels */
18903 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18904 +        textall=strip(textall)||"0A"x||strip(profittext);
18905 +      %end;
18907 +      %if &validFlag eq N %then %do;
18908 +        /* Percent Correct */
18909 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18910 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18911 +        %end;
18913 +         /* Count */
18914 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18915 +          %if "&adjusted" eq "N" %then %do;
18916 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18917 +          %end;
18918 +          %else %do;
18919 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18920 +          %end;
18921 +         %end;
18922 +      %end;
18923 +      %else %do;
18924 +        /* Percent Correct */
18925 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18926 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18927 +        %end;
18929 +         /* Count */
18930 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18931 +          %if "&adjusted" eq "N" %then %do;
18932 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18933 +          %end;
18934 +          %else %do;
18935 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18936 +          %end;
18937 +         %end;
18938 +      %end;
18940 +      /* nodecolor */
18941 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18942 +       %if &multipleTar ne Y %then %do;
18943 +        nodecolor=&predTarget;
18944 +       %end;
18945 +       %else %do;
18946 +         nodecolor=percentcorrect;
18947 +       %end;
18948 +      %end;
18949 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18950 +        nodecolor=percentcorrect;
18951 +      %end;
18952 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18953 +        nodecolor=1;
18954 +      %end;
18955 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18956 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18957 +          nodecolor=percentcorrect;
18958 +        %end;
18959 +        %else %do;
18960 +          nodecolor=profitloss;
18961 +        %end;
18962 +      %end;
18964 +    end;
18965 +    %end;
18966 +    %if &em_intTarget eq Y %then %do;
18967 +     drop  PREDICTION  TARGET TARLEVEL
18968 +     %if &ValidFlag eq Y %then %do;
18969 +         VPREDICTION
18970 +     %end;
18971 +     ;
18972 +    %end;
18973 +    %if &em_classTarget eq Y %then %do;
18974 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18975 +     %if &ValidFlag eq Y %then %do;
18976 +         VSTATVALUE
18977 +     %end;
18978 +     ;
18979 +    %end;
18981 +  run;
18983 +  /* add leaf index information to plotds - based on primary target only*/
18984 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18985 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18986 +      set &EM_USER_OUTSTATS;
18987 +      if ((statname="PROBABILITY"
18988 +      %if &validexist %then %do;
18989 +       or statname="VALID: PROBABILITY"
18990 +      %end;
18991 +      ) AND (CATEGORY="&TARGETEVENT")
18992 +      %if "&multipleTar" eq "Y" %then %do;
18993 +        AND (Target="%EM_TARGET")
18994 +      %end;
18995 +      );
18996 +    run;
18998 +    %if &validexist %then %do;
18999 +      proc sort data=tempprob; by node; run;
19000 +      %let vpredTarget = V%substr(&predTarget, 2);
19001 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19002 +         by node;
19003 +         id statname;
19004 +      run;
19005 +    %end;
19006 +  %end;
19007 +  %else %do;
19008 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19009 +      set &EM_USER_OUTSTATS;
19010 +      if ((statname="PREDICTION"
19011 +      %if &validexist %then %do;
19012 +       or statname="VALID: PREDICTION"
19013 +      %end;
19014 +      )
19015 +      %if "&multipleTar" eq "Y" %then %do;
19016 +        AND (Target="%EM_TARGET")
19017 +      %end;
19018 +      );
19019 +    run;
19020 +    %if &validexist %then %do;
19021 +      proc sort data=tempprob; by node; run;
19022 +      %let vpredTarget = V%substr(&predTarget, 2);
19023 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19024 +         by node;
19025 +         id statname;
19026 +      run;
19027 +    %end;
19028 +  %end;
19030 +  proc sort data=tempprob; by node; run;
19031 +  data tempoutnodes;
19032 +    merge tempoutnodes tempprob;
19033 +    by node;
19034 +  run;
19036 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19037 +  data tempnodes;
19038 +    retain traintotal validtotal;
19039 +    set tempnodes(where=(leaf ne . ));
19040 +    tprob=round(&predTarget, .01);
19041 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19042 +      percevent_train=round(tprob*100, .01);
19043 +    %end;
19044 +    %else %do;
19045 +      percevent_train=tprob;
19046 +    %end;
19048 +    perc_train=round((n/traintotal)*100, 0.01);
19049 +    /* leafwidth already has a *10 multiplier */
19050 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19052 +    %if &validexist %then %do;
19053 +      %let vpredTarget = V%substr(&predTarget,2);
19054 +      vprob=round(&vpredTarget, .01);
19055 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19056 +        percevent_valid=round(vprob*100, .01);
19057 +      %end;
19058 +      %else %do;
19059 +        percevent_valid=vprob;
19060 +      %end;
19061 +      perc_valid=round((vn/validtotal)*100, .01);
19062 +    %end;
19064 +    index=_N_;
19065 +    keep node index tprob perc_train percevent_train
19066 +    %if &validexist %then %do;
19067 +        vprob percevent_valid perc_valid
19068 +    %end;
19069 +    ;
19070 +  run;
19071 +  proc sort data=tempnodes; by node; run;
19072 +  data &EM_USER_TREE_PLOT;
19073 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19074 +    by node;
19075 +    if missing(node) then delete;
19076 +    %if &oldexists %then %do;
19077 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19078 +      drop oldnodecolor;
19079 +    %end;
19080 +    abovetext = compbl(abovetext);
19082 +    /* add variable labels */
19083 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19084 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19085 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19086 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19087 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19088 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19090 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19091 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19092 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19093 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19094 +          %end;
19095 +          %else %do;
19096 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19097 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19098 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19099 +          %end;
19100 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19102 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19103 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19104 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19105 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19106 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19107 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19108 +          %end;
19109 +          %else %do;
19110 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19111 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19112 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19113 +          %end;
19114 +    ;
19115 +  run;
19117 +  /* delete temporary tables */
19118 +  proc datasets lib=work nolist;
19119 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19120 +  run;
19122 +%mend em_tree_makePlotDs;
19126 +%macro em_tree_report;
19128 +   /* report properties */
19129 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19130 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19131 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19132 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19133 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19134 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19135 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19136 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19137 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19138 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19139 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19140 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19141 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19143 +   %let validexist=0;
19144 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19145 +     %let validexist=1;
19146 +   %end;
19148 +   /* determine if multiple targets will be processed */
19149 +   %let em_tree_multipleTargets=N;
19150 +   %let em_tree_numTarget=1;
19151 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19152 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19153 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19154 +         %let em_tree_multipleTargets=N;
19155 +      %end;
19156 +      %else %do;
19157 +        data _null_;
19158 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19159 +          if eof then
19160 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19161 +        run;
19163 +        %if &em_tree_numTarget gt 1 %then %do;
19164 +           %let em_tree_multipleTargets=Y;
19165 +        %end;
19166 +     %end;
19167 +   %end;
19169 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19171 +   /* variable importance */
19172 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19173 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19175 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19176 +     /* and the columns may not be generated                                                                                 */
19177 +     %let em_tree_cvexists=;
19178 +     %let em_tree_surrexists=.;
19179 +     data _null_;
19180 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19181 +       if eof then do ;
19182 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19183 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19184 +       end;
19185 +     run;
19187 +     data &EM_USER_OUTIMPORT;
19188 +         set &EM_USER_OUTIMPORT;
19189 +         /* format columns based on Precison value specified */
19190 +         format importance 15.&EM_PROPERTY_PRECISION
19191 +              %if &validexist %then %do;
19192 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19193 +              %end;
19194 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19195 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19196 +              %end;
19197 +         ;
19198 +     run;
19200 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19201 +     proc print data=&EM_USER_OUTIMPORT
19202 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19203 +          (where=((nrules>0) OR (nsurrogates>0)))
19204 +        %end;
19205 +        %else %do;
19206 +           (where=(nrules>0))
19207 +        %end;
19208 +        label noobs
19209 +        ;
19210 +     run;
19211 +     title10;
19213 +   %end;
19215 +   /* Sequence */
19216 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19217 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19218 +   data _null_ ;
19219 +      set &EM_USER_outseq (obs=2) end=eof ;
19220 +      if eof then do ;
19221 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19222 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19223 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19224 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19225 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19226 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19227 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19228 +      end;
19229 +    run;
19231 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19232 +      data &EM_USER_OUTSEQ;
19233 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19234 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19235 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19236 +           _XMISC_=_VMISC_
19237 +        %end;
19238 +        %if "&em_tree_aprof" ne "."  %then %do;
19239 +           _XAPROF_=_VAPROF_
19240 +           _XPROF_ = _VPROF_
19241 +        %end;
19242 +        %if "&em_tree_aloss" ne "."  %then %do;
19243 +           _XALOSS_=_VALOSS_
19244 +        %end;
19245 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19246 +           _XPASE_ = _VPASE_
19247 +           _XPMISC_ = _VPMISC_
19248 +        %end;
19250 +        ));
19251 +     %end;
19252 +     %else %do;
19253 +        set &EM_USER_OUTSEQ;
19254 +     %end;
19256 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19257 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19258 +            _MISC_   15.&EM_PROPERTY_PRECISION
19259 +         %end;
19260 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19261 +            _PASE_  15.&EM_PROPERTY_PRECISION
19262 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19263 +         %end;
19264 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19265 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19266 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19267 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19268 +            %end;
19269 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19270 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19271 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19272 +            %end;
19273 +         %end;
19274 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19275 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19276 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19277 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19278 +            %end;
19279 +         %end;
19280 +         %if "&em_tree_seq" ne "." %then %do;
19281 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19282 +         %end;
19283 +         %if "&em_tree_vseq" ne "." %then %do;
19284 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19285 +         %end;
19286 +         %if "&em_tree_aprof" ne "." %then %do;
19287 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19288 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19289 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19290 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19291 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19292 +           %end;
19293 +         %end;
19294 +         %else %if "&em_tree_aloss" ne "." %then %do;
19295 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19296 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19297 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19298 +           %end;
19299 +         %end;
19300 +      ;
19301 +    run;
19302 +   %end;
19304 +   /* Observation Based Importance */
19305 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19307 +      /* need to check for 0 obs */
19308 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19309 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19310 +      %let rc=%sysfunc(close(&dsid));
19312 +      %if &onobs %then %do;
19313 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19314 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19316 +         data &EM_USER_OUTOBSIMP;
19317 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19318 +           if _a;
19319 +           by _INPUT1_;
19320 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19321 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19322 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19323 +                   %end;
19324 +                   ;
19325 +         run;
19326 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19327 +      %end;
19328 +   %end;
19330 +  %end;
19332 +  /* create dataset to support tree diagram and icicle plot */
19333 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19334 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19336 +  /* display tree diagram */
19337 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19338 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19340 +  /* display icicle diagram */
19341 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19342 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19344 +  /* Leaf Statistics Plot */
19345 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19347 +  /* print leaf information to output window */
19348 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19350 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19351 +       by descending N;
19352 +     run;
19354 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19355 +     %local vn;
19356 +     data _null_;
19357 +       set t (obs=2) end=eof;
19358 +       if eof then do;
19359 +         call symput("vn", strip(put(vn, best.)));
19360 +       end;
19361 +     run;
19363 +     data t;
19364 +       set t;
19365 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19366 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19367 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19368 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19369 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19370 +       %end;
19371 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19372 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19373 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19374 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19375 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19376 +          %end;
19377 +       %end;
19378 +       ;
19379 +     run;
19381 +     /* determine if rase is found in t */
19382 +    %let dsid=%sysfunc(open(t,i));
19383 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19384 +    %let rc=%sysfunc(close(&dsid));
19386 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19387 +     proc print data=t noobs label;
19388 +       where tprob ne .;
19389 +       var node depth N tprob
19390 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19391 +         %if "&vn" ne "." %then %do;
19392 +           VN
19393 +         %end;
19394 +         vprob
19395 +       %end;
19396 +       %if &raseexists %then %do;
19397 +            RASE
19398 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19399 +              VRASE
19400 +            %end;
19401 +       %end;
19402 +       ;
19403 +     run;
19404 +     title10;
19405 +  %end;
19407 +  /* create plots that are done during training of node */
19408 +  /* display iterative plot, including reference line */
19409 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19410 +   /* %if &nleaves eq  %then %do; */
19411 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19412 +      data _null_;
19413 +        set &EM_USER_OUTTOPOLOGY end=eof;
19414 +        if eof then do;
19415 +          call symput('nleaves', LEAF);
19416 +        end;
19417 +      run;
19418 +   /* %end; */
19420 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19421 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19422 +  %end;
19424 +  /* display leaf statistics */
19425 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19427 +  /* stats by node if multiple targets = Y */
19428 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19429 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19430 +    data &EM_USER_OUTSTATS;
19431 +      set &EM_USER_OUTSTATS;
19433 +     * if STATNAME="TARGET" then delete;
19434 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19435 +      drop leaf;
19436 +    run;
19437 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19439 +  %end;
19440 +  %else %do;
19441 +    /* add outstats and outdescribe to spk but not results */
19442 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19443 +  %end;
19445 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 31 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: The data set EMWS5.TREE_OUTSEQ has 12 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_ATTRITION_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 2 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 2 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 2 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set EMWS5.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 2 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 5 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 2 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 5 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 5 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 2 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 2 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 5 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 35 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 30 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 35 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 5 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 35 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 35 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 35 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 10 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 5 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 10 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 10 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 5 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPPROB.
NOTE: There were 10 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 10 observations read from the data set WORK.TEMPPROB.
NOTE: There were 5 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 5 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 5 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 5 observations read from the data set WORK.TEMPN.
NOTE: There were 5 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 5 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 5 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 5 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 5 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 5 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 5 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 3 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: There were 3 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 5 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 5 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 5 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 5 observations read from the data set EMWS5.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19446
19447  *------------------------------------------------------------*;
19448  * End REPORT: Tree;
19449  *------------------------------------------------------------*;
 
19450  /* Reset EM Options */
19451  options formchar="|----|+|---+=|-/\<>*";
19452  options nocenter ls=256 ps=10000;
19453  goptions reset=all device=GIF NODISPLAY;
 
19454  proc sort data=WORK.EM_USER_REPORT;
19455  by ID VIEW;
19456  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19457  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19458  by NAME;
19459  run;
 
NOTE: There were 33 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 33 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19460  proc sort data=EMWS5.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19461  by NAME;
19462  run;
 
NOTE: There were 33 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 33 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19463  data WORK.ASSESS_META;
19464  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19465  by NAME;
19466  run;
 
NOTE: There were 33 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 33 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 33 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19467  data EM_temp_assessMeta;
19468  set EMWS5.Tree_CMeta_TRAIN;
19469  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19470  run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19471  data EM_temp_assessdata;
19472  set EMWS5.Tree_TRAIN(keep=
19473  F_Attrition
19474  I_Attrition
19475  P_Attrition0
19476  P_Attrition1
19477  Q_Attrition0
19478  Q_Attrition1
19479  R_Attrition0
19480  R_Attrition1
19481  U_Attrition
19482  V_Attrition0
19483  V_Attrition1
19484  _WARN_
19485  Attrition
19486  );
19487  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 791 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 791 observations read from the data set EMWS5.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 791 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23768   data EM_temp_assessMeta;
23769   set EMWS5.Tree_CMeta_TRAIN;
23770   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23771   run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23772   data EM_temp_assessdata;
23773   set EMWS5.Tree_VALIDATE(keep=
23774   F_Attrition
23775   I_Attrition
23776   P_Attrition0
23777   P_Attrition1
23778   Q_Attrition0
23779   Q_Attrition1
23780   R_Attrition0
23781   R_Attrition1
23782   U_Attrition
23783   V_Attrition0
23784   V_Attrition1
23785   _WARN_
23786   Attrition
23787   );
23788   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 339 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 339 observations read from the data set EMWS5.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 339 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28078   %let _cn = %sysfunc(getoption(CENTER));
28079   options nocenter;
28080   proc print data=EMWS5.Tree_EMREPORTFIT noobs label;
28081   var STAT LABEL TRAIN
28082   VALIDATE
28083   TEST
28084   ;
28085   by TARGET TARGETLABEL;
28086   title9 ' ';
28087   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28088   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28089   title10;
28090   options &_cn;
 
28091   proc sort data=EMWS5.Tree_EMCLASSIFICATION nothreads;
28092   by DATAROLE TARGET TARGETLABEL;
28093   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28094   %let _cn = %sysfunc(getoption(CENTER));
28095   options nocenter;
28096   proc print data=EMWS5.Tree_EMCLASSIFICATION noobs label;
28097   var from into pct_row pct_col count percent
28098   ;
28099   by DATAROLE TARGET TARGETLABEL;
28100   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28101   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28102   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28103   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28104   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28105   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28106   where _TYPE_='PREDICTION';
28107   title9 ' ';
28108   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28109   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28110   title9;
28111   title10;
28112   options &_cn;
 
28113   %let _cn = %sysfunc(getoption(CENTER));
28114   options nocenter;
28115   data EMWS5.Tree_EMEVENTREPORT;
28116   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28116 !  8;
28117   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28117 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28117 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28117 ! FALSEEVENT
28118   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28118 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28118 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28119      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28120   FALSEEVENT=0;
28121   FALSENEVENT=0;
28122   TRUEEVENT=0;
28123   TRUENEVENT=0;
28124   set EMWS5.Tree_EMEVENTREPORT;
28125   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28126   proc print data=EMWS5.Tree_EMEVENTREPORT noobs label;
28127   title9 ' ';
28128   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28129   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28130   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28131   title10;
28132   options &_cn;
 
28133   proc datasets library=EMWS5 nolist;
28134   modify Tree_EMRANK;
28135   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28136   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28137   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMRANK.DATA.
28138   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
28139   %let _cn = %sysfunc(getoption(CENTER));
28140   options nocenter;
28141   proc print data=EMWS5.Tree_EMRANK label noobs;
28142   var
28143   decile gain lift liftc resp respc N _meanP_;
28144   by
28145   notsorted DATAROLE
28146   notsorted TARGET
28147   notsorted TARGETLABEL
28148   ;
28149   title9 ' ';
28150   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28151   run;
 
NOTE: There were 40 observations read from the data set EMWS5.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28152   title10;
28153   options &_cn;
 
28154   proc datasets library=EMWS5 nolist;
28155   modify Tree_EMSCOREDIST;
28156   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28157   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28158   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMSCOREDIST.DATA.
28159   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
